
using System;
using System.Linq;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Runtime.Serialization;
using System.ComponentModel;
using inercya.EntityLite;	
using inercya.EntityLite.Extensions;	

namespace Sid.Entities
{
	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_ATC_CODES")]
	public partial class EmaAtcCode
	{
		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_ATC_CODES" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _value;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VALUE", BaseColumnName ="VALUE", BaseTableName = "EMA_ATC_CODES" )]		public String Value 
		{ 
		    get { return _value; } 
			set 
			{
			    _value = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "EMA_ATC_CODES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }


	}

	public partial class EmaAtcCodeRepository : Repository<EmaAtcCode> 
	{
		public EmaAtcCodeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaAtcCodeFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string Value = "Value";
		public const string Description = "Description";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_AUTHORISATION_PROCEDURES")]
	public partial class EmaAuthorisationProcedure
	{
		private Decimal? _xevmpdCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_AUTHORISATION_PROCEDURES" )]		public Decimal? XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _authorisationProcedureValue;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="AUTHORISATION_PROCEDURE_VALUE", BaseColumnName ="AUTHORISATION_PROCEDURE_VALUE", BaseTableName = "EMA_AUTHORISATION_PROCEDURES" )]		public String AuthorisationProcedureValue 
		{ 
		    get { return _authorisationProcedureValue; } 
			set 
			{
			    _authorisationProcedureValue = value;
			}
        }


	}

	public partial class EmaAuthorisationProcedureRepository : Repository<EmaAuthorisationProcedure> 
	{
		public EmaAuthorisationProcedureRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaAuthorisationProcedureFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string AuthorisationProcedureValue = "AuthorisationProcedureValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_AUTHORISATION_STATUSES")]
	public partial class EmaAuthorisationStatus
	{
		private Decimal? _xevmpdCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_AUTHORISATION_STATUSES" )]		public Decimal? XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _authorisationStatusValue;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="AUTHORISATION_STATUS_VALUE", BaseColumnName ="AUTHORISATION_STATUS_VALUE", BaseTableName = "EMA_AUTHORISATION_STATUSES" )]		public String AuthorisationStatusValue 
		{ 
		    get { return _authorisationStatusValue; } 
			set 
			{
			    _authorisationStatusValue = value;
			}
        }


	}

	public partial class EmaAuthorisationStatusRepository : Repository<EmaAuthorisationStatus> 
	{
		public EmaAuthorisationStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaAuthorisationStatusFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string AuthorisationStatusValue = "AuthorisationStatusValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_CONCENTRATION_TYPES")]
	public partial class EmaConcentrationType
	{
		private Decimal? _xevmpdCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_CONCENTRATION_TYPES" )]		public Decimal? XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _concentrationTypeValue;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CONCENTRATION_TYPE_VALUE", BaseColumnName ="CONCENTRATION_TYPE_VALUE", BaseTableName = "EMA_CONCENTRATION_TYPES" )]		public String ConcentrationTypeValue 
		{ 
		    get { return _concentrationTypeValue; } 
			set 
			{
			    _concentrationTypeValue = value;
			}
        }


	}

	public partial class EmaConcentrationTypeRepository : Repository<EmaConcentrationType> 
	{
		public EmaConcentrationTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaConcentrationTypeFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string ConcentrationTypeValue = "ConcentrationTypeValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_LEGAL_BASIS")]
	public partial class EmaLegalBasis
	{
		private Decimal _xevmpdCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_LEGAL_BASIS" )]		public Decimal XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _legaBasisValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="LEGA_BASIS_VALUE", BaseColumnName ="LEGA_BASIS_VALUE", BaseTableName = "EMA_LEGAL_BASIS" )]		public String LegaBasisValue 
		{ 
		    get { return _legaBasisValue; } 
			set 
			{
			    _legaBasisValue = value;
			}
        }

		private String _isForEma;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_EMA", BaseColumnName ="IS_FOR_EMA", BaseTableName = "EMA_LEGAL_BASIS" )]		public String IsForEma 
		{ 
		    get { return _isForEma; } 
			set 
			{
			    _isForEma = value;
			}
        }


	}

	public partial class EmaLegalBasisRepository : Repository<EmaLegalBasis> 
	{
		public EmaLegalBasisRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaLegalBasisFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string LegaBasisValue = "LegaBasisValue";
		public const string IsForEma = "IsForEma";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_MEDICAL_DEVICES")]
	public partial class EmaMedicalDevice
	{
		private Decimal? _xevmpdCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_MEDICAL_DEVICES" )]		public Decimal? XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _medicalDeviceValue;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="MEDICAL_DEVICE_VALUE", BaseColumnName ="MEDICAL_DEVICE_VALUE", BaseTableName = "EMA_MEDICAL_DEVICES" )]		public String MedicalDeviceValue 
		{ 
		    get { return _medicalDeviceValue; } 
			set 
			{
			    _medicalDeviceValue = value;
			}
        }


	}

	public partial class EmaMedicalDeviceRepository : Repository<EmaMedicalDevice> 
	{
		public EmaMedicalDeviceRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaMedicalDeviceFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string MedicalDeviceValue = "MedicalDeviceValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_MEDICINAL_PRODUCT_TYPES")]
	public partial class EmaMedicinalProductType
	{
		private Decimal _xevmpdCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_MEDICINAL_PRODUCT_TYPES" )]		public Decimal XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _medicinalProductTypeValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="MEDICINAL_PRODUCT_TYPE_VALUE", BaseColumnName ="MEDICINAL_PRODUCT_TYPE_VALUE", BaseTableName = "EMA_MEDICINAL_PRODUCT_TYPES" )]		public String MedicinalProductTypeValue 
		{ 
		    get { return _medicinalProductTypeValue; } 
			set 
			{
			    _medicinalProductTypeValue = value;
			}
        }


	}

	public partial class EmaMedicinalProductTypeRepository : Repository<EmaMedicinalProductType> 
	{
		public EmaMedicinalProductTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaMedicinalProductTypeFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string MedicinalProductTypeValue = "MedicinalProductTypeValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_ORGANISATIONS")]
	public partial class EmaOrganisation
	{
		private String _xevmpCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMP_CODE", BaseColumnName ="XEVMP_CODE", BaseTableName = "EMA_ORGANISATIONS" )]		public String XevmpCode 
		{ 
		    get { return _xevmpCode; } 
			set 
			{
			    _xevmpCode = value;
			}
        }

		private String _organisationValue;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ORGANISATION_VALUE", BaseColumnName ="ORGANISATION_VALUE", BaseTableName = "EMA_ORGANISATIONS" )]		public String OrganisationValue 
		{ 
		    get { return _organisationValue; } 
			set 
			{
			    _organisationValue = value;
			}
        }

		private String _organisationAddress;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ORGANISATION_ADDRESS", BaseColumnName ="ORGANISATION_ADDRESS", BaseTableName = "EMA_ORGANISATIONS" )]		public String OrganisationAddress 
		{ 
		    get { return _organisationAddress; } 
			set 
			{
			    _organisationAddress = value;
			}
        }

		private String _dateOfCreation;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DATE_OF_CREATION", BaseColumnName ="DATE_OF_CREATION", BaseTableName = "EMA_ORGANISATIONS" )]		public String DateOfCreation 
		{ 
		    get { return _dateOfCreation; } 
			set 
			{
			    _dateOfCreation = value;
			}
        }

		private String _dateOfLastUpdate;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DATE_OF_LAST_UPDATE", BaseColumnName ="DATE_OF_LAST_UPDATE", BaseTableName = "EMA_ORGANISATIONS" )]		public String DateOfLastUpdate 
		{ 
		    get { return _dateOfLastUpdate; } 
			set 
			{
			    _dateOfLastUpdate = value;
			}
        }

		private String _status;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS", BaseColumnName ="STATUS", BaseTableName = "EMA_ORGANISATIONS" )]		public String Status 
		{ 
		    get { return _status; } 
			set 
			{
			    _status = value;
			}
        }


	}

	public partial class EmaOrganisationRepository : Repository<EmaOrganisation> 
	{
		public EmaOrganisationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaOrganisationFields
	{
		public const string XevmpCode = "XevmpCode";
		public const string OrganisationValue = "OrganisationValue";
		public const string OrganisationAddress = "OrganisationAddress";
		public const string DateOfCreation = "DateOfCreation";
		public const string DateOfLastUpdate = "DateOfLastUpdate";
		public const string Status = "Status";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_PHARMACEUTICAL_DOSE_FORMS")]
	public partial class EmaPharmaDoseForm
	{
		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_PHARMACEUTICAL_DOSE_FORMS" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _pharmaceuticalDoseFormValue;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PHARMACEUTICAL_DOSE_FORM_VALUE", BaseColumnName ="PHARMACEUTICAL_DOSE_FORM_VALUE", BaseTableName = "EMA_PHARMACEUTICAL_DOSE_FORMS" )]		public String PharmaceuticalDoseFormValue 
		{ 
		    get { return _pharmaceuticalDoseFormValue; } 
			set 
			{
			    _pharmaceuticalDoseFormValue = value;
			}
        }

		private String _valueType;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VALUE_TYPE", BaseColumnName ="VALUE_TYPE", BaseTableName = "EMA_PHARMACEUTICAL_DOSE_FORMS" )]		public String ValueType 
		{ 
		    get { return _valueType; } 
			set 
			{
			    _valueType = value;
			}
        }


	}

	public partial class EmaPharmaDoseFormRepository : Repository<EmaPharmaDoseForm> 
	{
		public EmaPharmaDoseFormRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaPharmaDoseFormFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string PharmaceuticalDoseFormValue = "PharmaceuticalDoseFormValue";
		public const string ValueType = "ValueType";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_REFERENCE_SOURCES")]
	public partial class EmaReferenceSource
	{
		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_REFERENCE_SOURCES" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _referenceSourceValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="REFERENCE_SOURCE_VALUE", BaseColumnName ="REFERENCE_SOURCE_VALUE", BaseTableName = "EMA_REFERENCE_SOURCES" )]		public String ReferenceSourceValue 
		{ 
		    get { return _referenceSourceValue; } 
			set 
			{
			    _referenceSourceValue = value;
			}
        }

		private String _referenceSourceDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="REFERENCE_SOURCE_DESCRIPTION", BaseColumnName ="REFERENCE_SOURCE_DESCRIPTION", BaseTableName = "EMA_REFERENCE_SOURCES" )]		public String ReferenceSourceDescription 
		{ 
		    get { return _referenceSourceDescription; } 
			set 
			{
			    _referenceSourceDescription = value;
			}
        }

		private String _referenceSourceInformation;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="REFERENCE_SOURCE_INFORMATION", BaseColumnName ="REFERENCE_SOURCE_INFORMATION", BaseTableName = "EMA_REFERENCE_SOURCES" )]		public String ReferenceSourceInformation 
		{ 
		    get { return _referenceSourceInformation; } 
			set 
			{
			    _referenceSourceInformation = value;
			}
        }


	}

	public partial class EmaReferenceSourceRepository : Repository<EmaReferenceSource> 
	{
		public EmaReferenceSourceRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaReferenceSourceFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string ReferenceSourceValue = "ReferenceSourceValue";
		public const string ReferenceSourceDescription = "ReferenceSourceDescription";
		public const string ReferenceSourceInformation = "ReferenceSourceInformation";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_ROUTES_OF_ADMINISTRATION")]
	public partial class EmaRouteOfAdministration
	{
		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_ROUTES_OF_ADMINISTRATION" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _routeOfAdministrationValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ROUTE_OF_ADMINISTRATION_VALUE", BaseColumnName ="ROUTE_OF_ADMINISTRATION_VALUE", BaseTableName = "EMA_ROUTES_OF_ADMINISTRATION" )]		public String RouteOfAdministrationValue 
		{ 
		    get { return _routeOfAdministrationValue; } 
			set 
			{
			    _routeOfAdministrationValue = value;
			}
        }

		private String _valueType;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="VALUE_TYPE", BaseColumnName ="VALUE_TYPE", BaseTableName = "EMA_ROUTES_OF_ADMINISTRATION" )]		public String ValueType 
		{ 
		    get { return _valueType; } 
			set 
			{
			    _valueType = value;
			}
        }


	}

	public partial class EmaRouteOfAdministrationRepository : Repository<EmaRouteOfAdministration> 
	{
		public EmaRouteOfAdministrationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaRouteOfAdministrationFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string RouteOfAdministrationValue = "RouteOfAdministrationValue";
		public const string ValueType = "ValueType";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_SUBSTANCE_CLASSES")]
	public partial class EmaSubstanceClass
	{
		private Decimal _xevmpdCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_SUBSTANCE_CLASSES" )]		public Decimal XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _substanceClassValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="SUBSTANCE_CLASS_VALUE", BaseColumnName ="SUBSTANCE_CLASS_VALUE", BaseTableName = "EMA_SUBSTANCE_CLASSES" )]		public String SubstanceClassValue 
		{ 
		    get { return _substanceClassValue; } 
			set 
			{
			    _substanceClassValue = value;
			}
        }


	}

	public partial class EmaSubstanceClassRepository : Repository<EmaSubstanceClass> 
	{
		public EmaSubstanceClassRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaSubstanceClassFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string SubstanceClassValue = "SubstanceClassValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_SUBSTANCES")]
	public partial class EmaSubstance
	{
		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_SUBSTANCES" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME", BaseColumnName ="SUBSTANCE_NAME", BaseTableName = "EMA_SUBSTANCES" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _language;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LANGUAGE", BaseColumnName ="LANGUAGE", BaseTableName = "EMA_SUBSTANCES" )]		public String Language 
		{ 
		    get { return _language; } 
			set 
			{
			    _language = value;
			}
        }

		private String _nameType;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME_TYPE", BaseColumnName ="NAME_TYPE", BaseTableName = "EMA_SUBSTANCES" )]		public String NameType 
		{ 
		    get { return _nameType; } 
			set 
			{
			    _nameType = value;
			}
        }

		private String _dateOfCreation;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DATE_OF_CREATION", BaseColumnName ="DATE_OF_CREATION", BaseTableName = "EMA_SUBSTANCES" )]		public String DateOfCreation 
		{ 
		    get { return _dateOfCreation; } 
			set 
			{
			    _dateOfCreation = value;
			}
        }

		private String _dateOfLastUpdate;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DATE_OF_LAST_UPDATE", BaseColumnName ="DATE_OF_LAST_UPDATE", BaseTableName = "EMA_SUBSTANCES" )]		public String DateOfLastUpdate 
		{ 
		    get { return _dateOfLastUpdate; } 
			set 
			{
			    _dateOfLastUpdate = value;
			}
        }

		private String _status;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS", BaseColumnName ="STATUS", BaseTableName = "EMA_SUBSTANCES" )]		public String Status 
		{ 
		    get { return _status; } 
			set 
			{
			    _status = value;
			}
        }

		private Decimal? _rowNumber;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ROW_NUMBER" )]		public Decimal? RowNumber 
		{ 
		    get { return _rowNumber; } 
			set 
			{
			    _rowNumber = value;
			}
        }


	}

	public partial class EmaSubstanceRepository : Repository<EmaSubstance> 
	{
		public EmaSubstanceRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaSubstanceFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string SubstanceName = "SubstanceName";
		public const string Language = "Language";
		public const string NameType = "NameType";
		public const string DateOfCreation = "DateOfCreation";
		public const string DateOfLastUpdate = "DateOfLastUpdate";
		public const string Status = "Status";
		public const string RowNumber = "RowNumber";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_UNITS_OF_PRESENTATION")]
	public partial class EmaUnitOfPresentation
	{
		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_UNITS_OF_PRESENTATION" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _unitsOfPresentationValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="UNITS_OF_PRESENTATION_VALUE", BaseColumnName ="UNITS_OF_PRESENTATION_VALUE", BaseTableName = "EMA_UNITS_OF_PRESENTATION" )]		public String UnitsOfPresentationValue 
		{ 
		    get { return _unitsOfPresentationValue; } 
			set 
			{
			    _unitsOfPresentationValue = value;
			}
        }


	}

	public partial class EmaUnitOfPresentationRepository : Repository<EmaUnitOfPresentation> 
	{
		public EmaUnitOfPresentationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaUnitOfPresentationFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string UnitsOfPresentationValue = "UnitsOfPresentationValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="ROLES")]
	public partial class Role
	{
		private Decimal _roleId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="ROLE_ID", BaseColumnName ="ROLE_ID", BaseTableName = "ROLES" )]		public Decimal RoleId 
		{ 
		    get { return _roleId; } 
			set 
			{
			    _roleId = value;
			}
        }

		private String _roleName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ROLE_NAME", BaseColumnName ="ROLE_NAME", BaseTableName = "ROLES" )]		public String RoleName 
		{ 
		    get { return _roleName; } 
			set 
			{
			    _roleName = value;
			}
        }

		private DateTime _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "ROLES" )]		public DateTime CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "ROLES" )]		public Decimal CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "ROLES" )]		public DateTime ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "ROLES" )]		public Decimal ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "ROLES" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class RoleRepository : Repository<Role> 
	{
		public RoleRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Role Get(string projectionName, System.Decimal roleId)
		{
			return ((IRepository<Role>)this).Get(projectionName, roleId, FetchMode.UseIdentityMap);
		}

		public Role Get(string projectionName, System.Decimal roleId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Role>)this).Get(projectionName, roleId, fetchMode);
		}

		public Role Get(Projection projection, System.Decimal roleId)
		{
			return ((IRepository<Role>)this).Get(projection, roleId, FetchMode.UseIdentityMap);
		}

		public Role Get(Projection projection, System.Decimal roleId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Role>)this).Get(projection, roleId, fetchMode);
		}

		public Role Get(string projectionName, System.Decimal roleId, params string[] fields)
		{
			return ((IRepository<Role>)this).Get(projectionName, roleId, fields);
		}

		public Role Get(Projection projection, System.Decimal roleId, params string[] fields)
		{
			return ((IRepository<Role>)this).Get(projection, roleId, fields);
		}

		public bool Delete(System.Decimal roleId)
		{
			var entity = new Role { RoleId = roleId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RoleFields
	{
		public const string RoleId = "RoleId";
		public const string RoleName = "RoleName";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="USERS")]
	public partial class User
	{
		private Decimal _userId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "USER_ID", ColumnName ="USER_ID", BaseColumnName ="USER_ID", BaseTableName = "USERS" )]		public Decimal UserId 
		{ 
		    get { return _userId; } 
			set 
			{
			    _userId = value;
			}
        }

		private String _userName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="USER_NAME", BaseColumnName ="USER_NAME", BaseTableName = "USERS" )]		public String UserName 
		{ 
		    get { return _userName; } 
			set 
			{
			    _userName = value;
			}
        }

		private String _userMail;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="USER_MAIL", BaseColumnName ="USER_MAIL", BaseTableName = "USERS" )]		public String UserMail 
		{ 
		    get { return _userMail; } 
			set 
			{
			    _userMail = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "USERS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }

		private DateTime _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "USERS" )]		public DateTime CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "USERS" )]		public Decimal CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "USERS" )]		public DateTime ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "USERS" )]		public Decimal ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _loginName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="LOGIN_NAME", BaseColumnName ="LOGIN_NAME", BaseTableName = "USERS" )]		public String LoginName 
		{ 
		    get { return _loginName; } 
			set 
			{
			    _loginName = value;
			}
        }


	}

	public partial class UserRepository : Repository<User> 
	{
		public UserRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public User Get(string projectionName, System.Decimal userId)
		{
			return ((IRepository<User>)this).Get(projectionName, userId, FetchMode.UseIdentityMap);
		}

		public User Get(string projectionName, System.Decimal userId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<User>)this).Get(projectionName, userId, fetchMode);
		}

		public User Get(Projection projection, System.Decimal userId)
		{
			return ((IRepository<User>)this).Get(projection, userId, FetchMode.UseIdentityMap);
		}

		public User Get(Projection projection, System.Decimal userId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<User>)this).Get(projection, userId, fetchMode);
		}

		public User Get(string projectionName, System.Decimal userId, params string[] fields)
		{
			return ((IRepository<User>)this).Get(projectionName, userId, fields);
		}

		public User Get(Projection projection, System.Decimal userId, params string[] fields)
		{
			return ((IRepository<User>)this).Get(projection, userId, fields);
		}

		public bool Delete(System.Decimal userId)
		{
			var entity = new User { UserId = userId };
			return this.Delete(entity);
		}

		
		public void SetUserContext(Decimal? userId, String defaultSchema)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateSetUserContextProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "USER_ID"].Value = userId == null ? (object) DBNull.Value : userId.Value;
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "DEFAULT_SCHEMA"].Value = defaultSchema == null ? (object) DBNull.Value : defaultSchema;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class UserFields
	{
		public const string UserId = "UserId";
		public const string UserName = "UserName";
		public const string UserMail = "UserMail";
		public const string IsActive = "IsActive";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string LoginName = "LoginName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="REFERENCE_DATA_ETAG")]
	public partial class ReferenceDataEtag
	{
		private String _etag;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ETAG", BaseColumnName ="ETAG", BaseTableName = "REFERENCE_DATA_ETAG" )]		public String Etag 
		{ 
		    get { return _etag; } 
			set 
			{
			    _etag = value;
			}
        }

		private String _etagType;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="ETAG_TYPE", BaseColumnName ="ETAG_TYPE", BaseTableName = "REFERENCE_DATA_ETAG" )]		public String EtagType 
		{ 
		    get { return _etagType; } 
			set 
			{
			    _etagType = value;
			}
        }


	}

	public partial class ReferenceDataEtagRepository : Repository<ReferenceDataEtag> 
	{
		public ReferenceDataEtagRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class ReferenceDataEtagFields
	{
		public const string Etag = "Etag";
		public const string EtagType = "EtagType";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDICINAL_PRODUCTS")]
	public partial class MedicinalProduct
	{
		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MEDICINAL_PRODUCT_ID", ColumnName ="MEDICINAL_PRODUCT_ID", BaseColumnName ="MEDICINAL_PRODUCT_ID", BaseTableName = "MEDICINAL_PRODUCTS" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _medicinalProductName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="MEDICINAL_PRODUCT_NAME", BaseColumnName ="MEDICINAL_PRODUCT_NAME", BaseTableName = "MEDICINAL_PRODUCTS" )]		public String MedicinalProductName 
		{ 
		    get { return _medicinalProductName; } 
			set 
			{
			    _medicinalProductName = value;
			}
        }

		private String _rossCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ROSS_CODE", BaseColumnName ="ROSS_CODE", BaseTableName = "MEDICINAL_PRODUCTS" )]		public String RossCode 
		{ 
		    get { return _rossCode; } 
			set 
			{
			    _rossCode = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MEDICINAL_PRODUCTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MEDICINAL_PRODUCTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MEDICINAL_PRODUCTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MEDICINAL_PRODUCTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _pharmaceuticalForm;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PHARMACEUTICAL_FORM", BaseColumnName ="PHARMACEUTICAL_FORM", BaseTableName = "MEDICINAL_PRODUCTS" )]		public String PharmaceuticalForm 
		{ 
		    get { return _pharmaceuticalForm; } 
			set 
			{
			    _pharmaceuticalForm = value;
			}
        }

		private Decimal? _developmentTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DEVELOPMENT_TYPE_ID", BaseColumnName ="DEVELOPMENT_TYPE_ID", BaseTableName = "MEDICINAL_PRODUCTS" )]		public Decimal? DevelopmentTypeId 
		{ 
		    get { return _developmentTypeId; } 
			set 
			{
			    _developmentTypeId = value;
			}
        }

		private Decimal? _mpStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MP_STATUS_ID", BaseColumnName ="MP_STATUS_ID", BaseTableName = "MEDICINAL_PRODUCTS" )]		public Decimal? MpStatusId 
		{ 
		    get { return _mpStatusId; } 
			set 
			{
			    _mpStatusId = value;
			}
        }

		private String _typeOfProcess;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="TYPE_OF_PROCESS", BaseColumnName ="TYPE_OF_PROCESS", BaseTableName = "MEDICINAL_PRODUCTS" )]		public String TypeOfProcess 
		{ 
		    get { return _typeOfProcess; } 
			set 
			{
			    _typeOfProcess = value;
			}
        }

		private Decimal? _statusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="STATUS_ID", BaseColumnName ="STATUS_ID", BaseTableName = "MEDICINAL_PRODUCTS" )]		public Decimal? StatusId 
		{ 
		    get { return _statusId; } 
			set 
			{
			    _statusId = value;
			}
        }

		private Decimal? _subStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SUB_STATUS_ID", BaseColumnName ="SUB_STATUS_ID", BaseTableName = "MEDICINAL_PRODUCTS" )]		public Decimal? SubStatusId 
		{ 
		    get { return _subStatusId; } 
			set 
			{
			    _subStatusId = value;
			}
        }

		private String _isVial;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_VIAL", BaseColumnName ="IS_VIAL", BaseTableName = "MEDICINAL_PRODUCTS" )]		public String IsVial 
		{ 
		    get { return _isVial; } 
			set 
			{
			    _isVial = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _mpStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MP_STATUS_NAME" )]		public String MpStatusName 
		{ 
		    get { return _mpStatusName; } 
			set 
			{
			    _mpStatusName = value;
			}
        }

		private String _developmentTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DEVELOPMENT_TYPE_NAME" )]		public String DevelopmentTypeName 
		{ 
		    get { return _developmentTypeName; } 
			set 
			{
			    _developmentTypeName = value;
			}
        }

		private String _pharmaceuticalDoseFormValue;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PHARMACEUTICAL_DOSE_FORM_VALUE" )]		public String PharmaceuticalDoseFormValue 
		{ 
		    get { return _pharmaceuticalDoseFormValue; } 
			set 
			{
			    _pharmaceuticalDoseFormValue = value;
			}
        }

		private String _statusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS_NAME" )]		public String StatusName 
		{ 
		    get { return _statusName; } 
			set 
			{
			    _statusName = value;
			}
        }

		private String _subStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SUB_STATUS_NAME" )]		public String SubStatusName 
		{ 
		    get { return _subStatusName; } 
			set 
			{
			    _subStatusName = value;
			}
        }

		private Decimal? _occurrences;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OCCURRENCES" )]		public Decimal? Occurrences 
		{ 
		    get { return _occurrences; } 
			set 
			{
			    _occurrences = value;
			}
        }


	}

	public partial class MedicinalProductRepository : Repository<MedicinalProduct> 
	{
		public MedicinalProductRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedicinalProduct Get(string projectionName, System.Decimal medicinalProductId)
		{
			return ((IRepository<MedicinalProduct>)this).Get(projectionName, medicinalProductId, FetchMode.UseIdentityMap);
		}

		public MedicinalProduct Get(string projectionName, System.Decimal medicinalProductId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedicinalProduct>)this).Get(projectionName, medicinalProductId, fetchMode);
		}

		public MedicinalProduct Get(Projection projection, System.Decimal medicinalProductId)
		{
			return ((IRepository<MedicinalProduct>)this).Get(projection, medicinalProductId, FetchMode.UseIdentityMap);
		}

		public MedicinalProduct Get(Projection projection, System.Decimal medicinalProductId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedicinalProduct>)this).Get(projection, medicinalProductId, fetchMode);
		}

		public MedicinalProduct Get(string projectionName, System.Decimal medicinalProductId, params string[] fields)
		{
			return ((IRepository<MedicinalProduct>)this).Get(projectionName, medicinalProductId, fields);
		}

		public MedicinalProduct Get(Projection projection, System.Decimal medicinalProductId, params string[] fields)
		{
			return ((IRepository<MedicinalProduct>)this).Get(projection, medicinalProductId, fields);
		}

		public bool Delete(System.Decimal medicinalProductId)
		{
			var entity = new MedicinalProduct { MedicinalProductId = medicinalProductId };
			return this.Delete(entity);
		}

		
		public void DeleteMedicinalProduct(Decimal? pId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteMedicinalProductProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "P_ID"].Value = pId == null ? (object) DBNull.Value : pId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class MedicinalProductFields
	{
		public const string MedicinalProductId = "MedicinalProductId";
		public const string MedicinalProductName = "MedicinalProductName";
		public const string RossCode = "RossCode";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string PharmaceuticalForm = "PharmaceuticalForm";
		public const string DevelopmentTypeId = "DevelopmentTypeId";
		public const string MpStatusId = "MpStatusId";
		public const string TypeOfProcess = "TypeOfProcess";
		public const string StatusId = "StatusId";
		public const string SubStatusId = "SubStatusId";
		public const string IsVial = "IsVial";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string MpStatusName = "MpStatusName";
		public const string DevelopmentTypeName = "DevelopmentTypeName";
		public const string PharmaceuticalDoseFormValue = "PharmaceuticalDoseFormValue";
		public const string StatusName = "StatusName";
		public const string SubStatusName = "SubStatusName";
		public const string Occurrences = "Occurrences";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIERS")]
	public partial class Dossier
	{
		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_ID", ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "DOSSIERS" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private String _rossCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ROSS_CODE", BaseColumnName ="ROSS_CODE", BaseTableName = "DOSSIERS" )]		public String RossCode 
		{ 
		    get { return _rossCode; } 
			set 
			{
			    _rossCode = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _dossierStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_STATUS_ID", BaseColumnName ="DOSSIER_STATUS_ID", BaseTableName = "DOSSIERS" )]		public Decimal? DossierStatusId 
		{ 
		    get { return _dossierStatusId; } 
			set 
			{
			    _dossierStatusId = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME", BaseColumnName ="PRODUCT_NAME", BaseTableName = "DOSSIERS" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _initialDossierFormat;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="INITIAL_DOSSIER_FORMAT", BaseColumnName ="INITIAL_DOSSIER_FORMAT", BaseTableName = "DOSSIERS" )]		public String InitialDossierFormat 
		{ 
		    get { return _initialDossierFormat; } 
			set 
			{
			    _initialDossierFormat = value;
			}
        }

		private String _isDossierCopy;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_COPY", BaseColumnName ="IS_DOSSIER_COPY", BaseTableName = "DOSSIERS" )]		public String IsDossierCopy 
		{ 
		    get { return _isDossierCopy; } 
			set 
			{
			    _isDossierCopy = value;
			}
        }

		private String _isDossierCopyType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_COPY_TYPE", BaseColumnName ="IS_DOSSIER_COPY_TYPE", BaseTableName = "DOSSIERS" )]		public String IsDossierCopyType 
		{ 
		    get { return _isDossierCopyType; } 
			set 
			{
			    _isDossierCopyType = value;
			}
        }

		private String _futureClient;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FUTURE_CLIENT", BaseColumnName ="FUTURE_CLIENT", BaseTableName = "DOSSIERS" )]		public String FutureClient 
		{ 
		    get { return _futureClient; } 
			set 
			{
			    _futureClient = value;
			}
        }

		private String _isDuplicatedFastTrack;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DUPLICATED_FAST_TRACK", BaseColumnName ="IS_DUPLICATED_FAST_TRACK", BaseTableName = "DOSSIERS" )]		public String IsDuplicatedFastTrack 
		{ 
		    get { return _isDuplicatedFastTrack; } 
			set 
			{
			    _isDuplicatedFastTrack = value;
			}
        }

		private DateTime? _fastTrackDeadLine;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FAST_TRACK_DEAD_LINE", BaseColumnName ="FAST_TRACK_DEAD_LINE", BaseTableName = "DOSSIERS" )]		public DateTime? FastTrackDeadLine 
		{ 
		    get { return _fastTrackDeadLine; } 
			set 
			{
			    _fastTrackDeadLine = value;
			}
        }

		private Decimal _mktAuthProdedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MKT_AUTH_PRODEDURE_ID", BaseColumnName ="MKT_AUTH_PRODEDURE_ID", BaseTableName = "DOSSIERS" )]		public Decimal MktAuthProdedureId 
		{ 
		    get { return _mktAuthProdedureId; } 
			set 
			{
			    _mktAuthProdedureId = value;
			}
        }

		private String _isDossierExtApplication;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_EXT_APPLICATION", BaseColumnName ="IS_DOSSIER_EXT_APPLICATION", BaseTableName = "DOSSIERS" )]		public String IsDossierExtApplication 
		{ 
		    get { return _isDossierExtApplication; } 
			set 
			{
			    _isDossierExtApplication = value;
			}
        }

		private Decimal? _legalBasisId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LEGAL_BASIS_ID", BaseColumnName ="LEGAL_BASIS_ID", BaseTableName = "DOSSIERS" )]		public Decimal? LegalBasisId 
		{ 
		    get { return _legalBasisId; } 
			set 
			{
			    _legalBasisId = value;
			}
        }

		private String _medicinalProductBe;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MEDICINAL_PRODUCT_BE", BaseColumnName ="MEDICINAL_PRODUCT_BE", BaseTableName = "DOSSIERS" )]		public String MedicinalProductBe 
		{ 
		    get { return _medicinalProductBe; } 
			set 
			{
			    _medicinalProductBe = value;
			}
        }

		private String _isBeReport;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_BE_REPORT", BaseColumnName ="IS_BE_REPORT", BaseTableName = "DOSSIERS" )]		public String IsBeReport 
		{ 
		    get { return _isBeReport; } 
			set 
			{
			    _isBeReport = value;
			}
        }

		private Decimal? _beReportType;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="BE_REPORT_TYPE", BaseColumnName ="BE_REPORT_TYPE", BaseTableName = "DOSSIERS" )]		public Decimal? BeReportType 
		{ 
		    get { return _beReportType; } 
			set 
			{
			    _beReportType = value;
			}
        }

		private String _medicalDeviceDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="MEDICAL_DEVICE_DESCRIPTION", BaseColumnName ="MEDICAL_DEVICE_DESCRIPTION", BaseTableName = "DOSSIERS" )]		public String MedicalDeviceDescription 
		{ 
		    get { return _medicalDeviceDescription; } 
			set 
			{
			    _medicalDeviceDescription = value;
			}
        }

		private Decimal _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="GROUP_ID", BaseColumnName ="GROUP_ID", BaseTableName = "DOSSIERS" )]		public Decimal GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private Decimal? _responsibleId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RESPONSIBLE_ID", BaseColumnName ="RESPONSIBLE_ID", BaseTableName = "DOSSIERS" )]		public Decimal? ResponsibleId 
		{ 
		    get { return _responsibleId; } 
			set 
			{
			    _responsibleId = value;
			}
        }

		private String _pharmaceuticalFormId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PHARMACEUTICAL_FORM_ID", BaseColumnName ="PHARMACEUTICAL_FORM_ID", BaseTableName = "DOSSIERS" )]		public String PharmaceuticalFormId 
		{ 
		    get { return _pharmaceuticalFormId; } 
			set 
			{
			    _pharmaceuticalFormId = value;
			}
        }

		private String _adminPharmaceuticalFormId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ADMIN_PHARMACEUTICAL_FORM_ID", BaseColumnName ="ADMIN_PHARMACEUTICAL_FORM_ID", BaseTableName = "DOSSIERS" )]		public String AdminPharmaceuticalFormId 
		{ 
		    get { return _adminPharmaceuticalFormId; } 
			set 
			{
			    _adminPharmaceuticalFormId = value;
			}
        }

		private String _referenceMedicinalProduct;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="REFERENCE_MEDICINAL_PRODUCT", BaseColumnName ="REFERENCE_MEDICINAL_PRODUCT", BaseTableName = "DOSSIERS" )]		public String ReferenceMedicinalProduct 
		{ 
		    get { return _referenceMedicinalProduct; } 
			set 
			{
			    _referenceMedicinalProduct = value;
			}
        }

		private Decimal? _dossierSubStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_SUB_STATUS_ID", BaseColumnName ="DOSSIER_SUB_STATUS_ID", BaseTableName = "DOSSIERS" )]		public Decimal? DossierSubStatusId 
		{ 
		    get { return _dossierSubStatusId; } 
			set 
			{
			    _dossierSubStatusId = value;
			}
        }

		private Decimal? _dossierRelationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_RELATION_ID", BaseColumnName ="DOSSIER_RELATION_ID", BaseTableName = "DOSSIERS" )]		public Decimal? DossierRelationId 
		{ 
		    get { return _dossierRelationId; } 
			set 
			{
			    _dossierRelationId = value;
			}
        }

		private String _lastCcCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LAST_CC_CODE", BaseColumnName ="LAST_CC_CODE", BaseTableName = "DOSSIERS" )]		public String LastCcCode 
		{ 
		    get { return _lastCcCode; } 
			set 
			{
			    _lastCcCode = value;
			}
        }

		private String _otc;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="OTC", BaseColumnName ="OTC", BaseTableName = "DOSSIERS" )]		public String Otc 
		{ 
		    get { return _otc; } 
			set 
			{
			    _otc = value;
			}
        }

		private String _isRelated;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_RELATED", BaseColumnName ="IS_RELATED", BaseTableName = "DOSSIERS" )]		public String IsRelated 
		{ 
		    get { return _isRelated; } 
			set 
			{
			    _isRelated = value;
			}
        }

		private String _pharmaceuticalForm;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PHARMACEUTICAL_FORM" )]		public String PharmaceuticalForm 
		{ 
		    get { return _pharmaceuticalForm; } 
			set 
			{
			    _pharmaceuticalForm = value;
			}
        }

		private String _adminPharmaceuticalForm;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="ADMIN_PHARMACEUTICAL_FORM" )]		public String AdminPharmaceuticalForm 
		{ 
		    get { return _adminPharmaceuticalForm; } 
			set 
			{
			    _adminPharmaceuticalForm = value;
			}
        }

		private String _authorisationProcedureValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="AUTHORISATION_PROCEDURE_VALUE" )]		public String AuthorisationProcedureValue 
		{ 
		    get { return _authorisationProcedureValue; } 
			set 
			{
			    _authorisationProcedureValue = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _statusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS_NAME" )]		public String StatusName 
		{ 
		    get { return _statusName; } 
			set 
			{
			    _statusName = value;
			}
        }

		private String _legaBasisValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="LEGA_BASIS_VALUE" )]		public String LegaBasisValue 
		{ 
		    get { return _legaBasisValue; } 
			set 
			{
			    _legaBasisValue = value;
			}
        }

		private String _groupName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUP_NAME" )]		public String GroupName 
		{ 
		    get { return _groupName; } 
			set 
			{
			    _groupName = value;
			}
        }

		private String _responsibleName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="RESPONSIBLE_NAME" )]		public String ResponsibleName 
		{ 
		    get { return _responsibleName; } 
			set 
			{
			    _responsibleName = value;
			}
        }

		private String _reportTypeDescription;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="REPORT_TYPE_DESCRIPTION" )]		public String ReportTypeDescription 
		{ 
		    get { return _reportTypeDescription; } 
			set 
			{
			    _reportTypeDescription = value;
			}
        }

		private Decimal? _rmsCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RMS_COUNTRY_ID" )]		public Decimal? RmsCountryId 
		{ 
		    get { return _rmsCountryId; } 
			set 
			{
			    _rmsCountryId = value;
			}
        }

		private String _dossierSubStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DOSSIER_SUB_STATUS_NAME" )]		public String DossierSubStatusName 
		{ 
		    get { return _dossierSubStatusName; } 
			set 
			{
			    _dossierSubStatusName = value;
			}
        }

		private String _relationProductName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="RELATION_PRODUCT_NAME" )]		public String RelationProductName 
		{ 
		    get { return _relationProductName; } 
			set 
			{
			    _relationProductName = value;
			}
        }

		private DateTime? _dispatchExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DISPATCH_EXPECTED_DATE" )]		public DateTime? DispatchExpectedDate 
		{ 
		    get { return _dispatchExpectedDate; } 
			set 
			{
			    _dispatchExpectedDate = value;
			}
        }

		private DateTime? _submissionExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_EXPECTED_DATE" )]		public DateTime? SubmissionExpectedDate 
		{ 
		    get { return _submissionExpectedDate; } 
			set 
			{
			    _submissionExpectedDate = value;
			}
        }

		private DateTime? _submissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DATE" )]		public DateTime? SubmissionDate 
		{ 
		    get { return _submissionDate; } 
			set 
			{
			    _submissionDate = value;
			}
        }

		private String _isNaDispatchExpectedDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DISPATCH_EXPECTED_DATE" )]		public String IsNaDispatchExpectedDate 
		{ 
		    get { return _isNaDispatchExpectedDate; } 
			set 
			{
			    _isNaDispatchExpectedDate = value;
			}
        }

		private String _isNaSubmissionExpectedDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUBMISSION_EXPECTED_DATE" )]		public String IsNaSubmissionExpectedDate 
		{ 
		    get { return _isNaSubmissionExpectedDate; } 
			set 
			{
			    _isNaSubmissionExpectedDate = value;
			}
        }

		private String _isNaSubmissionDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUBMISSION_DATE" )]		public String IsNaSubmissionDate 
		{ 
		    get { return _isNaSubmissionDate; } 
			set 
			{
			    _isNaSubmissionDate = value;
			}
        }

		private String _fullProductName;
		[DataMember]
		[SqlField(DbType.String, 1161, ProviderType=119, ColumnName ="FULL_PRODUCT_NAME" )]		public String FullProductName 
		{ 
		    get { return _fullProductName; } 
			set 
			{
			    _fullProductName = value;
			}
        }

		private Decimal? _occurrences;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OCCURRENCES" )]		public Decimal? Occurrences 
		{ 
		    get { return _occurrences; } 
			set 
			{
			    _occurrences = value;
			}
        }

		private String _dossierCopyId;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="DOSSIER_COPY_ID" )]		public String DossierCopyId 
		{ 
		    get { return _dossierCopyId; } 
			set 
			{
			    _dossierCopyId = value;
			}
        }

		private String _dossierCopyName;
		[DataMember]
		[SqlField(DbType.String, 10, ColumnName ="DOSSIER_COPY_NAME" )]		public String DossierCopyName 
		{ 
		    get { return _dossierCopyName; } 
			set 
			{
			    _dossierCopyName = value;
			}
        }


	}

	public partial class DossierRepository : Repository<Dossier> 
	{
		public DossierRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Dossier Get(string projectionName, System.Decimal dossierId)
		{
			return ((IRepository<Dossier>)this).Get(projectionName, dossierId, FetchMode.UseIdentityMap);
		}

		public Dossier Get(string projectionName, System.Decimal dossierId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Dossier>)this).Get(projectionName, dossierId, fetchMode);
		}

		public Dossier Get(Projection projection, System.Decimal dossierId)
		{
			return ((IRepository<Dossier>)this).Get(projection, dossierId, FetchMode.UseIdentityMap);
		}

		public Dossier Get(Projection projection, System.Decimal dossierId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Dossier>)this).Get(projection, dossierId, fetchMode);
		}

		public Dossier Get(string projectionName, System.Decimal dossierId, params string[] fields)
		{
			return ((IRepository<Dossier>)this).Get(projectionName, dossierId, fields);
		}

		public Dossier Get(Projection projection, System.Decimal dossierId, params string[] fields)
		{
			return ((IRepository<Dossier>)this).Get(projection, dossierId, fields);
		}

		public bool Delete(System.Decimal dossierId)
		{
			var entity = new Dossier { DossierId = dossierId };
			return this.Delete(entity);
		}

		
		public void DeleteDossier(Decimal? pDossierId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteDossierProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "P_DOSSIER_ID"].Value = pDossierId == null ? (object) DBNull.Value : pDossierId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class DossierFields
	{
		public const string DossierId = "DossierId";
		public const string RossCode = "RossCode";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string DossierStatusId = "DossierStatusId";
		public const string ProductName = "ProductName";
		public const string InitialDossierFormat = "InitialDossierFormat";
		public const string IsDossierCopy = "IsDossierCopy";
		public const string IsDossierCopyType = "IsDossierCopyType";
		public const string FutureClient = "FutureClient";
		public const string IsDuplicatedFastTrack = "IsDuplicatedFastTrack";
		public const string FastTrackDeadLine = "FastTrackDeadLine";
		public const string MktAuthProdedureId = "MktAuthProdedureId";
		public const string IsDossierExtApplication = "IsDossierExtApplication";
		public const string LegalBasisId = "LegalBasisId";
		public const string MedicinalProductBe = "MedicinalProductBe";
		public const string IsBeReport = "IsBeReport";
		public const string BeReportType = "BeReportType";
		public const string MedicalDeviceDescription = "MedicalDeviceDescription";
		public const string GroupId = "GroupId";
		public const string ResponsibleId = "ResponsibleId";
		public const string PharmaceuticalFormId = "PharmaceuticalFormId";
		public const string AdminPharmaceuticalFormId = "AdminPharmaceuticalFormId";
		public const string ReferenceMedicinalProduct = "ReferenceMedicinalProduct";
		public const string DossierSubStatusId = "DossierSubStatusId";
		public const string DossierRelationId = "DossierRelationId";
		public const string LastCcCode = "LastCcCode";
		public const string Otc = "Otc";
		public const string IsRelated = "IsRelated";
		public const string PharmaceuticalForm = "PharmaceuticalForm";
		public const string AdminPharmaceuticalForm = "AdminPharmaceuticalForm";
		public const string AuthorisationProcedureValue = "AuthorisationProcedureValue";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string StatusName = "StatusName";
		public const string LegaBasisValue = "LegaBasisValue";
		public const string GroupName = "GroupName";
		public const string ResponsibleName = "ResponsibleName";
		public const string ReportTypeDescription = "ReportTypeDescription";
		public const string RmsCountryId = "RmsCountryId";
		public const string DossierSubStatusName = "DossierSubStatusName";
		public const string RelationProductName = "RelationProductName";
		public const string DispatchExpectedDate = "DispatchExpectedDate";
		public const string SubmissionExpectedDate = "SubmissionExpectedDate";
		public const string SubmissionDate = "SubmissionDate";
		public const string IsNaDispatchExpectedDate = "IsNaDispatchExpectedDate";
		public const string IsNaSubmissionExpectedDate = "IsNaSubmissionExpectedDate";
		public const string IsNaSubmissionDate = "IsNaSubmissionDate";
		public const string FullProductName = "FullProductName";
		public const string Occurrences = "Occurrences";
		public const string DossierCopyId = "DossierCopyId";
		public const string DossierCopyName = "DossierCopyName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_STABILITIES")]
	public partial class MpStability
	{
		private Decimal _stabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "STABILITY_ID", ColumnName ="STABILITY_ID", BaseColumnName ="STABILITY_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal StabilityId 
		{ 
		    get { return _stabilityId; } 
			set 
			{
			    _stabilityId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID", BaseColumnName ="MEDICINAL_PRODUCT_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _batchSize;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="BATCH_SIZE", BaseColumnName ="BATCH_SIZE", BaseTableName = "MP_STABILITIES" )]		public String BatchSize 
		{ 
		    get { return _batchSize; } 
			set 
			{
			    _batchSize = value;
			}
        }

		private Decimal? _studyReasonId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="STUDY_REASON_ID", BaseColumnName ="STUDY_REASON_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? StudyReasonId 
		{ 
		    get { return _studyReasonId; } 
			set 
			{
			    _studyReasonId = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "MP_STABILITIES" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private String _isStudyPerformed;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_STUDY_PERFORMED", BaseColumnName ="IS_STUDY_PERFORMED", BaseTableName = "MP_STABILITIES" )]		public String IsStudyPerformed 
		{ 
		    get { return _isStudyPerformed; } 
			set 
			{
			    _isStudyPerformed = value;
			}
        }

		private Decimal? _studyPurposeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="STUDY_PURPOSE_ID", BaseColumnName ="STUDY_PURPOSE_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? StudyPurposeId 
		{ 
		    get { return _studyPurposeId; } 
			set 
			{
			    _studyPurposeId = value;
			}
        }

		private String _comments2;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS2", BaseColumnName ="COMMENTS2", BaseTableName = "MP_STABILITIES" )]		public String Comments2 
		{ 
		    get { return _comments2; } 
			set 
			{
			    _comments2 = value;
			}
        }

		private Decimal? _c25Id;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C25_ID", BaseColumnName ="C25_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C25Id 
		{ 
		    get { return _c25Id; } 
			set 
			{
			    _c25Id = value;
			}
        }

		private DateTime? _c25StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C25_START_DATE", BaseColumnName ="C25_START_DATE", BaseTableName = "MP_STABILITIES" )]		public DateTime? C25StartDate 
		{ 
		    get { return _c25StartDate; } 
			set 
			{
			    _c25StartDate = value;
			}
        }

		private String _c25CurrentTime;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C25_CURRENT_TIME", BaseColumnName ="C25_CURRENT_TIME", BaseTableName = "MP_STABILITIES" )]		public String C25CurrentTime 
		{ 
		    get { return _c25CurrentTime; } 
			set 
			{
			    _c25CurrentTime = value;
			}
        }

		private Decimal? _c25LastCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C25_LAST_COMPLIANT", BaseColumnName ="C25_LAST_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C25LastCompliant 
		{ 
		    get { return _c25LastCompliant; } 
			set 
			{
			    _c25LastCompliant = value;
			}
        }

		private Decimal? _c25NonCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C25_NON_COMPLIANT", BaseColumnName ="C25_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C25NonCompliant 
		{ 
		    get { return _c25NonCompliant; } 
			set 
			{
			    _c25NonCompliant = value;
			}
        }

		private String _c25Comments;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="C25_COMMENTS", BaseColumnName ="C25_COMMENTS", BaseTableName = "MP_STABILITIES" )]		public String C25Comments 
		{ 
		    get { return _c25Comments; } 
			set 
			{
			    _c25Comments = value;
			}
        }

		private Decimal? _c20Id;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C20_ID", BaseColumnName ="C20_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C20Id 
		{ 
		    get { return _c20Id; } 
			set 
			{
			    _c20Id = value;
			}
        }

		private Decimal? _c30Id;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C30_ID", BaseColumnName ="C30_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C30Id 
		{ 
		    get { return _c30Id; } 
			set 
			{
			    _c30Id = value;
			}
        }

		private DateTime? _c30StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C30_START_DATE", BaseColumnName ="C30_START_DATE", BaseTableName = "MP_STABILITIES" )]		public DateTime? C30StartDate 
		{ 
		    get { return _c30StartDate; } 
			set 
			{
			    _c30StartDate = value;
			}
        }

		private String _c30CurrentTime;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C30_CURRENT_TIME", BaseColumnName ="C30_CURRENT_TIME", BaseTableName = "MP_STABILITIES" )]		public String C30CurrentTime 
		{ 
		    get { return _c30CurrentTime; } 
			set 
			{
			    _c30CurrentTime = value;
			}
        }

		private Decimal? _c30LastCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C30_LAST_COMPLIANT", BaseColumnName ="C30_LAST_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C30LastCompliant 
		{ 
		    get { return _c30LastCompliant; } 
			set 
			{
			    _c30LastCompliant = value;
			}
        }

		private Decimal? _c30NonCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C30_NON_COMPLIANT", BaseColumnName ="C30_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C30NonCompliant 
		{ 
		    get { return _c30NonCompliant; } 
			set 
			{
			    _c30NonCompliant = value;
			}
        }

		private String _c30Comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="C30_COMMENTS", BaseColumnName ="C30_COMMENTS", BaseTableName = "MP_STABILITIES" )]		public String C30Comments 
		{ 
		    get { return _c30Comments; } 
			set 
			{
			    _c30Comments = value;
			}
        }

		private Decimal? _c3075Id;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C3075_ID", BaseColumnName ="C3075_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C3075Id 
		{ 
		    get { return _c3075Id; } 
			set 
			{
			    _c3075Id = value;
			}
        }

		private DateTime? _c3075StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C3075_START_DATE", BaseColumnName ="C3075_START_DATE", BaseTableName = "MP_STABILITIES" )]		public DateTime? C3075StartDate 
		{ 
		    get { return _c3075StartDate; } 
			set 
			{
			    _c3075StartDate = value;
			}
        }

		private String _c3075CurrentTime;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C3075_CURRENT_TIME", BaseColumnName ="C3075_CURRENT_TIME", BaseTableName = "MP_STABILITIES" )]		public String C3075CurrentTime 
		{ 
		    get { return _c3075CurrentTime; } 
			set 
			{
			    _c3075CurrentTime = value;
			}
        }

		private Decimal? _c3075LastCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C3075_LAST_COMPLIANT", BaseColumnName ="C3075_LAST_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C3075LastCompliant 
		{ 
		    get { return _c3075LastCompliant; } 
			set 
			{
			    _c3075LastCompliant = value;
			}
        }

		private Decimal? _c3075NonCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C3075_NON_COMPLIANT", BaseColumnName ="C3075_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C3075NonCompliant 
		{ 
		    get { return _c3075NonCompliant; } 
			set 
			{
			    _c3075NonCompliant = value;
			}
        }

		private String _c3075Comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="C3075_COMMENTS", BaseColumnName ="C3075_COMMENTS", BaseTableName = "MP_STABILITIES" )]		public String C3075Comments 
		{ 
		    get { return _c3075Comments; } 
			set 
			{
			    _c3075Comments = value;
			}
        }

		private Decimal? _c40Id;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C40_ID", BaseColumnName ="C40_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C40Id 
		{ 
		    get { return _c40Id; } 
			set 
			{
			    _c40Id = value;
			}
        }

		private DateTime? _c40StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C40_START_DATE", BaseColumnName ="C40_START_DATE", BaseTableName = "MP_STABILITIES" )]		public DateTime? C40StartDate 
		{ 
		    get { return _c40StartDate; } 
			set 
			{
			    _c40StartDate = value;
			}
        }

		private String _c40CurrentTime;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C40_CURRENT_TIME", BaseColumnName ="C40_CURRENT_TIME", BaseTableName = "MP_STABILITIES" )]		public String C40CurrentTime 
		{ 
		    get { return _c40CurrentTime; } 
			set 
			{
			    _c40CurrentTime = value;
			}
        }

		private Decimal? _c40LastCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C40_LAST_COMPLIANT", BaseColumnName ="C40_LAST_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C40LastCompliant 
		{ 
		    get { return _c40LastCompliant; } 
			set 
			{
			    _c40LastCompliant = value;
			}
        }

		private Decimal? _c40NonCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C40_NON_COMPLIANT", BaseColumnName ="C40_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C40NonCompliant 
		{ 
		    get { return _c40NonCompliant; } 
			set 
			{
			    _c40NonCompliant = value;
			}
        }

		private String _c40Comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="C40_COMMENTS", BaseColumnName ="C40_COMMENTS", BaseTableName = "MP_STABILITIES" )]		public String C40Comments 
		{ 
		    get { return _c40Comments; } 
			set 
			{
			    _c40Comments = value;
			}
        }

		private DateTime? _c20StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C20_START_DATE", BaseColumnName ="C20_START_DATE", BaseTableName = "MP_STABILITIES" )]		public DateTime? C20StartDate 
		{ 
		    get { return _c20StartDate; } 
			set 
			{
			    _c20StartDate = value;
			}
        }

		private String _c20CurrentTime;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C20_CURRENT_TIME", BaseColumnName ="C20_CURRENT_TIME", BaseTableName = "MP_STABILITIES" )]		public String C20CurrentTime 
		{ 
		    get { return _c20CurrentTime; } 
			set 
			{
			    _c20CurrentTime = value;
			}
        }

		private Decimal? _c20LastCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C20_LAST_COMPLIANT", BaseColumnName ="C20_LAST_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C20LastCompliant 
		{ 
		    get { return _c20LastCompliant; } 
			set 
			{
			    _c20LastCompliant = value;
			}
        }

		private Decimal? _c20NonCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C20_NON_COMPLIANT", BaseColumnName ="C20_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C20NonCompliant 
		{ 
		    get { return _c20NonCompliant; } 
			set 
			{
			    _c20NonCompliant = value;
			}
        }

		private String _c20Comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="C20_COMMENTS", BaseColumnName ="C20_COMMENTS", BaseTableName = "MP_STABILITIES" )]		public String C20Comments 
		{ 
		    get { return _c20Comments; } 
			set 
			{
			    _c20Comments = value;
			}
        }

		private Decimal? _photostabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PHOTOSTABILITY_ID", BaseColumnName ="PHOTOSTABILITY_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? PhotostabilityId 
		{ 
		    get { return _photostabilityId; } 
			set 
			{
			    _photostabilityId = value;
			}
        }

		private String _photostabilityComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="PHOTOSTABILITY_COMMENTS", BaseColumnName ="PHOTOSTABILITY_COMMENTS", BaseTableName = "MP_STABILITIES" )]		public String PhotostabilityComments 
		{ 
		    get { return _photostabilityComments; } 
			set 
			{
			    _photostabilityComments = value;
			}
        }

		private String _bracketing;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="BRACKETING", BaseColumnName ="BRACKETING", BaseTableName = "MP_STABILITIES" )]		public String Bracketing 
		{ 
		    get { return _bracketing; } 
			set 
			{
			    _bracketing = value;
			}
        }

		private Decimal? _apiManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="API_MANUFACTURER_ID", BaseColumnName ="API_MANUFACTURER_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? ApiManufacturerId 
		{ 
		    get { return _apiManufacturerId; } 
			set 
			{
			    _apiManufacturerId = value;
			}
        }

		private String _isInverted;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_INVERTED", BaseColumnName ="IS_INVERTED", BaseTableName = "MP_STABILITIES" )]		public String IsInverted 
		{ 
		    get { return _isInverted; } 
			set 
			{
			    _isInverted = value;
			}
        }

		private String _matrixing;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="MATRIXING", BaseColumnName ="MATRIXING", BaseTableName = "MP_STABILITIES" )]		public String Matrixing 
		{ 
		    get { return _matrixing; } 
			set 
			{
			    _matrixing = value;
			}
        }

		private String _packagingMaterial;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PACKAGING_MATERIAL", BaseColumnName ="PACKAGING_MATERIAL", BaseTableName = "MP_STABILITIES" )]		public String PackagingMaterial 
		{ 
		    get { return _packagingMaterial; } 
			set 
			{
			    _packagingMaterial = value;
			}
        }

		private String _isAnalysed;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ANALYSED", BaseColumnName ="IS_ANALYSED", BaseTableName = "MP_STABILITIES" )]		public String IsAnalysed 
		{ 
		    get { return _isAnalysed; } 
			set 
			{
			    _isAnalysed = value;
			}
        }

		private Decimal? _c2Id;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C2_ID", BaseColumnName ="C2_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C2Id 
		{ 
		    get { return _c2Id; } 
			set 
			{
			    _c2Id = value;
			}
        }

		private DateTime? _c2StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C2_START_DATE", BaseColumnName ="C2_START_DATE", BaseTableName = "MP_STABILITIES" )]		public DateTime? C2StartDate 
		{ 
		    get { return _c2StartDate; } 
			set 
			{
			    _c2StartDate = value;
			}
        }

		private String _c2CurrentTime;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C2_CURRENT_TIME", BaseColumnName ="C2_CURRENT_TIME", BaseTableName = "MP_STABILITIES" )]		public String C2CurrentTime 
		{ 
		    get { return _c2CurrentTime; } 
			set 
			{
			    _c2CurrentTime = value;
			}
        }

		private Decimal? _c2LastCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C2_LAST_COMPLIANT", BaseColumnName ="C2_LAST_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C2LastCompliant 
		{ 
		    get { return _c2LastCompliant; } 
			set 
			{
			    _c2LastCompliant = value;
			}
        }

		private Decimal? _c2NonCompliant;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C2_NON_COMPLIANT", BaseColumnName ="C2_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public Decimal? C2NonCompliant 
		{ 
		    get { return _c2NonCompliant; } 
			set 
			{
			    _c2NonCompliant = value;
			}
        }

		private String _c2Comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="C2_COMMENTS", BaseColumnName ="C2_COMMENTS", BaseTableName = "MP_STABILITIES" )]		public String C2Comments 
		{ 
		    get { return _c2Comments; } 
			set 
			{
			    _c2Comments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_STABILITIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_STABILITIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_STABILITIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_STABILITIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _studyPurposeComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="STUDY_PURPOSE_COMMENTS", BaseColumnName ="STUDY_PURPOSE_COMMENTS", BaseTableName = "MP_STABILITIES" )]		public String StudyPurposeComments 
		{ 
		    get { return _studyPurposeComments; } 
			set 
			{
			    _studyPurposeComments = value;
			}
        }

		private String _batchNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="BATCH_NUMBER", BaseColumnName ="BATCH_NUMBER", BaseTableName = "MP_STABILITIES" )]		public String BatchNumber 
		{ 
		    get { return _batchNumber; } 
			set 
			{
			    _batchNumber = value;
			}
        }

		private String _isAc25;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AC25", BaseColumnName ="IS_AC25", BaseTableName = "MP_STABILITIES" )]		public String IsAc25 
		{ 
		    get { return _isAc25; } 
			set 
			{
			    _isAc25 = value;
			}
        }

		private String _isAc30;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AC30", BaseColumnName ="IS_AC30", BaseTableName = "MP_STABILITIES" )]		public String IsAc30 
		{ 
		    get { return _isAc30; } 
			set 
			{
			    _isAc30 = value;
			}
        }

		private String _isAc3075;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AC3075", BaseColumnName ="IS_AC3075", BaseTableName = "MP_STABILITIES" )]		public String IsAc3075 
		{ 
		    get { return _isAc3075; } 
			set 
			{
			    _isAc3075 = value;
			}
        }

		private String _isAc40;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AC40", BaseColumnName ="IS_AC40", BaseTableName = "MP_STABILITIES" )]		public String IsAc40 
		{ 
		    get { return _isAc40; } 
			set 
			{
			    _isAc40 = value;
			}
        }

		private String _isAc2;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AC2", BaseColumnName ="IS_AC2", BaseTableName = "MP_STABILITIES" )]		public String IsAc2 
		{ 
		    get { return _isAc2; } 
			set 
			{
			    _isAc2 = value;
			}
        }

		private String _isAc20;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AC20", BaseColumnName ="IS_AC20", BaseTableName = "MP_STABILITIES" )]		public String IsAc20 
		{ 
		    get { return _isAc20; } 
			set 
			{
			    _isAc20 = value;
			}
        }

		private String _isAcphotostability;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACPHOTOSTABILITY", BaseColumnName ="IS_ACPHOTOSTABILITY", BaseTableName = "MP_STABILITIES" )]		public String IsAcphotostability 
		{ 
		    get { return _isAcphotostability; } 
			set 
			{
			    _isAcphotostability = value;
			}
        }

		private Decimal? _apiPackagingMaterialId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="API_PACKAGING_MATERIAL_ID", BaseColumnName ="API_PACKAGING_MATERIAL_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? ApiPackagingMaterialId 
		{ 
		    get { return _apiPackagingMaterialId; } 
			set 
			{
			    _apiPackagingMaterialId = value;
			}
        }

		private String _c20LcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C20_LC_MEASUREMENT", BaseColumnName ="C20_LC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C20LcMeasurement 
		{ 
		    get { return _c20LcMeasurement; } 
			set 
			{
			    _c20LcMeasurement = value;
			}
        }

		private String _c25LcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C25_LC_MEASUREMENT", BaseColumnName ="C25_LC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C25LcMeasurement 
		{ 
		    get { return _c25LcMeasurement; } 
			set 
			{
			    _c25LcMeasurement = value;
			}
        }

		private String _c25NcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C25_NC_MEASUREMENT", BaseColumnName ="C25_NC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C25NcMeasurement 
		{ 
		    get { return _c25NcMeasurement; } 
			set 
			{
			    _c25NcMeasurement = value;
			}
        }

		private String _c30LcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C30_LC_MEASUREMENT", BaseColumnName ="C30_LC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C30LcMeasurement 
		{ 
		    get { return _c30LcMeasurement; } 
			set 
			{
			    _c30LcMeasurement = value;
			}
        }

		private String _c30NcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C30_NC_MEASUREMENT", BaseColumnName ="C30_NC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C30NcMeasurement 
		{ 
		    get { return _c30NcMeasurement; } 
			set 
			{
			    _c30NcMeasurement = value;
			}
        }

		private String _c3075LcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C3075_LC_MEASUREMENT", BaseColumnName ="C3075_LC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C3075LcMeasurement 
		{ 
		    get { return _c3075LcMeasurement; } 
			set 
			{
			    _c3075LcMeasurement = value;
			}
        }

		private String _c3075NcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C3075_NC_MEASUREMENT", BaseColumnName ="C3075_NC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C3075NcMeasurement 
		{ 
		    get { return _c3075NcMeasurement; } 
			set 
			{
			    _c3075NcMeasurement = value;
			}
        }

		private String _c40LcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C40_LC_MEASUREMENT", BaseColumnName ="C40_LC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C40LcMeasurement 
		{ 
		    get { return _c40LcMeasurement; } 
			set 
			{
			    _c40LcMeasurement = value;
			}
        }

		private String _c40NcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C40_NC_MEASUREMENT", BaseColumnName ="C40_NC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C40NcMeasurement 
		{ 
		    get { return _c40NcMeasurement; } 
			set 
			{
			    _c40NcMeasurement = value;
			}
        }

		private String _c20NcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C20_NC_MEASUREMENT", BaseColumnName ="C20_NC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C20NcMeasurement 
		{ 
		    get { return _c20NcMeasurement; } 
			set 
			{
			    _c20NcMeasurement = value;
			}
        }

		private String _c2LcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C2_LC_MEASUREMENT", BaseColumnName ="C2_LC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C2LcMeasurement 
		{ 
		    get { return _c2LcMeasurement; } 
			set 
			{
			    _c2LcMeasurement = value;
			}
        }

		private String _c2NcMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C2_NC_MEASUREMENT", BaseColumnName ="C2_NC_MEASUREMENT", BaseTableName = "MP_STABILITIES" )]		public String C2NcMeasurement 
		{ 
		    get { return _c2NcMeasurement; } 
			set 
			{
			    _c2NcMeasurement = value;
			}
        }

		private String _presentation;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PRESENTATION", BaseColumnName ="PRESENTATION", BaseTableName = "MP_STABILITIES" )]		public String Presentation 
		{ 
		    get { return _presentation; } 
			set 
			{
			    _presentation = value;
			}
        }

		private String _c25HasCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C25_HAS_COMPLIANT", BaseColumnName ="C25_HAS_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C25HasCompliant 
		{ 
		    get { return _c25HasCompliant; } 
			set 
			{
			    _c25HasCompliant = value;
			}
        }

		private String _c25HasNonCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C25_HAS_NON_COMPLIANT", BaseColumnName ="C25_HAS_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C25HasNonCompliant 
		{ 
		    get { return _c25HasNonCompliant; } 
			set 
			{
			    _c25HasNonCompliant = value;
			}
        }

		private String _c30HasCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C30_HAS_COMPLIANT", BaseColumnName ="C30_HAS_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C30HasCompliant 
		{ 
		    get { return _c30HasCompliant; } 
			set 
			{
			    _c30HasCompliant = value;
			}
        }

		private String _c30HasNonCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C30_HAS_NON_COMPLIANT", BaseColumnName ="C30_HAS_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C30HasNonCompliant 
		{ 
		    get { return _c30HasNonCompliant; } 
			set 
			{
			    _c30HasNonCompliant = value;
			}
        }

		private String _c3075HasCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C3075_HAS_COMPLIANT", BaseColumnName ="C3075_HAS_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C3075HasCompliant 
		{ 
		    get { return _c3075HasCompliant; } 
			set 
			{
			    _c3075HasCompliant = value;
			}
        }

		private String _c3075HasNonCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C3075_HAS_NON_COMPLIANT", BaseColumnName ="C3075_HAS_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C3075HasNonCompliant 
		{ 
		    get { return _c3075HasNonCompliant; } 
			set 
			{
			    _c3075HasNonCompliant = value;
			}
        }

		private String _c40HasCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C40_HAS_COMPLIANT", BaseColumnName ="C40_HAS_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C40HasCompliant 
		{ 
		    get { return _c40HasCompliant; } 
			set 
			{
			    _c40HasCompliant = value;
			}
        }

		private String _c40HasNonCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C40_HAS_NON_COMPLIANT", BaseColumnName ="C40_HAS_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C40HasNonCompliant 
		{ 
		    get { return _c40HasNonCompliant; } 
			set 
			{
			    _c40HasNonCompliant = value;
			}
        }

		private String _c20HasCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C20_HAS_COMPLIANT", BaseColumnName ="C20_HAS_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C20HasCompliant 
		{ 
		    get { return _c20HasCompliant; } 
			set 
			{
			    _c20HasCompliant = value;
			}
        }

		private String _c20HasNonCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C20_HAS_NON_COMPLIANT", BaseColumnName ="C20_HAS_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C20HasNonCompliant 
		{ 
		    get { return _c20HasNonCompliant; } 
			set 
			{
			    _c20HasNonCompliant = value;
			}
        }

		private String _c2HasCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C2_HAS_COMPLIANT", BaseColumnName ="C2_HAS_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C2HasCompliant 
		{ 
		    get { return _c2HasCompliant; } 
			set 
			{
			    _c2HasCompliant = value;
			}
        }

		private String _c2HasNonCompliant;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C2_HAS_NON_COMPLIANT", BaseColumnName ="C2_HAS_NON_COMPLIANT", BaseTableName = "MP_STABILITIES" )]		public String C2HasNonCompliant 
		{ 
		    get { return _c2HasNonCompliant; } 
			set 
			{
			    _c2HasNonCompliant = value;
			}
        }

		private String _c25HasCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C25_HAS_COMPLIANT_NI", BaseColumnName ="C25_HAS_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C25HasCompliantNi 
		{ 
		    get { return _c25HasCompliantNi; } 
			set 
			{
			    _c25HasCompliantNi = value;
			}
        }

		private String _c25HasNonCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C25_HAS_NON_COMPLIANT_NI", BaseColumnName ="C25_HAS_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C25HasNonCompliantNi 
		{ 
		    get { return _c25HasNonCompliantNi; } 
			set 
			{
			    _c25HasNonCompliantNi = value;
			}
        }

		private Decimal? _c25LastCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C25_LAST_COMPLIANT_NI", BaseColumnName ="C25_LAST_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C25LastCompliantNi 
		{ 
		    get { return _c25LastCompliantNi; } 
			set 
			{
			    _c25LastCompliantNi = value;
			}
        }

		private Decimal? _c25NonCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C25_NON_COMPLIANT_NI", BaseColumnName ="C25_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C25NonCompliantNi 
		{ 
		    get { return _c25NonCompliantNi; } 
			set 
			{
			    _c25NonCompliantNi = value;
			}
        }

		private String _c25LcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C25_LC_MEASUREMENT_NI", BaseColumnName ="C25_LC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C25LcMeasurementNi 
		{ 
		    get { return _c25LcMeasurementNi; } 
			set 
			{
			    _c25LcMeasurementNi = value;
			}
        }

		private String _c25NcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C25_NC_MEASUREMENT_NI", BaseColumnName ="C25_NC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C25NcMeasurementNi 
		{ 
		    get { return _c25NcMeasurementNi; } 
			set 
			{
			    _c25NcMeasurementNi = value;
			}
        }

		private String _c30HasCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C30_HAS_COMPLIANT_NI", BaseColumnName ="C30_HAS_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C30HasCompliantNi 
		{ 
		    get { return _c30HasCompliantNi; } 
			set 
			{
			    _c30HasCompliantNi = value;
			}
        }

		private String _c30HasNonCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C30_HAS_NON_COMPLIANT_NI", BaseColumnName ="C30_HAS_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C30HasNonCompliantNi 
		{ 
		    get { return _c30HasNonCompliantNi; } 
			set 
			{
			    _c30HasNonCompliantNi = value;
			}
        }

		private Decimal? _c30LastCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C30_LAST_COMPLIANT_NI", BaseColumnName ="C30_LAST_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C30LastCompliantNi 
		{ 
		    get { return _c30LastCompliantNi; } 
			set 
			{
			    _c30LastCompliantNi = value;
			}
        }

		private Decimal? _c30NonCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C30_NON_COMPLIANT_NI", BaseColumnName ="C30_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C30NonCompliantNi 
		{ 
		    get { return _c30NonCompliantNi; } 
			set 
			{
			    _c30NonCompliantNi = value;
			}
        }

		private String _c30LcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C30_LC_MEASUREMENT_NI", BaseColumnName ="C30_LC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C30LcMeasurementNi 
		{ 
		    get { return _c30LcMeasurementNi; } 
			set 
			{
			    _c30LcMeasurementNi = value;
			}
        }

		private String _c3075HasCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C3075_HAS_COMPLIANT_NI", BaseColumnName ="C3075_HAS_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C3075HasCompliantNi 
		{ 
		    get { return _c3075HasCompliantNi; } 
			set 
			{
			    _c3075HasCompliantNi = value;
			}
        }

		private String _c30NcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C30_NC_MEASUREMENT_NI", BaseColumnName ="C30_NC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C30NcMeasurementNi 
		{ 
		    get { return _c30NcMeasurementNi; } 
			set 
			{
			    _c30NcMeasurementNi = value;
			}
        }

		private String _c3075HasNonCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C3075_HAS_NON_COMPLIANT_NI", BaseColumnName ="C3075_HAS_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C3075HasNonCompliantNi 
		{ 
		    get { return _c3075HasNonCompliantNi; } 
			set 
			{
			    _c3075HasNonCompliantNi = value;
			}
        }

		private Decimal? _c3075LastCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C3075_LAST_COMPLIANT_NI", BaseColumnName ="C3075_LAST_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C3075LastCompliantNi 
		{ 
		    get { return _c3075LastCompliantNi; } 
			set 
			{
			    _c3075LastCompliantNi = value;
			}
        }

		private Decimal? _c3075NonCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C3075_NON_COMPLIANT_NI", BaseColumnName ="C3075_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C3075NonCompliantNi 
		{ 
		    get { return _c3075NonCompliantNi; } 
			set 
			{
			    _c3075NonCompliantNi = value;
			}
        }

		private String _c3075LcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C3075_LC_MEASUREMENT_NI", BaseColumnName ="C3075_LC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C3075LcMeasurementNi 
		{ 
		    get { return _c3075LcMeasurementNi; } 
			set 
			{
			    _c3075LcMeasurementNi = value;
			}
        }

		private String _c3075NcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C3075_NC_MEASUREMENT_NI", BaseColumnName ="C3075_NC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C3075NcMeasurementNi 
		{ 
		    get { return _c3075NcMeasurementNi; } 
			set 
			{
			    _c3075NcMeasurementNi = value;
			}
        }

		private String _c40HasCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C40_HAS_COMPLIANT_NI", BaseColumnName ="C40_HAS_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C40HasCompliantNi 
		{ 
		    get { return _c40HasCompliantNi; } 
			set 
			{
			    _c40HasCompliantNi = value;
			}
        }

		private String _c40HasNonCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C40_HAS_NON_COMPLIANT_NI", BaseColumnName ="C40_HAS_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C40HasNonCompliantNi 
		{ 
		    get { return _c40HasNonCompliantNi; } 
			set 
			{
			    _c40HasNonCompliantNi = value;
			}
        }

		private Decimal? _c40LastCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C40_LAST_COMPLIANT_NI", BaseColumnName ="C40_LAST_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C40LastCompliantNi 
		{ 
		    get { return _c40LastCompliantNi; } 
			set 
			{
			    _c40LastCompliantNi = value;
			}
        }

		private Decimal? _c40NonCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C40_NON_COMPLIANT_NI", BaseColumnName ="C40_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C40NonCompliantNi 
		{ 
		    get { return _c40NonCompliantNi; } 
			set 
			{
			    _c40NonCompliantNi = value;
			}
        }

		private String _c40LcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C40_LC_MEASUREMENT_NI", BaseColumnName ="C40_LC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C40LcMeasurementNi 
		{ 
		    get { return _c40LcMeasurementNi; } 
			set 
			{
			    _c40LcMeasurementNi = value;
			}
        }

		private String _c40NcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C40_NC_MEASUREMENT_NI", BaseColumnName ="C40_NC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C40NcMeasurementNi 
		{ 
		    get { return _c40NcMeasurementNi; } 
			set 
			{
			    _c40NcMeasurementNi = value;
			}
        }

		private String _c2HasCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C2_HAS_COMPLIANT_NI", BaseColumnName ="C2_HAS_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C2HasCompliantNi 
		{ 
		    get { return _c2HasCompliantNi; } 
			set 
			{
			    _c2HasCompliantNi = value;
			}
        }

		private String _c2HasNonCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C2_HAS_NON_COMPLIANT_NI", BaseColumnName ="C2_HAS_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C2HasNonCompliantNi 
		{ 
		    get { return _c2HasNonCompliantNi; } 
			set 
			{
			    _c2HasNonCompliantNi = value;
			}
        }

		private Decimal? _c2LastCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C2_LAST_COMPLIANT_NI", BaseColumnName ="C2_LAST_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C2LastCompliantNi 
		{ 
		    get { return _c2LastCompliantNi; } 
			set 
			{
			    _c2LastCompliantNi = value;
			}
        }

		private Decimal? _c2NonCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C2_NON_COMPLIANT_NI", BaseColumnName ="C2_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C2NonCompliantNi 
		{ 
		    get { return _c2NonCompliantNi; } 
			set 
			{
			    _c2NonCompliantNi = value;
			}
        }

		private String _c2LcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C2_LC_MEASUREMENT_NI", BaseColumnName ="C2_LC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C2LcMeasurementNi 
		{ 
		    get { return _c2LcMeasurementNi; } 
			set 
			{
			    _c2LcMeasurementNi = value;
			}
        }

		private String _c2NcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C2_NC_MEASUREMENT_NI", BaseColumnName ="C2_NC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C2NcMeasurementNi 
		{ 
		    get { return _c2NcMeasurementNi; } 
			set 
			{
			    _c2NcMeasurementNi = value;
			}
        }

		private String _c20HasCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C20_HAS_COMPLIANT_NI", BaseColumnName ="C20_HAS_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C20HasCompliantNi 
		{ 
		    get { return _c20HasCompliantNi; } 
			set 
			{
			    _c20HasCompliantNi = value;
			}
        }

		private String _c20HasNonCompliantNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C20_HAS_NON_COMPLIANT_NI", BaseColumnName ="C20_HAS_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public String C20HasNonCompliantNi 
		{ 
		    get { return _c20HasNonCompliantNi; } 
			set 
			{
			    _c20HasNonCompliantNi = value;
			}
        }

		private Decimal? _c20LastCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C20_LAST_COMPLIANT_NI", BaseColumnName ="C20_LAST_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C20LastCompliantNi 
		{ 
		    get { return _c20LastCompliantNi; } 
			set 
			{
			    _c20LastCompliantNi = value;
			}
        }

		private Decimal? _c20NonCompliantNi;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C20_NON_COMPLIANT_NI", BaseColumnName ="C20_NON_COMPLIANT_NI", BaseTableName = "MP_STABILITIES" )]		public Decimal? C20NonCompliantNi 
		{ 
		    get { return _c20NonCompliantNi; } 
			set 
			{
			    _c20NonCompliantNi = value;
			}
        }

		private String _c20LcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C20_LC_MEASUREMENT_NI", BaseColumnName ="C20_LC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C20LcMeasurementNi 
		{ 
		    get { return _c20LcMeasurementNi; } 
			set 
			{
			    _c20LcMeasurementNi = value;
			}
        }

		private String _c20NcMeasurementNi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C20_NC_MEASUREMENT_NI", BaseColumnName ="C20_NC_MEASUREMENT_NI", BaseTableName = "MP_STABILITIES" )]		public String C20NcMeasurementNi 
		{ 
		    get { return _c20NcMeasurementNi; } 
			set 
			{
			    _c20NcMeasurementNi = value;
			}
        }

		private Decimal? _c25MonthId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C25_MONTH_ID", BaseColumnName ="C25_MONTH_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C25MonthId 
		{ 
		    get { return _c25MonthId; } 
			set 
			{
			    _c25MonthId = value;
			}
        }

		private Decimal? _c30MonthId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C30_MONTH_ID", BaseColumnName ="C30_MONTH_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C30MonthId 
		{ 
		    get { return _c30MonthId; } 
			set 
			{
			    _c30MonthId = value;
			}
        }

		private Decimal? _c3075MonthId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C3075_MONTH_ID", BaseColumnName ="C3075_MONTH_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C3075MonthId 
		{ 
		    get { return _c3075MonthId; } 
			set 
			{
			    _c3075MonthId = value;
			}
        }

		private Decimal? _c40MonthId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C40_MONTH_ID", BaseColumnName ="C40_MONTH_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C40MonthId 
		{ 
		    get { return _c40MonthId; } 
			set 
			{
			    _c40MonthId = value;
			}
        }

		private Decimal? _c2MonthId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C2_MONTH_ID", BaseColumnName ="C2_MONTH_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C2MonthId 
		{ 
		    get { return _c2MonthId; } 
			set 
			{
			    _c2MonthId = value;
			}
        }

		private Decimal? _c20MonthId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="C20_MONTH_ID", BaseColumnName ="C20_MONTH_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? C20MonthId 
		{ 
		    get { return _c20MonthId; } 
			set 
			{
			    _c20MonthId = value;
			}
        }

		private String _isNaPresentation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_PRESENTATION", BaseColumnName ="IS_NA_PRESENTATION", BaseTableName = "MP_STABILITIES" )]		public String IsNaPresentation 
		{ 
		    get { return _isNaPresentation; } 
			set 
			{
			    _isNaPresentation = value;
			}
        }

		private String _c25IsNaStartDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C25_IS_NA_START_DATE", BaseColumnName ="C25_IS_NA_START_DATE", BaseTableName = "MP_STABILITIES" )]		public String C25IsNaStartDate 
		{ 
		    get { return _c25IsNaStartDate; } 
			set 
			{
			    _c25IsNaStartDate = value;
			}
        }

		private String _c30IsNaStartDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C30_IS_NA_START_DATE", BaseColumnName ="C30_IS_NA_START_DATE", BaseTableName = "MP_STABILITIES" )]		public String C30IsNaStartDate 
		{ 
		    get { return _c30IsNaStartDate; } 
			set 
			{
			    _c30IsNaStartDate = value;
			}
        }

		private String _c3075IsNaStartDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C3075_IS_NA_START_DATE", BaseColumnName ="C3075_IS_NA_START_DATE", BaseTableName = "MP_STABILITIES" )]		public String C3075IsNaStartDate 
		{ 
		    get { return _c3075IsNaStartDate; } 
			set 
			{
			    _c3075IsNaStartDate = value;
			}
        }

		private String _c40IsNaStartDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C40_IS_NA_START_DATE", BaseColumnName ="C40_IS_NA_START_DATE", BaseTableName = "MP_STABILITIES" )]		public String C40IsNaStartDate 
		{ 
		    get { return _c40IsNaStartDate; } 
			set 
			{
			    _c40IsNaStartDate = value;
			}
        }

		private String _c2IsNaStartDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C2_IS_NA_START_DATE", BaseColumnName ="C2_IS_NA_START_DATE", BaseTableName = "MP_STABILITIES" )]		public String C2IsNaStartDate 
		{ 
		    get { return _c2IsNaStartDate; } 
			set 
			{
			    _c2IsNaStartDate = value;
			}
        }

		private String _c20IsNaStartDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="C20_IS_NA_START_DATE", BaseColumnName ="C20_IS_NA_START_DATE", BaseTableName = "MP_STABILITIES" )]		public String C20IsNaStartDate 
		{ 
		    get { return _c20IsNaStartDate; } 
			set 
			{
			    _c20IsNaStartDate = value;
			}
        }

		private String _atReleaseShelfLife;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="AT_RELEASE_SHELF_LIFE", BaseColumnName ="AT_RELEASE_SHELF_LIFE", BaseTableName = "MP_STABILITIES" )]		public String AtReleaseShelfLife 
		{ 
		    get { return _atReleaseShelfLife; } 
			set 
			{
			    _atReleaseShelfLife = value;
			}
        }

		private Decimal? _containerVolumeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CONTAINER_VOLUME_ID", BaseColumnName ="CONTAINER_VOLUME_ID", BaseTableName = "MP_STABILITIES" )]		public Decimal? ContainerVolumeId 
		{ 
		    get { return _containerVolumeId; } 
			set 
			{
			    _containerVolumeId = value;
			}
        }

		private String _studyReasonName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_REASON_NAME" )]		public String StudyReasonName 
		{ 
		    get { return _studyReasonName; } 
			set 
			{
			    _studyReasonName = value;
			}
        }

		private String _studyPurposeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_PURPOSE_NAME" )]		public String StudyPurposeName 
		{ 
		    get { return _studyPurposeName; } 
			set 
			{
			    _studyPurposeName = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _c20Name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C20_NAME" )]		public String C20Name 
		{ 
		    get { return _c20Name; } 
			set 
			{
			    _c20Name = value;
			}
        }

		private String _c25Name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C25_NAME" )]		public String C25Name 
		{ 
		    get { return _c25Name; } 
			set 
			{
			    _c25Name = value;
			}
        }

		private String _c30Name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C30_NAME" )]		public String C30Name 
		{ 
		    get { return _c30Name; } 
			set 
			{
			    _c30Name = value;
			}
        }

		private String _c3075Name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C3075_NAME" )]		public String C3075Name 
		{ 
		    get { return _c3075Name; } 
			set 
			{
			    _c3075Name = value;
			}
        }

		private String _c40Name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C40_NAME" )]		public String C40Name 
		{ 
		    get { return _c40Name; } 
			set 
			{
			    _c40Name = value;
			}
        }

		private String _c2Name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C2_NAME" )]		public String C2Name 
		{ 
		    get { return _c2Name; } 
			set 
			{
			    _c2Name = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _packagingMaterialName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PACKAGING_MATERIAL_NAME" )]		public String PackagingMaterialName 
		{ 
		    get { return _packagingMaterialName; } 
			set 
			{
			    _packagingMaterialName = value;
			}
        }

		private DateTime? _startDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="START_DATE" )]		public DateTime? StartDate 
		{ 
		    get { return _startDate; } 
			set 
			{
			    _startDate = value;
			}
        }

		private String _containerVolumeName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CONTAINER_VOLUME_NAME" )]		public String ContainerVolumeName 
		{ 
		    get { return _containerVolumeName; } 
			set 
			{
			    _containerVolumeName = value;
			}
        }

		private Single? _containerVolumeValue;
		[DataMember]
		[SqlField(DbType.Single, 22, Precision = 7, Scale=2, AllowNull = true, ColumnName ="CONTAINER_VOLUME_VALUE" )]		public Single? ContainerVolumeValue 
		{ 
		    get { return _containerVolumeValue; } 
			set 
			{
			    _containerVolumeValue = value;
			}
        }


	}

	public partial class MpStabilityRepository : Repository<MpStability> 
	{
		public MpStabilityRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpStability Get(string projectionName, System.Decimal stabilityId)
		{
			return ((IRepository<MpStability>)this).Get(projectionName, stabilityId, FetchMode.UseIdentityMap);
		}

		public MpStability Get(string projectionName, System.Decimal stabilityId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStability>)this).Get(projectionName, stabilityId, fetchMode);
		}

		public MpStability Get(Projection projection, System.Decimal stabilityId)
		{
			return ((IRepository<MpStability>)this).Get(projection, stabilityId, FetchMode.UseIdentityMap);
		}

		public MpStability Get(Projection projection, System.Decimal stabilityId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStability>)this).Get(projection, stabilityId, fetchMode);
		}

		public MpStability Get(string projectionName, System.Decimal stabilityId, params string[] fields)
		{
			return ((IRepository<MpStability>)this).Get(projectionName, stabilityId, fields);
		}

		public MpStability Get(Projection projection, System.Decimal stabilityId, params string[] fields)
		{
			return ((IRepository<MpStability>)this).Get(projection, stabilityId, fields);
		}

		public bool Delete(System.Decimal stabilityId)
		{
			var entity = new MpStability { StabilityId = stabilityId };
			return this.Delete(entity);
		}

		
		public void DeleteMpStability(Decimal? pId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteMpStabilityProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "P_ID"].Value = pId == null ? (object) DBNull.Value : pId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class MpStabilityFields
	{
		public const string StabilityId = "StabilityId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string BatchSize = "BatchSize";
		public const string StudyReasonId = "StudyReasonId";
		public const string Comments = "Comments";
		public const string IsStudyPerformed = "IsStudyPerformed";
		public const string StudyPurposeId = "StudyPurposeId";
		public const string Comments2 = "Comments2";
		public const string C25Id = "C25Id";
		public const string C25StartDate = "C25StartDate";
		public const string C25CurrentTime = "C25CurrentTime";
		public const string C25LastCompliant = "C25LastCompliant";
		public const string C25NonCompliant = "C25NonCompliant";
		public const string C25Comments = "C25Comments";
		public const string C20Id = "C20Id";
		public const string C30Id = "C30Id";
		public const string C30StartDate = "C30StartDate";
		public const string C30CurrentTime = "C30CurrentTime";
		public const string C30LastCompliant = "C30LastCompliant";
		public const string C30NonCompliant = "C30NonCompliant";
		public const string C30Comments = "C30Comments";
		public const string C3075Id = "C3075Id";
		public const string C3075StartDate = "C3075StartDate";
		public const string C3075CurrentTime = "C3075CurrentTime";
		public const string C3075LastCompliant = "C3075LastCompliant";
		public const string C3075NonCompliant = "C3075NonCompliant";
		public const string C3075Comments = "C3075Comments";
		public const string C40Id = "C40Id";
		public const string C40StartDate = "C40StartDate";
		public const string C40CurrentTime = "C40CurrentTime";
		public const string C40LastCompliant = "C40LastCompliant";
		public const string C40NonCompliant = "C40NonCompliant";
		public const string C40Comments = "C40Comments";
		public const string C20StartDate = "C20StartDate";
		public const string C20CurrentTime = "C20CurrentTime";
		public const string C20LastCompliant = "C20LastCompliant";
		public const string C20NonCompliant = "C20NonCompliant";
		public const string C20Comments = "C20Comments";
		public const string PhotostabilityId = "PhotostabilityId";
		public const string PhotostabilityComments = "PhotostabilityComments";
		public const string Bracketing = "Bracketing";
		public const string ApiManufacturerId = "ApiManufacturerId";
		public const string IsInverted = "IsInverted";
		public const string Matrixing = "Matrixing";
		public const string PackagingMaterial = "PackagingMaterial";
		public const string IsAnalysed = "IsAnalysed";
		public const string C2Id = "C2Id";
		public const string C2StartDate = "C2StartDate";
		public const string C2CurrentTime = "C2CurrentTime";
		public const string C2LastCompliant = "C2LastCompliant";
		public const string C2NonCompliant = "C2NonCompliant";
		public const string C2Comments = "C2Comments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string StudyPurposeComments = "StudyPurposeComments";
		public const string BatchNumber = "BatchNumber";
		public const string IsAc25 = "IsAc25";
		public const string IsAc30 = "IsAc30";
		public const string IsAc3075 = "IsAc3075";
		public const string IsAc40 = "IsAc40";
		public const string IsAc2 = "IsAc2";
		public const string IsAc20 = "IsAc20";
		public const string IsAcphotostability = "IsAcphotostability";
		public const string ApiPackagingMaterialId = "ApiPackagingMaterialId";
		public const string C20LcMeasurement = "C20LcMeasurement";
		public const string C25LcMeasurement = "C25LcMeasurement";
		public const string C25NcMeasurement = "C25NcMeasurement";
		public const string C30LcMeasurement = "C30LcMeasurement";
		public const string C30NcMeasurement = "C30NcMeasurement";
		public const string C3075LcMeasurement = "C3075LcMeasurement";
		public const string C3075NcMeasurement = "C3075NcMeasurement";
		public const string C40LcMeasurement = "C40LcMeasurement";
		public const string C40NcMeasurement = "C40NcMeasurement";
		public const string C20NcMeasurement = "C20NcMeasurement";
		public const string C2LcMeasurement = "C2LcMeasurement";
		public const string C2NcMeasurement = "C2NcMeasurement";
		public const string Presentation = "Presentation";
		public const string C25HasCompliant = "C25HasCompliant";
		public const string C25HasNonCompliant = "C25HasNonCompliant";
		public const string C30HasCompliant = "C30HasCompliant";
		public const string C30HasNonCompliant = "C30HasNonCompliant";
		public const string C3075HasCompliant = "C3075HasCompliant";
		public const string C3075HasNonCompliant = "C3075HasNonCompliant";
		public const string C40HasCompliant = "C40HasCompliant";
		public const string C40HasNonCompliant = "C40HasNonCompliant";
		public const string C20HasCompliant = "C20HasCompliant";
		public const string C20HasNonCompliant = "C20HasNonCompliant";
		public const string C2HasCompliant = "C2HasCompliant";
		public const string C2HasNonCompliant = "C2HasNonCompliant";
		public const string C25HasCompliantNi = "C25HasCompliantNi";
		public const string C25HasNonCompliantNi = "C25HasNonCompliantNi";
		public const string C25LastCompliantNi = "C25LastCompliantNi";
		public const string C25NonCompliantNi = "C25NonCompliantNi";
		public const string C25LcMeasurementNi = "C25LcMeasurementNi";
		public const string C25NcMeasurementNi = "C25NcMeasurementNi";
		public const string C30HasCompliantNi = "C30HasCompliantNi";
		public const string C30HasNonCompliantNi = "C30HasNonCompliantNi";
		public const string C30LastCompliantNi = "C30LastCompliantNi";
		public const string C30NonCompliantNi = "C30NonCompliantNi";
		public const string C30LcMeasurementNi = "C30LcMeasurementNi";
		public const string C3075HasCompliantNi = "C3075HasCompliantNi";
		public const string C30NcMeasurementNi = "C30NcMeasurementNi";
		public const string C3075HasNonCompliantNi = "C3075HasNonCompliantNi";
		public const string C3075LastCompliantNi = "C3075LastCompliantNi";
		public const string C3075NonCompliantNi = "C3075NonCompliantNi";
		public const string C3075LcMeasurementNi = "C3075LcMeasurementNi";
		public const string C3075NcMeasurementNi = "C3075NcMeasurementNi";
		public const string C40HasCompliantNi = "C40HasCompliantNi";
		public const string C40HasNonCompliantNi = "C40HasNonCompliantNi";
		public const string C40LastCompliantNi = "C40LastCompliantNi";
		public const string C40NonCompliantNi = "C40NonCompliantNi";
		public const string C40LcMeasurementNi = "C40LcMeasurementNi";
		public const string C40NcMeasurementNi = "C40NcMeasurementNi";
		public const string C2HasCompliantNi = "C2HasCompliantNi";
		public const string C2HasNonCompliantNi = "C2HasNonCompliantNi";
		public const string C2LastCompliantNi = "C2LastCompliantNi";
		public const string C2NonCompliantNi = "C2NonCompliantNi";
		public const string C2LcMeasurementNi = "C2LcMeasurementNi";
		public const string C2NcMeasurementNi = "C2NcMeasurementNi";
		public const string C20HasCompliantNi = "C20HasCompliantNi";
		public const string C20HasNonCompliantNi = "C20HasNonCompliantNi";
		public const string C20LastCompliantNi = "C20LastCompliantNi";
		public const string C20NonCompliantNi = "C20NonCompliantNi";
		public const string C20LcMeasurementNi = "C20LcMeasurementNi";
		public const string C20NcMeasurementNi = "C20NcMeasurementNi";
		public const string C25MonthId = "C25MonthId";
		public const string C30MonthId = "C30MonthId";
		public const string C3075MonthId = "C3075MonthId";
		public const string C40MonthId = "C40MonthId";
		public const string C2MonthId = "C2MonthId";
		public const string C20MonthId = "C20MonthId";
		public const string IsNaPresentation = "IsNaPresentation";
		public const string C25IsNaStartDate = "C25IsNaStartDate";
		public const string C30IsNaStartDate = "C30IsNaStartDate";
		public const string C3075IsNaStartDate = "C3075IsNaStartDate";
		public const string C40IsNaStartDate = "C40IsNaStartDate";
		public const string C2IsNaStartDate = "C2IsNaStartDate";
		public const string C20IsNaStartDate = "C20IsNaStartDate";
		public const string AtReleaseShelfLife = "AtReleaseShelfLife";
		public const string ContainerVolumeId = "ContainerVolumeId";
		public const string StudyReasonName = "StudyReasonName";
		public const string StudyPurposeName = "StudyPurposeName";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string C20Name = "C20Name";
		public const string C25Name = "C25Name";
		public const string C30Name = "C30Name";
		public const string C3075Name = "C3075Name";
		public const string C40Name = "C40Name";
		public const string C2Name = "C2Name";
		public const string ManufacturerName = "ManufacturerName";
		public const string PackagingMaterialName = "PackagingMaterialName";
		public const string StartDate = "StartDate";
		public const string ContainerVolumeName = "ContainerVolumeName";
		public const string ContainerVolumeValue = "ContainerVolumeValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="AGREEMENTS")]
	public partial class Agreement
	{
		private Decimal _agreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "AGREEMENT_ID", ColumnName ="AGREEMENT_ID", BaseColumnName ="AGREEMENT_ID", BaseTableName = "AGREEMENTS" )]		public Decimal AgreementId 
		{ 
		    get { return _agreementId; } 
			set 
			{
			    _agreementId = value;
			}
        }

		private Decimal _agreementTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="AGREEMENT_TYPE_ID", BaseColumnName ="AGREEMENT_TYPE_ID", BaseTableName = "AGREEMENTS" )]		public Decimal AgreementTypeId 
		{ 
		    get { return _agreementTypeId; } 
			set 
			{
			    _agreementTypeId = value;
			}
        }

		private String _companyId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="COMPANY_ID", BaseColumnName ="COMPANY_ID", BaseTableName = "AGREEMENTS" )]		public String CompanyId 
		{ 
		    get { return _companyId; } 
			set 
			{
			    _companyId = value;
			}
        }

		private DateTime? _signatureDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SIGNATURE_DATE", BaseColumnName ="SIGNATURE_DATE", BaseTableName = "AGREEMENTS" )]		public DateTime? SignatureDate 
		{ 
		    get { return _signatureDate; } 
			set 
			{
			    _signatureDate = value;
			}
        }

		private String _effectiveAsOf;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="EFFECTIVE_AS_OF", BaseColumnName ="EFFECTIVE_AS_OF", BaseTableName = "AGREEMENTS" )]		public String EffectiveAsOf 
		{ 
		    get { return _effectiveAsOf; } 
			set 
			{
			    _effectiveAsOf = value;
			}
        }

		private DateTime? _effectiveDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EFFECTIVE_DATE", BaseColumnName ="EFFECTIVE_DATE", BaseTableName = "AGREEMENTS" )]		public DateTime? EffectiveDate 
		{ 
		    get { return _effectiveDate; } 
			set 
			{
			    _effectiveDate = value;
			}
        }

		private DateTime? _periodicRevisionDeadline;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="PERIODIC_REVISION_DEADLINE", BaseColumnName ="PERIODIC_REVISION_DEADLINE", BaseTableName = "AGREEMENTS" )]		public DateTime? PeriodicRevisionDeadline 
		{ 
		    get { return _periodicRevisionDeadline; } 
			set 
			{
			    _periodicRevisionDeadline = value;
			}
        }

		private String _periodicRevisionStatus;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PERIODIC_REVISION_STATUS", BaseColumnName ="PERIODIC_REVISION_STATUS", BaseTableName = "AGREEMENTS" )]		public String PeriodicRevisionStatus 
		{ 
		    get { return _periodicRevisionStatus; } 
			set 
			{
			    _periodicRevisionStatus = value;
			}
        }

		private String _nullified;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="NULLIFIED", BaseColumnName ="NULLIFIED", BaseTableName = "AGREEMENTS" )]		public String Nullified 
		{ 
		    get { return _nullified; } 
			set 
			{
			    _nullified = value;
			}
        }

		private DateTime? _nulllificationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="NULLLIFICATION_DATE", BaseColumnName ="NULLLIFICATION_DATE", BaseTableName = "AGREEMENTS" )]		public DateTime? NulllificationDate 
		{ 
		    get { return _nulllificationDate; } 
			set 
			{
			    _nulllificationDate = value;
			}
        }

		private Decimal? _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COUNTRY_ID", BaseColumnName ="COUNTRY_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private String _isAeAdrReportsExchange;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AE_ADR_REPORTS_EXCHANGE", BaseColumnName ="IS_AE_ADR_REPORTS_EXCHANGE", BaseTableName = "AGREEMENTS" )]		public String IsAeAdrReportsExchange 
		{ 
		    get { return _isAeAdrReportsExchange; } 
			set 
			{
			    _isAeAdrReportsExchange = value;
			}
        }

		private String _seriousReports;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="SERIOUS_REPORTS", BaseColumnName ="SERIOUS_REPORTS", BaseTableName = "AGREEMENTS" )]		public String SeriousReports 
		{ 
		    get { return _seriousReports; } 
			set 
			{
			    _seriousReports = value;
			}
        }

		private String _nonSeriousReports;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NON_SERIOUS_REPORTS", BaseColumnName ="NON_SERIOUS_REPORTS", BaseTableName = "AGREEMENTS" )]		public String NonSeriousReports 
		{ 
		    get { return _nonSeriousReports; } 
			set 
			{
			    _nonSeriousReports = value;
			}
        }

		private String _nonSeriousReportsTp;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NON_SERIOUS_REPORTS_TP", BaseColumnName ="NON_SERIOUS_REPORTS_TP", BaseTableName = "AGREEMENTS" )]		public String NonSeriousReportsTp 
		{ 
		    get { return _nonSeriousReportsTp; } 
			set 
			{
			    _nonSeriousReportsTp = value;
			}
        }

		private String _language;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="LANGUAGE", BaseColumnName ="LANGUAGE", BaseTableName = "AGREEMENTS" )]		public String Language 
		{ 
		    get { return _language; } 
			set 
			{
			    _language = value;
			}
        }

		private String _specialSituations;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="SPECIAL_SITUATIONS", BaseColumnName ="SPECIAL_SITUATIONS", BaseTableName = "AGREEMENTS" )]		public String SpecialSituations 
		{ 
		    get { return _specialSituations; } 
			set 
			{
			    _specialSituations = value;
			}
        }

		private String _adverseEventsTrials;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="ADVERSE_EVENTS_TRIALS", BaseColumnName ="ADVERSE_EVENTS_TRIALS", BaseTableName = "AGREEMENTS" )]		public String AdverseEventsTrials 
		{ 
		    get { return _adverseEventsTrials; } 
			set 
			{
			    _adverseEventsTrials = value;
			}
        }

		private String _saeCt;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="SAE_CT", BaseColumnName ="SAE_CT", BaseTableName = "AGREEMENTS" )]		public String SaeCt 
		{ 
		    get { return _saeCt; } 
			set 
			{
			    _saeCt = value;
			}
        }

		private String _aeCt;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="AE_CT", BaseColumnName ="AE_CT", BaseTableName = "AGREEMENTS" )]		public String AeCt 
		{ 
		    get { return _aeCt; } 
			set 
			{
			    _aeCt = value;
			}
        }

		private String _saeCtTp;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="SAE_CT_TP", BaseColumnName ="SAE_CT_TP", BaseTableName = "AGREEMENTS" )]		public String SaeCtTp 
		{ 
		    get { return _saeCtTp; } 
			set 
			{
			    _saeCtTp = value;
			}
        }

		private String _aeCtTp;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="AE_CT_TP", BaseColumnName ="AE_CT_TP", BaseTableName = "AGREEMENTS" )]		public String AeCtTp 
		{ 
		    get { return _aeCtTp; } 
			set 
			{
			    _aeCtTp = value;
			}
        }

		private Decimal? _signalDetectionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SIGNAL_DETECTION_ID", BaseColumnName ="SIGNAL_DETECTION_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? SignalDetectionId 
		{ 
		    get { return _signalDetectionId; } 
			set 
			{
			    _signalDetectionId = value;
			}
        }

		private String _ack;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ACK", BaseColumnName ="ACK", BaseTableName = "AGREEMENTS" )]		public String Ack 
		{ 
		    get { return _ack; } 
			set 
			{
			    _ack = value;
			}
        }

		private Decimal? _reportingCcaaTerritoryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="REPORTING_CCAA_TERRITORY_ID", BaseColumnName ="REPORTING_CCAA_TERRITORY_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? ReportingCcaaTerritoryId 
		{ 
		    get { return _reportingCcaaTerritoryId; } 
			set 
			{
			    _reportingCcaaTerritoryId = value;
			}
        }

		private Decimal? _reportingEuCcaaId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="REPORTING_EU_CCAA_ID", BaseColumnName ="REPORTING_EU_CCAA_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? ReportingEuCcaaId 
		{ 
		    get { return _reportingEuCcaaId; } 
			set 
			{
			    _reportingEuCcaaId = value;
			}
        }

		private Decimal? _psurPreparationRespId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PSUR_PREPARATION_RESP_ID", BaseColumnName ="PSUR_PREPARATION_RESP_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? PsurPreparationRespId 
		{ 
		    get { return _psurPreparationRespId; } 
			set 
			{
			    _psurPreparationRespId = value;
			}
        }

		private Decimal? _psurSubmissionRespId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PSUR_SUBMISSION_RESP_ID", BaseColumnName ="PSUR_SUBMISSION_RESP_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? PsurSubmissionRespId 
		{ 
		    get { return _psurSubmissionRespId; } 
			set 
			{
			    _psurSubmissionRespId = value;
			}
        }

		private Decimal? _rmpPreparationRespId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RMP_PREPARATION_RESP_ID", BaseColumnName ="RMP_PREPARATION_RESP_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? RmpPreparationRespId 
		{ 
		    get { return _rmpPreparationRespId; } 
			set 
			{
			    _rmpPreparationRespId = value;
			}
        }

		private Decimal? _rmpSubmissionRespId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RMP_SUBMISSION_RESP_ID", BaseColumnName ="RMP_SUBMISSION_RESP_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? RmpSubmissionRespId 
		{ 
		    get { return _rmpSubmissionRespId; } 
			set 
			{
			    _rmpSubmissionRespId = value;
			}
        }

		private Decimal? _psmfId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PSMF_ID", BaseColumnName ="PSMF_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? PsmfId 
		{ 
		    get { return _psmfId; } 
			set 
			{
			    _psmfId = value;
			}
        }

		private Decimal? _worldwideDbOwnerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="WORLDWIDE_DB_OWNER_ID", BaseColumnName ="WORLDWIDE_DB_OWNER_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? WorldwideDbOwnerId 
		{ 
		    get { return _worldwideDbOwnerId; } 
			set 
			{
			    _worldwideDbOwnerId = value;
			}
        }

		private Decimal? _localDdbbId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LOCAL_DDBB_ID", BaseColumnName ="LOCAL_DDBB_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? LocalDdbbId 
		{ 
		    get { return _localDdbbId; } 
			set 
			{
			    _localDdbbId = value;
			}
        }

		private Decimal? _maintenanceInfoRespId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MAINTENANCE_INFO_RESP_ID", BaseColumnName ="MAINTENANCE_INFO_RESP_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? MaintenanceInfoRespId 
		{ 
		    get { return _maintenanceInfoRespId; } 
			set 
			{
			    _maintenanceInfoRespId = value;
			}
        }

		private Decimal? _literatureSearchesId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LITERATURE_SEARCHES_ID", BaseColumnName ="LITERATURE_SEARCHES_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? LiteratureSearchesId 
		{ 
		    get { return _literatureSearchesId; } 
			set 
			{
			    _literatureSearchesId = value;
			}
        }

		private Decimal? _trainingId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TRAINING_ID", BaseColumnName ="TRAINING_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? TrainingId 
		{ 
		    get { return _trainingId; } 
			set 
			{
			    _trainingId = value;
			}
        }

		private String _amendments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="AMENDMENTS", BaseColumnName ="AMENDMENTS", BaseTableName = "AGREEMENTS" )]		public String Amendments 
		{ 
		    get { return _amendments; } 
			set 
			{
			    _amendments = value;
			}
        }

		private String _auditing;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="AUDITING", BaseColumnName ="AUDITING", BaseTableName = "AGREEMENTS" )]		public String Auditing 
		{ 
		    get { return _auditing; } 
			set 
			{
			    _auditing = value;
			}
        }

		private String _qppvChanges;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="QPPV_CHANGES", BaseColumnName ="QPPV_CHANGES", BaseTableName = "AGREEMENTS" )]		public String QppvChanges 
		{ 
		    get { return _qppvChanges; } 
			set 
			{
			    _qppvChanges = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "AGREEMENTS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private String _isTpQppvContactDetails;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_TP_QPPV_CONTACT_DETAILS", BaseColumnName ="IS_TP_QPPV_CONTACT_DETAILS", BaseTableName = "AGREEMENTS" )]		public String IsTpQppvContactDetails 
		{ 
		    get { return _isTpQppvContactDetails; } 
			set 
			{
			    _isTpQppvContactDetails = value;
			}
        }

		private String _nameActivity;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="NAME_ACTIVITY", BaseColumnName ="NAME_ACTIVITY", BaseTableName = "AGREEMENTS" )]		public String NameActivity 
		{ 
		    get { return _nameActivity; } 
			set 
			{
			    _nameActivity = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS", BaseColumnName ="ADDRESS", BaseTableName = "AGREEMENTS" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }

		private String _agreementName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="AGREEMENT_NAME", BaseColumnName ="AGREEMENT_NAME", BaseTableName = "AGREEMENTS" )]		public String AgreementName 
		{ 
		    get { return _agreementName; } 
			set 
			{
			    _agreementName = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "AGREEMENTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "AGREEMENTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "AGREEMENTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "AGREEMENTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private DateTime? _draftElaborationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DRAFT_ELABORATION_DATE", BaseColumnName ="DRAFT_ELABORATION_DATE", BaseTableName = "AGREEMENTS" )]		public DateTime? DraftElaborationDate 
		{ 
		    get { return _draftElaborationDate; } 
			set 
			{
			    _draftElaborationDate = value;
			}
        }

		private DateTime? _lastSignatureDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LAST_SIGNATURE_DATE", BaseColumnName ="LAST_SIGNATURE_DATE", BaseTableName = "AGREEMENTS" )]		public DateTime? LastSignatureDate 
		{ 
		    get { return _lastSignatureDate; } 
			set 
			{
			    _lastSignatureDate = value;
			}
        }

		private String _isLastApprovedVersion;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_LAST_APPROVED_VERSION", BaseColumnName ="IS_LAST_APPROVED_VERSION", BaseTableName = "AGREEMENTS" )]		public String IsLastApprovedVersion 
		{ 
		    get { return _isLastApprovedVersion; } 
			set 
			{
			    _isLastApprovedVersion = value;
			}
        }

		private String _ressIssues;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="RESS_ISSUES", BaseColumnName ="RESS_ISSUES", BaseTableName = "AGREEMENTS" )]		public String RessIssues 
		{ 
		    get { return _ressIssues; } 
			set 
			{
			    _ressIssues = value;
			}
        }

		private String _emergingSafetyIssues;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="EMERGING_SAFETY_ISSUES", BaseColumnName ="EMERGING_SAFETY_ISSUES", BaseTableName = "AGREEMENTS" )]		public String EmergingSafetyIssues 
		{ 
		    get { return _emergingSafetyIssues; } 
			set 
			{
			    _emergingSafetyIssues = value;
			}
        }

		private Decimal? _localLiteratureSearches;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LOCAL_LITERATURE_SEARCHES", BaseColumnName ="LOCAL_LITERATURE_SEARCHES", BaseTableName = "AGREEMENTS" )]		public Decimal? LocalLiteratureSearches 
		{ 
		    get { return _localLiteratureSearches; } 
			set 
			{
			    _localLiteratureSearches = value;
			}
        }

		private String _qppvCompany;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="QPPV_COMPANY", BaseColumnName ="QPPV_COMPANY", BaseTableName = "AGREEMENTS" )]		public String QppvCompany 
		{ 
		    get { return _qppvCompany; } 
			set 
			{
			    _qppvCompany = value;
			}
        }

		private Decimal? _agreementStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="AGREEMENT_STATUS_ID", BaseColumnName ="AGREEMENT_STATUS_ID", BaseTableName = "AGREEMENTS" )]		public Decimal? AgreementStatusId 
		{ 
		    get { return _agreementStatusId; } 
			set 
			{
			    _agreementStatusId = value;
			}
        }

		private String _isNotEffectiveDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NOT_EFFECTIVE_DATE", BaseColumnName ="IS_NOT_EFFECTIVE_DATE", BaseTableName = "AGREEMENTS" )]		public String IsNotEffectiveDate 
		{ 
		    get { return _isNotEffectiveDate; } 
			set 
			{
			    _isNotEffectiveDate = value;
			}
        }

		private Decimal? _tpQppvContactMeans;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TP_QPPV_CONTACT_MEANS", BaseColumnName ="TP_QPPV_CONTACT_MEANS", BaseTableName = "AGREEMENTS" )]		public Decimal? TpQppvContactMeans 
		{ 
		    get { return _tpQppvContactMeans; } 
			set 
			{
			    _tpQppvContactMeans = value;
			}
        }

		private String _format;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FORMAT", BaseColumnName ="FORMAT", BaseTableName = "AGREEMENTS" )]		public String Format 
		{ 
		    get { return _format; } 
			set 
			{
			    _format = value;
			}
        }

		private String _agreementTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="AGREEMENT_TYPE_NAME" )]		public String AgreementTypeName 
		{ 
		    get { return _agreementTypeName; } 
			set 
			{
			    _agreementTypeName = value;
			}
        }

		private String _organisationValue;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ORGANISATION_VALUE" )]		public String OrganisationValue 
		{ 
		    get { return _organisationValue; } 
			set 
			{
			    _organisationValue = value;
			}
        }


	}

	public partial class AgreementRepository : Repository<Agreement> 
	{
		public AgreementRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Agreement Get(string projectionName, System.Decimal agreementId)
		{
			return ((IRepository<Agreement>)this).Get(projectionName, agreementId, FetchMode.UseIdentityMap);
		}

		public Agreement Get(string projectionName, System.Decimal agreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Agreement>)this).Get(projectionName, agreementId, fetchMode);
		}

		public Agreement Get(Projection projection, System.Decimal agreementId)
		{
			return ((IRepository<Agreement>)this).Get(projection, agreementId, FetchMode.UseIdentityMap);
		}

		public Agreement Get(Projection projection, System.Decimal agreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Agreement>)this).Get(projection, agreementId, fetchMode);
		}

		public Agreement Get(string projectionName, System.Decimal agreementId, params string[] fields)
		{
			return ((IRepository<Agreement>)this).Get(projectionName, agreementId, fields);
		}

		public Agreement Get(Projection projection, System.Decimal agreementId, params string[] fields)
		{
			return ((IRepository<Agreement>)this).Get(projection, agreementId, fields);
		}

		public bool Delete(System.Decimal agreementId)
		{
			var entity = new Agreement { AgreementId = agreementId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AgreementFields
	{
		public const string AgreementId = "AgreementId";
		public const string AgreementTypeId = "AgreementTypeId";
		public const string CompanyId = "CompanyId";
		public const string SignatureDate = "SignatureDate";
		public const string EffectiveAsOf = "EffectiveAsOf";
		public const string EffectiveDate = "EffectiveDate";
		public const string PeriodicRevisionDeadline = "PeriodicRevisionDeadline";
		public const string PeriodicRevisionStatus = "PeriodicRevisionStatus";
		public const string Nullified = "Nullified";
		public const string NulllificationDate = "NulllificationDate";
		public const string CountryId = "CountryId";
		public const string IsAeAdrReportsExchange = "IsAeAdrReportsExchange";
		public const string SeriousReports = "SeriousReports";
		public const string NonSeriousReports = "NonSeriousReports";
		public const string NonSeriousReportsTp = "NonSeriousReportsTp";
		public const string Language = "Language";
		public const string SpecialSituations = "SpecialSituations";
		public const string AdverseEventsTrials = "AdverseEventsTrials";
		public const string SaeCt = "SaeCt";
		public const string AeCt = "AeCt";
		public const string SaeCtTp = "SaeCtTp";
		public const string AeCtTp = "AeCtTp";
		public const string SignalDetectionId = "SignalDetectionId";
		public const string Ack = "Ack";
		public const string ReportingCcaaTerritoryId = "ReportingCcaaTerritoryId";
		public const string ReportingEuCcaaId = "ReportingEuCcaaId";
		public const string PsurPreparationRespId = "PsurPreparationRespId";
		public const string PsurSubmissionRespId = "PsurSubmissionRespId";
		public const string RmpPreparationRespId = "RmpPreparationRespId";
		public const string RmpSubmissionRespId = "RmpSubmissionRespId";
		public const string PsmfId = "PsmfId";
		public const string WorldwideDbOwnerId = "WorldwideDbOwnerId";
		public const string LocalDdbbId = "LocalDdbbId";
		public const string MaintenanceInfoRespId = "MaintenanceInfoRespId";
		public const string LiteratureSearchesId = "LiteratureSearchesId";
		public const string TrainingId = "TrainingId";
		public const string Amendments = "Amendments";
		public const string Auditing = "Auditing";
		public const string QppvChanges = "QppvChanges";
		public const string Comments = "Comments";
		public const string IsTpQppvContactDetails = "IsTpQppvContactDetails";
		public const string NameActivity = "NameActivity";
		public const string Address = "Address";
		public const string AgreementName = "AgreementName";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string DraftElaborationDate = "DraftElaborationDate";
		public const string LastSignatureDate = "LastSignatureDate";
		public const string IsLastApprovedVersion = "IsLastApprovedVersion";
		public const string RessIssues = "RessIssues";
		public const string EmergingSafetyIssues = "EmergingSafetyIssues";
		public const string LocalLiteratureSearches = "LocalLiteratureSearches";
		public const string QppvCompany = "QppvCompany";
		public const string AgreementStatusId = "AgreementStatusId";
		public const string IsNotEffectiveDate = "IsNotEffectiveDate";
		public const string TpQppvContactMeans = "TpQppvContactMeans";
		public const string Format = "Format";
		public const string AgreementTypeName = "AgreementTypeName";
		public const string OrganisationValue = "OrganisationValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="COUNTRIES")]
	public partial class Country
	{
		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "COUNTRY_ID", ColumnName ="COUNTRY_ID", BaseColumnName ="COUNTRY_ID", BaseTableName = "COUNTRIES" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE", BaseColumnName ="TWO_LETTERS_CODE", BaseTableName = "COUNTRIES" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }

		private String _threeLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="THREE_LETTERS_CODE", BaseColumnName ="THREE_LETTERS_CODE", BaseTableName = "COUNTRIES" )]		public String ThreeLettersCode 
		{ 
		    get { return _threeLettersCode; } 
			set 
			{
			    _threeLettersCode = value;
			}
        }

		private String _numericCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="NUMERIC_CODE", BaseColumnName ="NUMERIC_CODE", BaseTableName = "COUNTRIES" )]		public String NumericCode 
		{ 
		    get { return _numericCode; } 
			set 
			{
			    _numericCode = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME", BaseColumnName ="COUNTRY_NAME", BaseTableName = "COUNTRIES" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "COUNTRIES" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "COUNTRIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "COUNTRIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "COUNTRIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "COUNTRIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _currencyId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CURRENCY_ID", BaseColumnName ="CURRENCY_ID", BaseTableName = "COUNTRIES" )]		public Decimal? CurrencyId 
		{ 
		    get { return _currencyId; } 
			set 
			{
			    _currencyId = value;
			}
        }

		private String _fullName;
		[DataMember]
		[SqlField(DbType.String, 43, ColumnName ="FULL_NAME" )]		public String FullName 
		{ 
		    get { return _fullName; } 
			set 
			{
			    _fullName = value;
			}
        }


	}

	public partial class CountryRepository : Repository<Country> 
	{
		public CountryRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Country Get(string projectionName, System.Decimal countryId)
		{
			return ((IRepository<Country>)this).Get(projectionName, countryId, FetchMode.UseIdentityMap);
		}

		public Country Get(string projectionName, System.Decimal countryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Country>)this).Get(projectionName, countryId, fetchMode);
		}

		public Country Get(Projection projection, System.Decimal countryId)
		{
			return ((IRepository<Country>)this).Get(projection, countryId, FetchMode.UseIdentityMap);
		}

		public Country Get(Projection projection, System.Decimal countryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Country>)this).Get(projection, countryId, fetchMode);
		}

		public Country Get(string projectionName, System.Decimal countryId, params string[] fields)
		{
			return ((IRepository<Country>)this).Get(projectionName, countryId, fields);
		}

		public Country Get(Projection projection, System.Decimal countryId, params string[] fields)
		{
			return ((IRepository<Country>)this).Get(projection, countryId, fields);
		}

		public bool Delete(System.Decimal countryId)
		{
			var entity = new Country { CountryId = countryId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class CountryFields
	{
		public const string CountryId = "CountryId";
		public const string TwoLettersCode = "TwoLettersCode";
		public const string ThreeLettersCode = "ThreeLettersCode";
		public const string NumericCode = "NumericCode";
		public const string CountryName = "CountryName";
		public const string IsActive = "IsActive";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string CurrencyId = "CurrencyId";
		public const string FullName = "FullName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="AGREEMENT_TYPES")]
	public partial class AgreementType
	{
		private Decimal _agreementTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "AGREEMENT_TYPE_ID", ColumnName ="AGREEMENT_TYPE_ID", BaseColumnName ="AGREEMENT_TYPE_ID", BaseTableName = "AGREEMENT_TYPES" )]		public Decimal AgreementTypeId 
		{ 
		    get { return _agreementTypeId; } 
			set 
			{
			    _agreementTypeId = value;
			}
        }

		private String _agreementTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="AGREEMENT_TYPE_NAME", BaseColumnName ="AGREEMENT_TYPE_NAME", BaseTableName = "AGREEMENT_TYPES" )]		public String AgreementTypeName 
		{ 
		    get { return _agreementTypeName; } 
			set 
			{
			    _agreementTypeName = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "AGREEMENT_TYPES" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "AGREEMENT_TYPES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "AGREEMENT_TYPES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "AGREEMENT_TYPES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "AGREEMENT_TYPES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class AgreementTypeRepository : Repository<AgreementType> 
	{
		public AgreementTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AgreementType Get(string projectionName, System.Decimal agreementTypeId)
		{
			return ((IRepository<AgreementType>)this).Get(projectionName, agreementTypeId, FetchMode.UseIdentityMap);
		}

		public AgreementType Get(string projectionName, System.Decimal agreementTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementType>)this).Get(projectionName, agreementTypeId, fetchMode);
		}

		public AgreementType Get(Projection projection, System.Decimal agreementTypeId)
		{
			return ((IRepository<AgreementType>)this).Get(projection, agreementTypeId, FetchMode.UseIdentityMap);
		}

		public AgreementType Get(Projection projection, System.Decimal agreementTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementType>)this).Get(projection, agreementTypeId, fetchMode);
		}

		public AgreementType Get(string projectionName, System.Decimal agreementTypeId, params string[] fields)
		{
			return ((IRepository<AgreementType>)this).Get(projectionName, agreementTypeId, fields);
		}

		public AgreementType Get(Projection projection, System.Decimal agreementTypeId, params string[] fields)
		{
			return ((IRepository<AgreementType>)this).Get(projection, agreementTypeId, fields);
		}

		public bool Delete(System.Decimal agreementTypeId)
		{
			var entity = new AgreementType { AgreementTypeId = agreementTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AgreementTypeFields
	{
		public const string AgreementTypeId = "AgreementTypeId";
		public const string AgreementTypeName = "AgreementTypeName";
		public const string IsActive = "IsActive";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="ACTIVE_SUBSTANCES")]
	public partial class ActiveSubstance
	{
		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "ACTIVE_SUBSTANCE_ID", ColumnName ="ACTIVE_SUBSTANCE_ID", BaseColumnName ="ACTIVE_SUBSTANCE_ID", BaseTableName = "ACTIVE_SUBSTANCES" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "ACTIVE_SUBSTANCES" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _activeSubstanceComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ACTIVE_SUBSTANCE_COMMENTS", BaseColumnName ="ACTIVE_SUBSTANCE_COMMENTS", BaseTableName = "ACTIVE_SUBSTANCES" )]		public String ActiveSubstanceComments 
		{ 
		    get { return _activeSubstanceComments; } 
			set 
			{
			    _activeSubstanceComments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "ACTIVE_SUBSTANCES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "ACTIVE_SUBSTANCES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "ACTIVE_SUBSTANCES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "ACTIVE_SUBSTANCES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isEudravigilanceSubstance;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_EUDRAVIGILANCE_SUBSTANCE", BaseColumnName ="IS_EUDRAVIGILANCE_SUBSTANCE", BaseTableName = "ACTIVE_SUBSTANCES" )]		public String IsEudravigilanceSubstance 
		{ 
		    get { return _isEudravigilanceSubstance; } 
			set 
			{
			    _isEudravigilanceSubstance = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="SUBSTANCE_NAME", BaseColumnName ="SUBSTANCE_NAME", BaseTableName = "ACTIVE_SUBSTANCES" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _xevmpdCodeSubstance;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE_SUBSTANCE", BaseColumnName ="XEVMPD_CODE_SUBSTANCE", BaseTableName = "ACTIVE_SUBSTANCES" )]		public String XevmpdCodeSubstance 
		{ 
		    get { return _xevmpdCodeSubstance; } 
			set 
			{
			    _xevmpdCodeSubstance = value;
			}
        }

		private String _isSalt;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_SALT", BaseColumnName ="IS_SALT", BaseTableName = "ACTIVE_SUBSTANCES" )]		public String IsSalt 
		{ 
		    get { return _isSalt; } 
			set 
			{
			    _isSalt = value;
			}
        }

		private String _otherSubstanceName;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="OTHER_SUBSTANCE_NAME", BaseColumnName ="OTHER_SUBSTANCE_NAME", BaseTableName = "ACTIVE_SUBSTANCES" )]		public String OtherSubstanceName 
		{ 
		    get { return _otherSubstanceName; } 
			set 
			{
			    _otherSubstanceName = value;
			}
        }

		private Decimal? _apiStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="API_STATUS_ID", BaseColumnName ="API_STATUS_ID", BaseTableName = "ACTIVE_SUBSTANCES" )]		public Decimal? ApiStatusId 
		{ 
		    get { return _apiStatusId; } 
			set 
			{
			    _apiStatusId = value;
			}
        }

		private Decimal? _apiSubstatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="API_SUBSTATUS_ID", BaseColumnName ="API_SUBSTATUS_ID", BaseTableName = "ACTIVE_SUBSTANCES" )]		public Decimal? ApiSubstatusId 
		{ 
		    get { return _apiSubstatusId; } 
			set 
			{
			    _apiSubstatusId = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _activeSubstanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="ACTIVE_SUBSTANCE_NAME" )]		public String ActiveSubstanceName 
		{ 
		    get { return _activeSubstanceName; } 
			set 
			{
			    _activeSubstanceName = value;
			}
        }

		private String _apiStatusDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="API_STATUS_DESCRIPTION" )]		public String ApiStatusDescription 
		{ 
		    get { return _apiStatusDescription; } 
			set 
			{
			    _apiStatusDescription = value;
			}
        }

		private String _apiSubstatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="API_SUBSTATUS_NAME" )]		public String ApiSubstatusName 
		{ 
		    get { return _apiSubstatusName; } 
			set 
			{
			    _apiSubstatusName = value;
			}
        }

		private Decimal? _ocurrences;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OCURRENCES" )]		public Decimal? Ocurrences 
		{ 
		    get { return _ocurrences; } 
			set 
			{
			    _ocurrences = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _versionTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION_TYPE_NAME" )]		public String VersionTypeName 
		{ 
		    get { return _versionTypeName; } 
			set 
			{
			    _versionTypeName = value;
			}
        }

		private String _version;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION" )]		public String Version 
		{ 
		    get { return _version; } 
			set 
			{
			    _version = value;
			}
        }

		private DateTime? _versionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VERSION_DATE" )]		public DateTime? VersionDate 
		{ 
		    get { return _versionDate; } 
			set 
			{
			    _versionDate = value;
			}
        }

		private String _fullVersion;
		[DataMember]
		[SqlField(DbType.String, 271, ColumnName ="FULL_VERSION" )]		public String FullVersion 
		{ 
		    get { return _fullVersion; } 
			set 
			{
			    _fullVersion = value;
			}
        }


	}

	public partial class ActiveSubstanceRepository : Repository<ActiveSubstance> 
	{
		public ActiveSubstanceRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ActiveSubstance Get(string projectionName, System.Decimal activeSubstanceId)
		{
			return ((IRepository<ActiveSubstance>)this).Get(projectionName, activeSubstanceId, FetchMode.UseIdentityMap);
		}

		public ActiveSubstance Get(string projectionName, System.Decimal activeSubstanceId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ActiveSubstance>)this).Get(projectionName, activeSubstanceId, fetchMode);
		}

		public ActiveSubstance Get(Projection projection, System.Decimal activeSubstanceId)
		{
			return ((IRepository<ActiveSubstance>)this).Get(projection, activeSubstanceId, FetchMode.UseIdentityMap);
		}

		public ActiveSubstance Get(Projection projection, System.Decimal activeSubstanceId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ActiveSubstance>)this).Get(projection, activeSubstanceId, fetchMode);
		}

		public ActiveSubstance Get(string projectionName, System.Decimal activeSubstanceId, params string[] fields)
		{
			return ((IRepository<ActiveSubstance>)this).Get(projectionName, activeSubstanceId, fields);
		}

		public ActiveSubstance Get(Projection projection, System.Decimal activeSubstanceId, params string[] fields)
		{
			return ((IRepository<ActiveSubstance>)this).Get(projection, activeSubstanceId, fields);
		}

		public bool Delete(System.Decimal activeSubstanceId)
		{
			var entity = new ActiveSubstance { ActiveSubstanceId = activeSubstanceId };
			return this.Delete(entity);
		}

		
		public void DeleteActiveSubstance(Decimal? apiId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteActiveSubstanceProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "API_ID"].Value = apiId == null ? (object) DBNull.Value : apiId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class ActiveSubstanceFields
	{
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string XevmpdCode = "XevmpdCode";
		public const string ActiveSubstanceComments = "ActiveSubstanceComments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsEudravigilanceSubstance = "IsEudravigilanceSubstance";
		public const string SubstanceName = "SubstanceName";
		public const string XevmpdCodeSubstance = "XevmpdCodeSubstance";
		public const string IsSalt = "IsSalt";
		public const string OtherSubstanceName = "OtherSubstanceName";
		public const string ApiStatusId = "ApiStatusId";
		public const string ApiSubstatusId = "ApiSubstatusId";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string ActiveSubstanceName = "ActiveSubstanceName";
		public const string ApiStatusDescription = "ApiStatusDescription";
		public const string ApiSubstatusName = "ApiSubstatusName";
		public const string Ocurrences = "Ocurrences";
		public const string ManufacturerName = "ManufacturerName";
		public const string VersionTypeName = "VersionTypeName";
		public const string Version = "Version";
		public const string VersionDate = "VersionDate";
		public const string FullVersion = "FullVersion";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="ACTIVE_SUBSTANCEDMFCEPS")]
	public partial class DmfCepVersion
	{
		private Decimal _dmfcepVersionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DMFCEP_VERSION_ID", ColumnName ="DMFCEP_VERSION_ID", BaseColumnName ="DMFCEP_VERSION_ID", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public Decimal DmfcepVersionId 
		{ 
		    get { return _dmfcepVersionId; } 
			set 
			{
			    _dmfcepVersionId = value;
			}
        }

		private DateTime? _versionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VERSION_DATE", BaseColumnName ="VERSION_DATE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public DateTime? VersionDate 
		{ 
		    get { return _versionDate; } 
			set 
			{
			    _versionDate = value;
			}
        }

		private Decimal _apiManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="API_MANUFACTURER_ID", BaseColumnName ="API_MANUFACTURER_ID", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public Decimal ApiManufacturerId 
		{ 
		    get { return _apiManufacturerId; } 
			set 
			{
			    _apiManufacturerId = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID", BaseColumnName ="ACTIVE_SUBSTANCE_ID", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MANUFACTURER_NAME", BaseColumnName ="MANUFACTURER_NAME", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _dmfcepType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="DMFCEP_TYPE", BaseColumnName ="DMFCEP_TYPE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public String DmfcepType 
		{ 
		    get { return _dmfcepType; } 
			set 
			{
			    _dmfcepType = value;
			}
        }

		private String _version;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION", BaseColumnName ="VERSION", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public String Version 
		{ 
		    get { return _version; } 
			set 
			{
			    _version = value;
			}
        }

		private String _isCompleteVersionDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_COMPLETE_VERSION_DATE", BaseColumnName ="IS_COMPLETE_VERSION_DATE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public String IsCompleteVersionDate 
		{ 
		    get { return _isCompleteVersionDate; } 
			set 
			{
			    _isCompleteVersionDate = value;
			}
        }

		private String _isNaVersionDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_VERSION_DATE", BaseColumnName ="IS_NA_VERSION_DATE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS" )]		public String IsNaVersionDate 
		{ 
		    get { return _isNaVersionDate; } 
			set 
			{
			    _isNaVersionDate = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private Decimal? _occurrences;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OCCURRENCES" )]		public Decimal? Occurrences 
		{ 
		    get { return _occurrences; } 
			set 
			{
			    _occurrences = value;
			}
        }


	}

	public partial class DmfCepVersionRepository : Repository<DmfCepVersion> 
	{
		public DmfCepVersionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DmfCepVersion Get(string projectionName, System.Decimal dmfcepVersionId)
		{
			return ((IRepository<DmfCepVersion>)this).Get(projectionName, dmfcepVersionId, FetchMode.UseIdentityMap);
		}

		public DmfCepVersion Get(string projectionName, System.Decimal dmfcepVersionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DmfCepVersion>)this).Get(projectionName, dmfcepVersionId, fetchMode);
		}

		public DmfCepVersion Get(Projection projection, System.Decimal dmfcepVersionId)
		{
			return ((IRepository<DmfCepVersion>)this).Get(projection, dmfcepVersionId, FetchMode.UseIdentityMap);
		}

		public DmfCepVersion Get(Projection projection, System.Decimal dmfcepVersionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DmfCepVersion>)this).Get(projection, dmfcepVersionId, fetchMode);
		}

		public DmfCepVersion Get(string projectionName, System.Decimal dmfcepVersionId, params string[] fields)
		{
			return ((IRepository<DmfCepVersion>)this).Get(projectionName, dmfcepVersionId, fields);
		}

		public DmfCepVersion Get(Projection projection, System.Decimal dmfcepVersionId, params string[] fields)
		{
			return ((IRepository<DmfCepVersion>)this).Get(projection, dmfcepVersionId, fields);
		}

		public bool Delete(System.Decimal dmfcepVersionId)
		{
			var entity = new DmfCepVersion { DmfcepVersionId = dmfcepVersionId };
			return this.Delete(entity);
		}

		
		public void DeleteApiManufactVersion(Decimal? vId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteApiManufactVersionProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "V_ID"].Value = vId == null ? (object) DBNull.Value : vId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class DmfCepVersionFields
	{
		public const string DmfcepVersionId = "DmfcepVersionId";
		public const string VersionDate = "VersionDate";
		public const string ApiManufacturerId = "ApiManufacturerId";
		public const string Comments = "Comments";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string ManufacturerName = "ManufacturerName";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DmfcepType = "DmfcepType";
		public const string Version = "Version";
		public const string IsCompleteVersionDate = "IsCompleteVersionDate";
		public const string IsNaVersionDate = "IsNaVersionDate";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string SubstanceName = "SubstanceName";
		public const string Occurrences = "Occurrences";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MANUFACTURERS")]
	public partial class Manufacturer
	{
		private Decimal _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MANUFACTURER_ID", ColumnName ="MANUFACTURER_ID", BaseColumnName ="MANUFACTURER_ID", BaseTableName = "MANUFACTURERS" )]		public Decimal ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME", BaseColumnName ="MANUFACTURER_NAME", BaseTableName = "MANUFACTURERS" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "MANUFACTURERS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MANUFACTURERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MANUFACTURERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MANUFACTURERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MANUFACTURERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isApi;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_API", BaseColumnName ="IS_API", BaseTableName = "MANUFACTURERS" )]		public String IsApi 
		{ 
		    get { return _isApi; } 
			set 
			{
			    _isApi = value;
			}
        }

		private String _isMedicinalProduct;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_MEDICINAL_PRODUCT", BaseColumnName ="IS_MEDICINAL_PRODUCT", BaseTableName = "MANUFACTURERS" )]		public String IsMedicinalProduct 
		{ 
		    get { return _isMedicinalProduct; } 
			set 
			{
			    _isMedicinalProduct = value;
			}
        }


	}

	public partial class ManufacturerRepository : Repository<Manufacturer> 
	{
		public ManufacturerRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Manufacturer Get(string projectionName, System.Decimal manufacturerId)
		{
			return ((IRepository<Manufacturer>)this).Get(projectionName, manufacturerId, FetchMode.UseIdentityMap);
		}

		public Manufacturer Get(string projectionName, System.Decimal manufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Manufacturer>)this).Get(projectionName, manufacturerId, fetchMode);
		}

		public Manufacturer Get(Projection projection, System.Decimal manufacturerId)
		{
			return ((IRepository<Manufacturer>)this).Get(projection, manufacturerId, FetchMode.UseIdentityMap);
		}

		public Manufacturer Get(Projection projection, System.Decimal manufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Manufacturer>)this).Get(projection, manufacturerId, fetchMode);
		}

		public Manufacturer Get(string projectionName, System.Decimal manufacturerId, params string[] fields)
		{
			return ((IRepository<Manufacturer>)this).Get(projectionName, manufacturerId, fields);
		}

		public Manufacturer Get(Projection projection, System.Decimal manufacturerId, params string[] fields)
		{
			return ((IRepository<Manufacturer>)this).Get(projection, manufacturerId, fields);
		}

		public bool Delete(System.Decimal manufacturerId)
		{
			var entity = new Manufacturer { ManufacturerId = manufacturerId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ManufacturerFields
	{
		public const string ManufacturerId = "ManufacturerId";
		public const string ManufacturerName = "ManufacturerName";
		public const string IsActive = "IsActive";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsApi = "IsApi";
		public const string IsMedicinalProduct = "IsMedicinalProduct";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_APIS")]
	public partial class MedicinalProductApi
	{
		private Decimal _mpApiId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_API_ID", ColumnName ="MP_API_ID", BaseColumnName ="MP_API_ID", BaseTableName = "MP_APIS" )]		public Decimal MpApiId 
		{ 
		    get { return _mpApiId; } 
			set 
			{
			    _mpApiId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID", BaseColumnName ="MEDICINAL_PRODUCT_ID", BaseTableName = "MP_APIS" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID", BaseColumnName ="ACTIVE_SUBSTANCE_ID", BaseTableName = "MP_APIS" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private String _strength;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="STRENGTH", BaseColumnName ="STRENGTH", BaseTableName = "MP_APIS" )]		public String Strength 
		{ 
		    get { return _strength; } 
			set 
			{
			    _strength = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_APIS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_APIS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_APIS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_APIS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _nameOrder;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="NAME_ORDER", BaseColumnName ="NAME_ORDER", BaseTableName = "MP_APIS" )]		public Decimal? NameOrder 
		{ 
		    get { return _nameOrder; } 
			set 
			{
			    _nameOrder = value;
			}
        }

		private String _freeBaseStrength;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="FREE_BASE_STRENGTH", BaseColumnName ="FREE_BASE_STRENGTH", BaseTableName = "MP_APIS" )]		public String FreeBaseStrength 
		{ 
		    get { return _freeBaseStrength; } 
			set 
			{
			    _freeBaseStrength = value;
			}
        }

		private String _isSalt;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_SALT" )]		public String IsSalt 
		{ 
		    get { return _isSalt; } 
			set 
			{
			    _isSalt = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _activeSubstanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="ACTIVE_SUBSTANCE_NAME" )]		public String ActiveSubstanceName 
		{ 
		    get { return _activeSubstanceName; } 
			set 
			{
			    _activeSubstanceName = value;
			}
        }


	}

	public partial class MedicinalProductApiRepository : Repository<MedicinalProductApi> 
	{
		public MedicinalProductApiRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedicinalProductApi Get(string projectionName, System.Decimal mpApiId)
		{
			return ((IRepository<MedicinalProductApi>)this).Get(projectionName, mpApiId, FetchMode.UseIdentityMap);
		}

		public MedicinalProductApi Get(string projectionName, System.Decimal mpApiId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedicinalProductApi>)this).Get(projectionName, mpApiId, fetchMode);
		}

		public MedicinalProductApi Get(Projection projection, System.Decimal mpApiId)
		{
			return ((IRepository<MedicinalProductApi>)this).Get(projection, mpApiId, FetchMode.UseIdentityMap);
		}

		public MedicinalProductApi Get(Projection projection, System.Decimal mpApiId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedicinalProductApi>)this).Get(projection, mpApiId, fetchMode);
		}

		public MedicinalProductApi Get(string projectionName, System.Decimal mpApiId, params string[] fields)
		{
			return ((IRepository<MedicinalProductApi>)this).Get(projectionName, mpApiId, fields);
		}

		public MedicinalProductApi Get(Projection projection, System.Decimal mpApiId, params string[] fields)
		{
			return ((IRepository<MedicinalProductApi>)this).Get(projection, mpApiId, fields);
		}

		public bool Delete(System.Decimal mpApiId)
		{
			var entity = new MedicinalProductApi { MpApiId = mpApiId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MedicinalProductApiFields
	{
		public const string MpApiId = "MpApiId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string Strength = "Strength";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string NameOrder = "NameOrder";
		public const string FreeBaseStrength = "FreeBaseStrength";
		public const string IsSalt = "IsSalt";
		public const string SubstanceName = "SubstanceName";
		public const string XevmpdCode = "XevmpdCode";
		public const string ActiveSubstanceName = "ActiveSubstanceName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MARKETING_AUTH_HOLDERS")]
	public partial class MarketingAuthHolder
	{
		private Decimal _marketingAuthHolderId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MARKETING_AUTH_HOLDER_ID", ColumnName ="MARKETING_AUTH_HOLDER_ID", BaseColumnName ="MARKETING_AUTH_HOLDER_ID", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public Decimal MarketingAuthHolderId 
		{ 
		    get { return _marketingAuthHolderId; } 
			set 
			{
			    _marketingAuthHolderId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS", BaseColumnName ="ADDRESS", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private Decimal? _organisationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ORGANISATION_TYPE_ID", BaseColumnName ="ORGANISATION_TYPE_ID", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public Decimal? OrganisationTypeId 
		{ 
		    get { return _organisationTypeId; } 
			set 
			{
			    _organisationTypeId = value;
			}
        }

		private String _localNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOCAL_NUMBER", BaseColumnName ="LOCAL_NUMBER", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String LocalNumber 
		{ 
		    get { return _localNumber; } 
			set 
			{
			    _localNumber = value;
			}
        }

		private String _city;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CITY", BaseColumnName ="CITY", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String City 
		{ 
		    get { return _city; } 
			set 
			{
			    _city = value;
			}
        }

		private String _state;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATE", BaseColumnName ="STATE", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String State 
		{ 
		    get { return _state; } 
			set 
			{
			    _state = value;
			}
        }

		private String _postalCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="POSTAL_CODE", BaseColumnName ="POSTAL_CODE", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String PostalCode 
		{ 
		    get { return _postalCode; } 
			set 
			{
			    _postalCode = value;
			}
        }

		private String _countryCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="COUNTRY_CODE", BaseColumnName ="COUNTRY_CODE", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String CountryCode 
		{ 
		    get { return _countryCode; } 
			set 
			{
			    _countryCode = value;
			}
        }

		private String _phoneNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PHONE_NUMBER", BaseColumnName ="PHONE_NUMBER", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String PhoneNumber 
		{ 
		    get { return _phoneNumber; } 
			set 
			{
			    _phoneNumber = value;
			}
        }

		private String _phoneExtension;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PHONE_EXTENSION", BaseColumnName ="PHONE_EXTENSION", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String PhoneExtension 
		{ 
		    get { return _phoneExtension; } 
			set 
			{
			    _phoneExtension = value;
			}
        }

		private String _phoneCountryCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PHONE_COUNTRY_CODE", BaseColumnName ="PHONE_COUNTRY_CODE", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String PhoneCountryCode 
		{ 
		    get { return _phoneCountryCode; } 
			set 
			{
			    _phoneCountryCode = value;
			}
        }

		private String _faxNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FAX_NUMBER", BaseColumnName ="FAX_NUMBER", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String FaxNumber 
		{ 
		    get { return _faxNumber; } 
			set 
			{
			    _faxNumber = value;
			}
        }

		private String _faxExtension;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FAX_EXTENSION", BaseColumnName ="FAX_EXTENSION", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String FaxExtension 
		{ 
		    get { return _faxExtension; } 
			set 
			{
			    _faxExtension = value;
			}
        }

		private String _faxCountryCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FAX_COUNTRY_CODE", BaseColumnName ="FAX_COUNTRY_CODE", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String FaxCountryCode 
		{ 
		    get { return _faxCountryCode; } 
			set 
			{
			    _faxCountryCode = value;
			}
        }

		private String _email;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="EMAIL", BaseColumnName ="EMAIL", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String Email 
		{ 
		    get { return _email; } 
			set 
			{
			    _email = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private Decimal? _smeStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SME_STATUS_ID", BaseColumnName ="SME_STATUS_ID", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public Decimal? SmeStatusId 
		{ 
		    get { return _smeStatusId; } 
			set 
			{
			    _smeStatusId = value;
			}
        }

		private String _smeNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SME_NUMBER", BaseColumnName ="SME_NUMBER", BaseTableName = "MARKETING_AUTH_HOLDERS" )]		public String SmeNumber 
		{ 
		    get { return _smeNumber; } 
			set 
			{
			    _smeNumber = value;
			}
        }

		private Decimal? _mahIterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MAH_ITERATIONS" )]		public Decimal? MahIterations 
		{ 
		    get { return _mahIterations; } 
			set 
			{
			    _mahIterations = value;
			}
        }

		private Decimal? _lcIterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LC_ITERATIONS" )]		public Decimal? LcIterations 
		{ 
		    get { return _lcIterations; } 
			set 
			{
			    _lcIterations = value;
			}
        }


	}

	public partial class MarketingAuthHolderRepository : Repository<MarketingAuthHolder> 
	{
		public MarketingAuthHolderRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MarketingAuthHolder Get(string projectionName, System.Decimal marketingAuthHolderId)
		{
			return ((IRepository<MarketingAuthHolder>)this).Get(projectionName, marketingAuthHolderId, FetchMode.UseIdentityMap);
		}

		public MarketingAuthHolder Get(string projectionName, System.Decimal marketingAuthHolderId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MarketingAuthHolder>)this).Get(projectionName, marketingAuthHolderId, fetchMode);
		}

		public MarketingAuthHolder Get(Projection projection, System.Decimal marketingAuthHolderId)
		{
			return ((IRepository<MarketingAuthHolder>)this).Get(projection, marketingAuthHolderId, FetchMode.UseIdentityMap);
		}

		public MarketingAuthHolder Get(Projection projection, System.Decimal marketingAuthHolderId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MarketingAuthHolder>)this).Get(projection, marketingAuthHolderId, fetchMode);
		}

		public MarketingAuthHolder Get(string projectionName, System.Decimal marketingAuthHolderId, params string[] fields)
		{
			return ((IRepository<MarketingAuthHolder>)this).Get(projectionName, marketingAuthHolderId, fields);
		}

		public MarketingAuthHolder Get(Projection projection, System.Decimal marketingAuthHolderId, params string[] fields)
		{
			return ((IRepository<MarketingAuthHolder>)this).Get(projection, marketingAuthHolderId, fields);
		}

		public bool Delete(System.Decimal marketingAuthHolderId)
		{
			var entity = new MarketingAuthHolder { MarketingAuthHolderId = marketingAuthHolderId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MarketingAuthHolderFields
	{
		public const string MarketingAuthHolderId = "MarketingAuthHolderId";
		public const string Name = "Name";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string IsActive = "IsActive";
		public const string Address = "Address";
		public const string XevmpdCode = "XevmpdCode";
		public const string OrganisationTypeId = "OrganisationTypeId";
		public const string LocalNumber = "LocalNumber";
		public const string City = "City";
		public const string State = "State";
		public const string PostalCode = "PostalCode";
		public const string CountryCode = "CountryCode";
		public const string PhoneNumber = "PhoneNumber";
		public const string PhoneExtension = "PhoneExtension";
		public const string PhoneCountryCode = "PhoneCountryCode";
		public const string FaxNumber = "FaxNumber";
		public const string FaxExtension = "FaxExtension";
		public const string FaxCountryCode = "FaxCountryCode";
		public const string Email = "Email";
		public const string Comments = "Comments";
		public const string SmeStatusId = "SmeStatusId";
		public const string SmeNumber = "SmeNumber";
		public const string MahIterations = "MahIterations";
		public const string LcIterations = "LcIterations";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="AGREEMENT_RECONCILIATIONS")]
	public partial class AgreementReconciliation
	{
		private Decimal _agreementReconciliationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "AGREEMENT_RECONCILIATION_ID", ColumnName ="AGREEMENT_RECONCILIATION_ID", BaseColumnName ="AGREEMENT_RECONCILIATION_ID", BaseTableName = "AGREEMENT_RECONCILIATIONS" )]		public Decimal AgreementReconciliationId 
		{ 
		    get { return _agreementReconciliationId; } 
			set 
			{
			    _agreementReconciliationId = value;
			}
        }

		private Decimal _agreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="AGREEMENT_ID", BaseColumnName ="AGREEMENT_ID", BaseTableName = "AGREEMENT_RECONCILIATIONS" )]		public Decimal AgreementId 
		{ 
		    get { return _agreementId; } 
			set 
			{
			    _agreementId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "AGREEMENT_RECONCILIATIONS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _frecuency;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="FRECUENCY", BaseColumnName ="FRECUENCY", BaseTableName = "AGREEMENT_RECONCILIATIONS" )]		public String Frecuency 
		{ 
		    get { return _frecuency; } 
			set 
			{
			    _frecuency = value;
			}
        }

		private DateTime? _startDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="START_DATE", BaseColumnName ="START_DATE", BaseTableName = "AGREEMENT_RECONCILIATIONS" )]		public DateTime? StartDate 
		{ 
		    get { return _startDate; } 
			set 
			{
			    _startDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "AGREEMENT_RECONCILIATIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "AGREEMENT_RECONCILIATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "AGREEMENT_RECONCILIATIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "AGREEMENT_RECONCILIATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class AgreementReconciliationRepository : Repository<AgreementReconciliation> 
	{
		public AgreementReconciliationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AgreementReconciliation Get(string projectionName, System.Decimal agreementReconciliationId)
		{
			return ((IRepository<AgreementReconciliation>)this).Get(projectionName, agreementReconciliationId, FetchMode.UseIdentityMap);
		}

		public AgreementReconciliation Get(string projectionName, System.Decimal agreementReconciliationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementReconciliation>)this).Get(projectionName, agreementReconciliationId, fetchMode);
		}

		public AgreementReconciliation Get(Projection projection, System.Decimal agreementReconciliationId)
		{
			return ((IRepository<AgreementReconciliation>)this).Get(projection, agreementReconciliationId, FetchMode.UseIdentityMap);
		}

		public AgreementReconciliation Get(Projection projection, System.Decimal agreementReconciliationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementReconciliation>)this).Get(projection, agreementReconciliationId, fetchMode);
		}

		public AgreementReconciliation Get(string projectionName, System.Decimal agreementReconciliationId, params string[] fields)
		{
			return ((IRepository<AgreementReconciliation>)this).Get(projectionName, agreementReconciliationId, fields);
		}

		public AgreementReconciliation Get(Projection projection, System.Decimal agreementReconciliationId, params string[] fields)
		{
			return ((IRepository<AgreementReconciliation>)this).Get(projection, agreementReconciliationId, fields);
		}

		public bool Delete(System.Decimal agreementReconciliationId)
		{
			var entity = new AgreementReconciliation { AgreementReconciliationId = agreementReconciliationId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AgreementReconciliationFields
	{
		public const string AgreementReconciliationId = "AgreementReconciliationId";
		public const string AgreementId = "AgreementId";
		public const string Name = "Name";
		public const string Frecuency = "Frecuency";
		public const string StartDate = "StartDate";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="AGREEMENT_CONTACTS")]
	public partial class AgreementContact
	{
		private Decimal _agreementContactId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "AGREEMENT_CONTACT_ID", ColumnName ="AGREEMENT_CONTACT_ID", BaseColumnName ="AGREEMENT_CONTACT_ID", BaseTableName = "AGREEMENT_CONTACTS" )]		public Decimal AgreementContactId 
		{ 
		    get { return _agreementContactId; } 
			set 
			{
			    _agreementContactId = value;
			}
        }

		private Decimal _agreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="AGREEMENT_ID", BaseColumnName ="AGREEMENT_ID", BaseTableName = "AGREEMENT_CONTACTS" )]		public Decimal AgreementId 
		{ 
		    get { return _agreementId; } 
			set 
			{
			    _agreementId = value;
			}
        }

		private String _nameActivity;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="NAME_ACTIVITY", BaseColumnName ="NAME_ACTIVITY", BaseTableName = "AGREEMENT_CONTACTS" )]		public String NameActivity 
		{ 
		    get { return _nameActivity; } 
			set 
			{
			    _nameActivity = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS", BaseColumnName ="ADDRESS", BaseTableName = "AGREEMENT_CONTACTS" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }

		private String _email;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="EMAIL", BaseColumnName ="EMAIL", BaseTableName = "AGREEMENT_CONTACTS" )]		public String Email 
		{ 
		    get { return _email; } 
			set 
			{
			    _email = value;
			}
        }

		private String _phone;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PHONE", BaseColumnName ="PHONE", BaseTableName = "AGREEMENT_CONTACTS" )]		public String Phone 
		{ 
		    get { return _phone; } 
			set 
			{
			    _phone = value;
			}
        }

		private String _fax;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FAX", BaseColumnName ="FAX", BaseTableName = "AGREEMENT_CONTACTS" )]		public String Fax 
		{ 
		    get { return _fax; } 
			set 
			{
			    _fax = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "AGREEMENT_CONTACTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "AGREEMENT_CONTACTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "AGREEMENT_CONTACTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "AGREEMENT_CONTACTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class AgreementContactRepository : Repository<AgreementContact> 
	{
		public AgreementContactRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AgreementContact Get(string projectionName, System.Decimal agreementContactId)
		{
			return ((IRepository<AgreementContact>)this).Get(projectionName, agreementContactId, FetchMode.UseIdentityMap);
		}

		public AgreementContact Get(string projectionName, System.Decimal agreementContactId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementContact>)this).Get(projectionName, agreementContactId, fetchMode);
		}

		public AgreementContact Get(Projection projection, System.Decimal agreementContactId)
		{
			return ((IRepository<AgreementContact>)this).Get(projection, agreementContactId, FetchMode.UseIdentityMap);
		}

		public AgreementContact Get(Projection projection, System.Decimal agreementContactId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementContact>)this).Get(projection, agreementContactId, fetchMode);
		}

		public AgreementContact Get(string projectionName, System.Decimal agreementContactId, params string[] fields)
		{
			return ((IRepository<AgreementContact>)this).Get(projectionName, agreementContactId, fields);
		}

		public AgreementContact Get(Projection projection, System.Decimal agreementContactId, params string[] fields)
		{
			return ((IRepository<AgreementContact>)this).Get(projection, agreementContactId, fields);
		}

		public bool Delete(System.Decimal agreementContactId)
		{
			var entity = new AgreementContact { AgreementContactId = agreementContactId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AgreementContactFields
	{
		public const string AgreementContactId = "AgreementContactId";
		public const string AgreementId = "AgreementId";
		public const string NameActivity = "NameActivity";
		public const string Address = "Address";
		public const string Email = "Email";
		public const string Phone = "Phone";
		public const string Fax = "Fax";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DEVELOPMENT_TYPES")]
	public partial class DevelopmentType
	{
		private Decimal _developmentTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DEVELOPMENT_TYPE_ID", ColumnName ="DEVELOPMENT_TYPE_ID", BaseColumnName ="DEVELOPMENT_TYPE_ID", BaseTableName = "DEVELOPMENT_TYPES" )]		public Decimal DevelopmentTypeId 
		{ 
		    get { return _developmentTypeId; } 
			set 
			{
			    _developmentTypeId = value;
			}
        }

		private String _developmentTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DEVELOPMENT_TYPE_NAME", BaseColumnName ="DEVELOPMENT_TYPE_NAME", BaseTableName = "DEVELOPMENT_TYPES" )]		public String DevelopmentTypeName 
		{ 
		    get { return _developmentTypeName; } 
			set 
			{
			    _developmentTypeName = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DEVELOPMENT_TYPES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DEVELOPMENT_TYPES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DEVELOPMENT_TYPES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DEVELOPMENT_TYPES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _developmentTypeDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DEVELOPMENT_TYPE_DESCRIPTION", BaseColumnName ="DEVELOPMENT_TYPE_DESCRIPTION", BaseTableName = "DEVELOPMENT_TYPES" )]		public String DevelopmentTypeDescription 
		{ 
		    get { return _developmentTypeDescription; } 
			set 
			{
			    _developmentTypeDescription = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "DEVELOPMENT_TYPES" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class DevelopmentTypeRepository : Repository<DevelopmentType> 
	{
		public DevelopmentTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DevelopmentType Get(string projectionName, System.Decimal developmentTypeId)
		{
			return ((IRepository<DevelopmentType>)this).Get(projectionName, developmentTypeId, FetchMode.UseIdentityMap);
		}

		public DevelopmentType Get(string projectionName, System.Decimal developmentTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DevelopmentType>)this).Get(projectionName, developmentTypeId, fetchMode);
		}

		public DevelopmentType Get(Projection projection, System.Decimal developmentTypeId)
		{
			return ((IRepository<DevelopmentType>)this).Get(projection, developmentTypeId, FetchMode.UseIdentityMap);
		}

		public DevelopmentType Get(Projection projection, System.Decimal developmentTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DevelopmentType>)this).Get(projection, developmentTypeId, fetchMode);
		}

		public DevelopmentType Get(string projectionName, System.Decimal developmentTypeId, params string[] fields)
		{
			return ((IRepository<DevelopmentType>)this).Get(projectionName, developmentTypeId, fields);
		}

		public DevelopmentType Get(Projection projection, System.Decimal developmentTypeId, params string[] fields)
		{
			return ((IRepository<DevelopmentType>)this).Get(projection, developmentTypeId, fields);
		}

		public bool Delete(System.Decimal developmentTypeId)
		{
			var entity = new DevelopmentType { DevelopmentTypeId = developmentTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DevelopmentTypeFields
	{
		public const string DevelopmentTypeId = "DevelopmentTypeId";
		public const string DevelopmentTypeName = "DevelopmentTypeName";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DevelopmentTypeDescription = "DevelopmentTypeDescription";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_DEVELOPMENTS")]
	public partial class MpDevelopment
	{
		private Decimal _mpDevelopmentId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_DEVELOPMENT_ID", ColumnName ="MP_DEVELOPMENT_ID", BaseColumnName ="MP_DEVELOPMENT_ID", BaseTableName = "MP_DEVELOPMENTS" )]		public Decimal MpDevelopmentId 
		{ 
		    get { return _mpDevelopmentId; } 
			set 
			{
			    _mpDevelopmentId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID", BaseColumnName ="MEDICINAL_PRODUCT_ID", BaseTableName = "MP_DEVELOPMENTS" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _mpDevelopmentName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MP_DEVELOPMENT_NAME", BaseColumnName ="MP_DEVELOPMENT_NAME", BaseTableName = "MP_DEVELOPMENTS" )]		public String MpDevelopmentName 
		{ 
		    get { return _mpDevelopmentName; } 
			set 
			{
			    _mpDevelopmentName = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_DEVELOPMENTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_DEVELOPMENTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_DEVELOPMENTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_DEVELOPMENTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _developerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DEVELOPER_ID", BaseColumnName ="DEVELOPER_ID", BaseTableName = "MP_DEVELOPMENTS" )]		public Decimal DeveloperId 
		{ 
		    get { return _developerId; } 
			set 
			{
			    _developerId = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _developmentTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DEVELOPMENT_TYPE_NAME" )]		public String DevelopmentTypeName 
		{ 
		    get { return _developmentTypeName; } 
			set 
			{
			    _developmentTypeName = value;
			}
        }

		private String _developerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="DEVELOPER_NAME" )]		public String DeveloperName 
		{ 
		    get { return _developerName; } 
			set 
			{
			    _developerName = value;
			}
        }

		private String _fullText;
		[DataMember]
		[SqlField(DbType.String, 386, ColumnName ="FULL_TEXT" )]		public String FullText 
		{ 
		    get { return _fullText; } 
			set 
			{
			    _fullText = value;
			}
        }


	}

	public partial class MpDevelopmentRepository : Repository<MpDevelopment> 
	{
		public MpDevelopmentRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpDevelopment Get(string projectionName, System.Decimal mpDevelopmentId)
		{
			return ((IRepository<MpDevelopment>)this).Get(projectionName, mpDevelopmentId, FetchMode.UseIdentityMap);
		}

		public MpDevelopment Get(string projectionName, System.Decimal mpDevelopmentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpDevelopment>)this).Get(projectionName, mpDevelopmentId, fetchMode);
		}

		public MpDevelopment Get(Projection projection, System.Decimal mpDevelopmentId)
		{
			return ((IRepository<MpDevelopment>)this).Get(projection, mpDevelopmentId, FetchMode.UseIdentityMap);
		}

		public MpDevelopment Get(Projection projection, System.Decimal mpDevelopmentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpDevelopment>)this).Get(projection, mpDevelopmentId, fetchMode);
		}

		public MpDevelopment Get(string projectionName, System.Decimal mpDevelopmentId, params string[] fields)
		{
			return ((IRepository<MpDevelopment>)this).Get(projectionName, mpDevelopmentId, fields);
		}

		public MpDevelopment Get(Projection projection, System.Decimal mpDevelopmentId, params string[] fields)
		{
			return ((IRepository<MpDevelopment>)this).Get(projection, mpDevelopmentId, fields);
		}

		public bool Delete(System.Decimal mpDevelopmentId)
		{
			var entity = new MpDevelopment { MpDevelopmentId = mpDevelopmentId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpDevelopmentFields
	{
		public const string MpDevelopmentId = "MpDevelopmentId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string MpDevelopmentName = "MpDevelopmentName";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DeveloperId = "DeveloperId";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string DevelopmentTypeName = "DevelopmentTypeName";
		public const string DeveloperName = "DeveloperName";
		public const string FullText = "FullText";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_STATUSES")]
	public partial class MpStatus
	{
		private Decimal _mpStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_STATUS_ID", ColumnName ="MP_STATUS_ID", BaseColumnName ="MP_STATUS_ID", BaseTableName = "MP_STATUSES" )]		public Decimal MpStatusId 
		{ 
		    get { return _mpStatusId; } 
			set 
			{
			    _mpStatusId = value;
			}
        }

		private String _mpStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MP_STATUS_NAME", BaseColumnName ="MP_STATUS_NAME", BaseTableName = "MP_STATUSES" )]		public String MpStatusName 
		{ 
		    get { return _mpStatusName; } 
			set 
			{
			    _mpStatusName = value;
			}
        }

		private String _mpDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MP_DESCRIPTION", BaseColumnName ="MP_DESCRIPTION", BaseTableName = "MP_STATUSES" )]		public String MpDescription 
		{ 
		    get { return _mpDescription; } 
			set 
			{
			    _mpDescription = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class MpStatusRepository : Repository<MpStatus> 
	{
		public MpStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpStatus Get(string projectionName, System.Decimal mpStatusId)
		{
			return ((IRepository<MpStatus>)this).Get(projectionName, mpStatusId, FetchMode.UseIdentityMap);
		}

		public MpStatus Get(string projectionName, System.Decimal mpStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStatus>)this).Get(projectionName, mpStatusId, fetchMode);
		}

		public MpStatus Get(Projection projection, System.Decimal mpStatusId)
		{
			return ((IRepository<MpStatus>)this).Get(projection, mpStatusId, FetchMode.UseIdentityMap);
		}

		public MpStatus Get(Projection projection, System.Decimal mpStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStatus>)this).Get(projection, mpStatusId, fetchMode);
		}

		public MpStatus Get(string projectionName, System.Decimal mpStatusId, params string[] fields)
		{
			return ((IRepository<MpStatus>)this).Get(projectionName, mpStatusId, fields);
		}

		public MpStatus Get(Projection projection, System.Decimal mpStatusId, params string[] fields)
		{
			return ((IRepository<MpStatus>)this).Get(projection, mpStatusId, fields);
		}

		public bool Delete(System.Decimal mpStatusId)
		{
			var entity = new MpStatus { MpStatusId = mpStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpStatusFields
	{
		public const string MpStatusId = "MpStatusId";
		public const string MpStatusName = "MpStatusName";
		public const string MpDescription = "MpDescription";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="STUDY_REASONS")]
	public partial class StudyReason
	{
		private Decimal _studyReasonId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "STUDY_REASON_ID", ColumnName ="STUDY_REASON_ID", BaseColumnName ="STUDY_REASON_ID", BaseTableName = "STUDY_REASONS" )]		public Decimal StudyReasonId 
		{ 
		    get { return _studyReasonId; } 
			set 
			{
			    _studyReasonId = value;
			}
        }

		private String _studyReasonName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_REASON_NAME", BaseColumnName ="STUDY_REASON_NAME", BaseTableName = "STUDY_REASONS" )]		public String StudyReasonName 
		{ 
		    get { return _studyReasonName; } 
			set 
			{
			    _studyReasonName = value;
			}
        }

		private String _studyReasonDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_REASON_DESCRIPTION", BaseColumnName ="STUDY_REASON_DESCRIPTION", BaseTableName = "STUDY_REASONS" )]		public String StudyReasonDescription 
		{ 
		    get { return _studyReasonDescription; } 
			set 
			{
			    _studyReasonDescription = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "STUDY_REASONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "STUDY_REASONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "STUDY_REASONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "STUDY_REASONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "STUDY_REASONS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class StudyReasonRepository : Repository<StudyReason> 
	{
		public StudyReasonRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public StudyReason Get(string projectionName, System.Decimal studyReasonId)
		{
			return ((IRepository<StudyReason>)this).Get(projectionName, studyReasonId, FetchMode.UseIdentityMap);
		}

		public StudyReason Get(string projectionName, System.Decimal studyReasonId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<StudyReason>)this).Get(projectionName, studyReasonId, fetchMode);
		}

		public StudyReason Get(Projection projection, System.Decimal studyReasonId)
		{
			return ((IRepository<StudyReason>)this).Get(projection, studyReasonId, FetchMode.UseIdentityMap);
		}

		public StudyReason Get(Projection projection, System.Decimal studyReasonId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<StudyReason>)this).Get(projection, studyReasonId, fetchMode);
		}

		public StudyReason Get(string projectionName, System.Decimal studyReasonId, params string[] fields)
		{
			return ((IRepository<StudyReason>)this).Get(projectionName, studyReasonId, fields);
		}

		public StudyReason Get(Projection projection, System.Decimal studyReasonId, params string[] fields)
		{
			return ((IRepository<StudyReason>)this).Get(projection, studyReasonId, fields);
		}

		public bool Delete(System.Decimal studyReasonId)
		{
			var entity = new StudyReason { StudyReasonId = studyReasonId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class StudyReasonFields
	{
		public const string StudyReasonId = "StudyReasonId";
		public const string StudyReasonName = "StudyReasonName";
		public const string StudyReasonDescription = "StudyReasonDescription";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="STUDY_PURPOSES")]
	public partial class StudyPurpose
	{
		private Decimal _studyPurposeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "STUDY_PURPOSE_ID", ColumnName ="STUDY_PURPOSE_ID", BaseColumnName ="STUDY_PURPOSE_ID", BaseTableName = "STUDY_PURPOSES" )]		public Decimal StudyPurposeId 
		{ 
		    get { return _studyPurposeId; } 
			set 
			{
			    _studyPurposeId = value;
			}
        }

		private String _studyPurposeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_PURPOSE_NAME", BaseColumnName ="STUDY_PURPOSE_NAME", BaseTableName = "STUDY_PURPOSES" )]		public String StudyPurposeName 
		{ 
		    get { return _studyPurposeName; } 
			set 
			{
			    _studyPurposeName = value;
			}
        }

		private String _studyPurposeDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_PURPOSE_DESCRIPTION", BaseColumnName ="STUDY_PURPOSE_DESCRIPTION", BaseTableName = "STUDY_PURPOSES" )]		public String StudyPurposeDescription 
		{ 
		    get { return _studyPurposeDescription; } 
			set 
			{
			    _studyPurposeDescription = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "STUDY_PURPOSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "STUDY_PURPOSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "STUDY_PURPOSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "STUDY_PURPOSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _packagingMaterial;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PACKAGING_MATERIAL", BaseColumnName ="PACKAGING_MATERIAL", BaseTableName = "STUDY_PURPOSES" )]		public String PackagingMaterial 
		{ 
		    get { return _packagingMaterial; } 
			set 
			{
			    _packagingMaterial = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "STUDY_PURPOSES" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class StudyPurposeRepository : Repository<StudyPurpose> 
	{
		public StudyPurposeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public StudyPurpose Get(string projectionName, System.Decimal studyPurposeId)
		{
			return ((IRepository<StudyPurpose>)this).Get(projectionName, studyPurposeId, FetchMode.UseIdentityMap);
		}

		public StudyPurpose Get(string projectionName, System.Decimal studyPurposeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<StudyPurpose>)this).Get(projectionName, studyPurposeId, fetchMode);
		}

		public StudyPurpose Get(Projection projection, System.Decimal studyPurposeId)
		{
			return ((IRepository<StudyPurpose>)this).Get(projection, studyPurposeId, FetchMode.UseIdentityMap);
		}

		public StudyPurpose Get(Projection projection, System.Decimal studyPurposeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<StudyPurpose>)this).Get(projection, studyPurposeId, fetchMode);
		}

		public StudyPurpose Get(string projectionName, System.Decimal studyPurposeId, params string[] fields)
		{
			return ((IRepository<StudyPurpose>)this).Get(projectionName, studyPurposeId, fields);
		}

		public StudyPurpose Get(Projection projection, System.Decimal studyPurposeId, params string[] fields)
		{
			return ((IRepository<StudyPurpose>)this).Get(projection, studyPurposeId, fields);
		}

		public bool Delete(System.Decimal studyPurposeId)
		{
			var entity = new StudyPurpose { StudyPurposeId = studyPurposeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class StudyPurposeFields
	{
		public const string StudyPurposeId = "StudyPurposeId";
		public const string StudyPurposeName = "StudyPurposeName";
		public const string StudyPurposeDescription = "StudyPurposeDescription";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string PackagingMaterial = "PackagingMaterial";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="CLIMATIC_CONDITIONS")]
	public partial class ClimaticCondition
	{
		private Decimal _climaticConditionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "CLIMATIC_CONDITION_ID", ColumnName ="CLIMATIC_CONDITION_ID", BaseColumnName ="CLIMATIC_CONDITION_ID", BaseTableName = "CLIMATIC_CONDITIONS" )]		public Decimal ClimaticConditionId 
		{ 
		    get { return _climaticConditionId; } 
			set 
			{
			    _climaticConditionId = value;
			}
        }

		private String _climaticConditionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CLIMATIC_CONDITION_NAME", BaseColumnName ="CLIMATIC_CONDITION_NAME", BaseTableName = "CLIMATIC_CONDITIONS" )]		public String ClimaticConditionName 
		{ 
		    get { return _climaticConditionName; } 
			set 
			{
			    _climaticConditionName = value;
			}
        }

		private String _climaticConditionDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CLIMATIC_CONDITION_DESCRIPTION", BaseColumnName ="CLIMATIC_CONDITION_DESCRIPTION", BaseTableName = "CLIMATIC_CONDITIONS" )]		public String ClimaticConditionDescription 
		{ 
		    get { return _climaticConditionDescription; } 
			set 
			{
			    _climaticConditionDescription = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "CLIMATIC_CONDITIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "CLIMATIC_CONDITIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "CLIMATIC_CONDITIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "CLIMATIC_CONDITIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "CLIMATIC_CONDITIONS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class ClimaticConditionRepository : Repository<ClimaticCondition> 
	{
		public ClimaticConditionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ClimaticCondition Get(string projectionName, System.Decimal climaticConditionId)
		{
			return ((IRepository<ClimaticCondition>)this).Get(projectionName, climaticConditionId, FetchMode.UseIdentityMap);
		}

		public ClimaticCondition Get(string projectionName, System.Decimal climaticConditionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ClimaticCondition>)this).Get(projectionName, climaticConditionId, fetchMode);
		}

		public ClimaticCondition Get(Projection projection, System.Decimal climaticConditionId)
		{
			return ((IRepository<ClimaticCondition>)this).Get(projection, climaticConditionId, FetchMode.UseIdentityMap);
		}

		public ClimaticCondition Get(Projection projection, System.Decimal climaticConditionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ClimaticCondition>)this).Get(projection, climaticConditionId, fetchMode);
		}

		public ClimaticCondition Get(string projectionName, System.Decimal climaticConditionId, params string[] fields)
		{
			return ((IRepository<ClimaticCondition>)this).Get(projectionName, climaticConditionId, fields);
		}

		public ClimaticCondition Get(Projection projection, System.Decimal climaticConditionId, params string[] fields)
		{
			return ((IRepository<ClimaticCondition>)this).Get(projection, climaticConditionId, fields);
		}

		public bool Delete(System.Decimal climaticConditionId)
		{
			var entity = new ClimaticCondition { ClimaticConditionId = climaticConditionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ClimaticConditionFields
	{
		public const string ClimaticConditionId = "ClimaticConditionId";
		public const string ClimaticConditionName = "ClimaticConditionName";
		public const string ClimaticConditionDescription = "ClimaticConditionDescription";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PHOTOSTABILITIES")]
	public partial class Photostability
	{
		private Decimal _photostabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "PHOTOSTABILITY_ID", ColumnName ="PHOTOSTABILITY_ID", BaseColumnName ="PHOTOSTABILITY_ID", BaseTableName = "PHOTOSTABILITIES" )]		public Decimal PhotostabilityId 
		{ 
		    get { return _photostabilityId; } 
			set 
			{
			    _photostabilityId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "PHOTOSTABILITIES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "PHOTOSTABILITIES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "PHOTOSTABILITIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "PHOTOSTABILITIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "PHOTOSTABILITIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _modifiedBy;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "PHOTOSTABILITIES" )]		public String ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class PhotostabilityRepository : Repository<Photostability> 
	{
		public PhotostabilityRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Photostability Get(string projectionName, System.Decimal photostabilityId)
		{
			return ((IRepository<Photostability>)this).Get(projectionName, photostabilityId, FetchMode.UseIdentityMap);
		}

		public Photostability Get(string projectionName, System.Decimal photostabilityId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Photostability>)this).Get(projectionName, photostabilityId, fetchMode);
		}

		public Photostability Get(Projection projection, System.Decimal photostabilityId)
		{
			return ((IRepository<Photostability>)this).Get(projection, photostabilityId, FetchMode.UseIdentityMap);
		}

		public Photostability Get(Projection projection, System.Decimal photostabilityId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Photostability>)this).Get(projection, photostabilityId, fetchMode);
		}

		public Photostability Get(string projectionName, System.Decimal photostabilityId, params string[] fields)
		{
			return ((IRepository<Photostability>)this).Get(projectionName, photostabilityId, fields);
		}

		public Photostability Get(Projection projection, System.Decimal photostabilityId, params string[] fields)
		{
			return ((IRepository<Photostability>)this).Get(projection, photostabilityId, fields);
		}

		public bool Delete(System.Decimal photostabilityId)
		{
			var entity = new Photostability { PhotostabilityId = photostabilityId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PhotostabilityFields
	{
		public const string PhotostabilityId = "PhotostabilityId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PHARMACOVIGILANCE")]
	public partial class Pharmacovigilance
	{
		private Decimal _pharmacovigilanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "PHARMACOVIGILANCE_ID", ColumnName ="PHARMACOVIGILANCE_ID", BaseColumnName ="PHARMACOVIGILANCE_ID", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal PharmacovigilanceId 
		{ 
		    get { return _pharmacovigilanceId; } 
			set 
			{
			    _pharmacovigilanceId = value;
			}
        }

		private Decimal? _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal? DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _qualifiedPerson;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="QUALIFIED_PERSON", BaseColumnName ="QUALIFIED_PERSON", BaseTableName = "PHARMACOVIGILANCE" )]		public String QualifiedPerson 
		{ 
		    get { return _qualifiedPerson; } 
			set 
			{
			    _qualifiedPerson = value;
			}
        }

		private String _qppvCode;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="QPPV_CODE", BaseColumnName ="QPPV_CODE", BaseTableName = "PHARMACOVIGILANCE" )]		public String QppvCode 
		{ 
		    get { return _qppvCode; } 
			set 
			{
			    _qppvCode = value;
			}
        }

		private String _qppvMail;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="QPPV_MAIL", BaseColumnName ="QPPV_MAIL", BaseTableName = "PHARMACOVIGILANCE" )]		public String QppvMail 
		{ 
		    get { return _qppvMail; } 
			set 
			{
			    _qppvMail = value;
			}
        }

		private String _qppvPhoneNumber;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="QPPV_PHONE_NUMBER", BaseColumnName ="QPPV_PHONE_NUMBER", BaseTableName = "PHARMACOVIGILANCE" )]		public String QppvPhoneNumber 
		{ 
		    get { return _qppvPhoneNumber; } 
			set 
			{
			    _qppvPhoneNumber = value;
			}
        }

		private String _systemMasterFile;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="SYSTEM_MASTER_FILE", BaseColumnName ="SYSTEM_MASTER_FILE", BaseTableName = "PHARMACOVIGILANCE" )]		public String SystemMasterFile 
		{ 
		    get { return _systemMasterFile; } 
			set 
			{
			    _systemMasterFile = value;
			}
        }

		private String _evCodePsmf;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="EV_CODE_PSMF", BaseColumnName ="EV_CODE_PSMF", BaseTableName = "PHARMACOVIGILANCE" )]		public String EvCodePsmf 
		{ 
		    get { return _evCodePsmf; } 
			set 
			{
			    _evCodePsmf = value;
			}
        }

		private Decimal? _holderPsmfId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="HOLDER_PSMF_ID", BaseColumnName ="HOLDER_PSMF_ID", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal? HolderPsmfId 
		{ 
		    get { return _holderPsmfId; } 
			set 
			{
			    _holderPsmfId = value;
			}
        }

		private Decimal? _locationPsmf;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LOCATION_PSMF", BaseColumnName ="LOCATION_PSMF", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal? LocationPsmf 
		{ 
		    get { return _locationPsmf; } 
			set 
			{
			    _locationPsmf = value;
			}
        }

		private String _versionSummaryPsmf;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="VERSION_SUMMARY_PSMF", BaseColumnName ="VERSION_SUMMARY_PSMF", BaseTableName = "PHARMACOVIGILANCE" )]		public String VersionSummaryPsmf 
		{ 
		    get { return _versionSummaryPsmf; } 
			set 
			{
			    _versionSummaryPsmf = value;
			}
        }

		private DateTime? _authorisationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="AUTHORISATION_DATE", BaseColumnName ="AUTHORISATION_DATE", BaseTableName = "PHARMACOVIGILANCE" )]		public DateTime? AuthorisationDate 
		{ 
		    get { return _authorisationDate; } 
			set 
			{
			    _authorisationDate = value;
			}
        }

		private Decimal? _spontaneousAdrReceptionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SPONTANEOUS_ADR_RECEPTION_ID", BaseColumnName ="SPONTANEOUS_ADR_RECEPTION_ID", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal? SpontaneousAdrReceptionId 
		{ 
		    get { return _spontaneousAdrReceptionId; } 
			set 
			{
			    _spontaneousAdrReceptionId = value;
			}
        }

		private Decimal? _regulatoryAdrReceptionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="REGULATORY_ADR_RECEPTION_ID", BaseColumnName ="REGULATORY_ADR_RECEPTION_ID", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal? RegulatoryAdrReceptionId 
		{ 
		    get { return _regulatoryAdrReceptionId; } 
			set 
			{
			    _regulatoryAdrReceptionId = value;
			}
        }

		private String _otherPsmf;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="OTHER_PSMF", BaseColumnName ="OTHER_PSMF", BaseTableName = "PHARMACOVIGILANCE" )]		public String OtherPsmf 
		{ 
		    get { return _otherPsmf; } 
			set 
			{
			    _otherPsmf = value;
			}
        }

		private Decimal? _psurPreparedById;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PSUR_PREPARED_BY_ID", BaseColumnName ="PSUR_PREPARED_BY_ID", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal? PsurPreparedById 
		{ 
		    get { return _psurPreparedById; } 
			set 
			{
			    _psurPreparedById = value;
			}
        }

		private Decimal? _psurPreparedNormonTp;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PSUR_PREPARED_NORMON_TP", BaseColumnName ="PSUR_PREPARED_NORMON_TP", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal? PsurPreparedNormonTp 
		{ 
		    get { return _psurPreparedNormonTp; } 
			set 
			{
			    _psurPreparedNormonTp = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "PHARMACOVIGILANCE" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "PHARMACOVIGILANCE" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _isDossierBound;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_BOUND", BaseColumnName ="IS_DOSSIER_BOUND", BaseTableName = "PHARMACOVIGILANCE" )]		public String IsDossierBound 
		{ 
		    get { return _isDossierBound; } 
			set 
			{
			    _isDossierBound = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID", BaseColumnName ="MEDICINAL_PRODUCT_ID", BaseTableName = "PHARMACOVIGILANCE" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private Decimal? _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_ID" )]		public Decimal? DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }


	}

	public partial class PharmacovigilanceRepository : Repository<Pharmacovigilance> 
	{
		public PharmacovigilanceRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Pharmacovigilance Get(string projectionName, System.Decimal pharmacovigilanceId)
		{
			return ((IRepository<Pharmacovigilance>)this).Get(projectionName, pharmacovigilanceId, FetchMode.UseIdentityMap);
		}

		public Pharmacovigilance Get(string projectionName, System.Decimal pharmacovigilanceId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Pharmacovigilance>)this).Get(projectionName, pharmacovigilanceId, fetchMode);
		}

		public Pharmacovigilance Get(Projection projection, System.Decimal pharmacovigilanceId)
		{
			return ((IRepository<Pharmacovigilance>)this).Get(projection, pharmacovigilanceId, FetchMode.UseIdentityMap);
		}

		public Pharmacovigilance Get(Projection projection, System.Decimal pharmacovigilanceId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Pharmacovigilance>)this).Get(projection, pharmacovigilanceId, fetchMode);
		}

		public Pharmacovigilance Get(string projectionName, System.Decimal pharmacovigilanceId, params string[] fields)
		{
			return ((IRepository<Pharmacovigilance>)this).Get(projectionName, pharmacovigilanceId, fields);
		}

		public Pharmacovigilance Get(Projection projection, System.Decimal pharmacovigilanceId, params string[] fields)
		{
			return ((IRepository<Pharmacovigilance>)this).Get(projection, pharmacovigilanceId, fields);
		}

		public bool Delete(System.Decimal pharmacovigilanceId)
		{
			var entity = new Pharmacovigilance { PharmacovigilanceId = pharmacovigilanceId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PharmacovigilanceFields
	{
		public const string PharmacovigilanceId = "PharmacovigilanceId";
		public const string DossierCountryId = "DossierCountryId";
		public const string QualifiedPerson = "QualifiedPerson";
		public const string QppvCode = "QppvCode";
		public const string QppvMail = "QppvMail";
		public const string QppvPhoneNumber = "QppvPhoneNumber";
		public const string SystemMasterFile = "SystemMasterFile";
		public const string EvCodePsmf = "EvCodePsmf";
		public const string HolderPsmfId = "HolderPsmfId";
		public const string LocationPsmf = "LocationPsmf";
		public const string VersionSummaryPsmf = "VersionSummaryPsmf";
		public const string AuthorisationDate = "AuthorisationDate";
		public const string SpontaneousAdrReceptionId = "SpontaneousAdrReceptionId";
		public const string RegulatoryAdrReceptionId = "RegulatoryAdrReceptionId";
		public const string OtherPsmf = "OtherPsmf";
		public const string PsurPreparedById = "PsurPreparedById";
		public const string PsurPreparedNormonTp = "PsurPreparedNormonTp";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string IsDossierBound = "IsDossierBound";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string DossierId = "DossierId";
		public const string CountryName = "CountryName";
		public const string TwoLettersCode = "TwoLettersCode";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_DOSSIERS")]
	public partial class MpDossier
	{
		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID", BaseColumnName ="MEDICINAL_PRODUCT_ID", BaseTableName = "MP_DOSSIERS" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "MP_DOSSIERS" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_DOSSIERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_DOSSIERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_DOSSIERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_DOSSIERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_DOSSIER_ID", ColumnName ="MP_DOSSIER_ID", BaseColumnName ="MP_DOSSIER_ID", BaseTableName = "MP_DOSSIERS" )]		public Decimal MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }

		private Decimal? _mpDevelopmentId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MP_DEVELOPMENT_ID", BaseColumnName ="MP_DEVELOPMENT_ID", BaseTableName = "MP_DOSSIERS" )]		public Decimal? MpDevelopmentId 
		{ 
		    get { return _mpDevelopmentId; } 
			set 
			{
			    _mpDevelopmentId = value;
			}
        }

		private Decimal? _mpFormulationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MP_FORMULATION_ID", BaseColumnName ="MP_FORMULATION_ID", BaseTableName = "MP_DOSSIERS" )]		public Decimal? MpFormulationId 
		{ 
		    get { return _mpFormulationId; } 
			set 
			{
			    _mpFormulationId = value;
			}
        }

		private String _processType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="PROCESS_TYPE", BaseColumnName ="PROCESS_TYPE", BaseTableName = "MP_DOSSIERS" )]		public String ProcessType 
		{ 
		    get { return _processType; } 
			set 
			{
			    _processType = value;
			}
        }

		private String _isFractionabilityStudy;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FRACTIONABILITY_STUDY", BaseColumnName ="IS_FRACTIONABILITY_STUDY", BaseTableName = "MP_DOSSIERS" )]		public String IsFractionabilityStudy 
		{ 
		    get { return _isFractionabilityStudy; } 
			set 
			{
			    _isFractionabilityStudy = value;
			}
        }

		private String _batchSize;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="BATCH_SIZE", BaseColumnName ="BATCH_SIZE", BaseTableName = "MP_DOSSIERS" )]		public String BatchSize 
		{ 
		    get { return _batchSize; } 
			set 
			{
			    _batchSize = value;
			}
        }

		private String _batchNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="BATCH_NUMBER", BaseColumnName ="BATCH_NUMBER", BaseTableName = "MP_DOSSIERS" )]		public String BatchNumber 
		{ 
		    get { return _batchNumber; } 
			set 
			{
			    _batchNumber = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "MP_DOSSIERS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private String _rossCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ROSS_CODE" )]		public String RossCode 
		{ 
		    get { return _rossCode; } 
			set 
			{
			    _rossCode = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _authorisationProcedureValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="AUTHORISATION_PROCEDURE_VALUE" )]		public String AuthorisationProcedureValue 
		{ 
		    get { return _authorisationProcedureValue; } 
			set 
			{
			    _authorisationProcedureValue = value;
			}
        }

		private String _mpRossCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MP_ROSS_CODE" )]		public String MpRossCode 
		{ 
		    get { return _mpRossCode; } 
			set 
			{
			    _mpRossCode = value;
			}
        }

		private String _medicinalProductName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="MEDICINAL_PRODUCT_NAME" )]		public String MedicinalProductName 
		{ 
		    get { return _medicinalProductName; } 
			set 
			{
			    _medicinalProductName = value;
			}
        }

		private String _pharmaceuticalDoseFormValue;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PHARMACEUTICAL_DOSE_FORM_VALUE" )]		public String PharmaceuticalDoseFormValue 
		{ 
		    get { return _pharmaceuticalDoseFormValue; } 
			set 
			{
			    _pharmaceuticalDoseFormValue = value;
			}
        }

		private String _developmentTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DEVELOPMENT_TYPE_NAME" )]		public String DevelopmentTypeName 
		{ 
		    get { return _developmentTypeName; } 
			set 
			{
			    _developmentTypeName = value;
			}
        }

		private String _groupName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUP_NAME" )]		public String GroupName 
		{ 
		    get { return _groupName; } 
			set 
			{
			    _groupName = value;
			}
        }

		private String _responsibleName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="RESPONSIBLE_NAME" )]		public String ResponsibleName 
		{ 
		    get { return _responsibleName; } 
			set 
			{
			    _responsibleName = value;
			}
        }

		private String _legaBasisValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="LEGA_BASIS_VALUE" )]		public String LegaBasisValue 
		{ 
		    get { return _legaBasisValue; } 
			set 
			{
			    _legaBasisValue = value;
			}
        }

		private Decimal _mktAuthProdedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MKT_AUTH_PRODEDURE_ID" )]		public Decimal MktAuthProdedureId 
		{ 
		    get { return _mktAuthProdedureId; } 
			set 
			{
			    _mktAuthProdedureId = value;
			}
        }

		private Decimal? _includedMods;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="INCLUDED_MODS" )]		public Decimal? IncludedMods 
		{ 
		    get { return _includedMods; } 
			set 
			{
			    _includedMods = value;
			}
        }


	}

	public partial class MpDossierRepository : Repository<MpDossier> 
	{
		public MpDossierRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpDossier Get(string projectionName, System.Decimal mpDossierId)
		{
			return ((IRepository<MpDossier>)this).Get(projectionName, mpDossierId, FetchMode.UseIdentityMap);
		}

		public MpDossier Get(string projectionName, System.Decimal mpDossierId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpDossier>)this).Get(projectionName, mpDossierId, fetchMode);
		}

		public MpDossier Get(Projection projection, System.Decimal mpDossierId)
		{
			return ((IRepository<MpDossier>)this).Get(projection, mpDossierId, FetchMode.UseIdentityMap);
		}

		public MpDossier Get(Projection projection, System.Decimal mpDossierId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpDossier>)this).Get(projection, mpDossierId, fetchMode);
		}

		public MpDossier Get(string projectionName, System.Decimal mpDossierId, params string[] fields)
		{
			return ((IRepository<MpDossier>)this).Get(projectionName, mpDossierId, fields);
		}

		public MpDossier Get(Projection projection, System.Decimal mpDossierId, params string[] fields)
		{
			return ((IRepository<MpDossier>)this).Get(projection, mpDossierId, fields);
		}

		public bool Delete(System.Decimal mpDossierId)
		{
			var entity = new MpDossier { MpDossierId = mpDossierId };
			return this.Delete(entity);
		}

		
		public void DeleteDossierMp(Decimal? pId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteDossierMpProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "P_ID"].Value = pId == null ? (object) DBNull.Value : pId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class MpDossierFields
	{
		public const string MedicinalProductId = "MedicinalProductId";
		public const string DossierId = "DossierId";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string MpDossierId = "MpDossierId";
		public const string MpDevelopmentId = "MpDevelopmentId";
		public const string MpFormulationId = "MpFormulationId";
		public const string ProcessType = "ProcessType";
		public const string IsFractionabilityStudy = "IsFractionabilityStudy";
		public const string BatchSize = "BatchSize";
		public const string BatchNumber = "BatchNumber";
		public const string Comments = "Comments";
		public const string RossCode = "RossCode";
		public const string ProductName = "ProductName";
		public const string AuthorisationProcedureValue = "AuthorisationProcedureValue";
		public const string MpRossCode = "MpRossCode";
		public const string MedicinalProductName = "MedicinalProductName";
		public const string PharmaceuticalDoseFormValue = "PharmaceuticalDoseFormValue";
		public const string DevelopmentTypeName = "DevelopmentTypeName";
		public const string GroupName = "GroupName";
		public const string ResponsibleName = "ResponsibleName";
		public const string LegaBasisValue = "LegaBasisValue";
		public const string MktAuthProdedureId = "MktAuthProdedureId";
		public const string IncludedMods = "IncludedMods";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="AGREEMENT_STATUSES")]
	public partial class AgreementStatus
	{
		private Decimal _agreementStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "AGREEMENT_STATUS_ID", ColumnName ="AGREEMENT_STATUS_ID", BaseColumnName ="AGREEMENT_STATUS_ID", BaseTableName = "AGREEMENT_STATUSES" )]		public Decimal AgreementStatusId 
		{ 
		    get { return _agreementStatusId; } 
			set 
			{
			    _agreementStatusId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "AGREEMENT_STATUSES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "AGREEMENT_STATUSES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "AGREEMENT_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "AGREEMENT_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "AGREEMENT_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "AGREEMENT_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class AgreementStatusRepository : Repository<AgreementStatus> 
	{
		public AgreementStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AgreementStatus Get(string projectionName, System.Decimal agreementStatusId)
		{
			return ((IRepository<AgreementStatus>)this).Get(projectionName, agreementStatusId, FetchMode.UseIdentityMap);
		}

		public AgreementStatus Get(string projectionName, System.Decimal agreementStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementStatus>)this).Get(projectionName, agreementStatusId, fetchMode);
		}

		public AgreementStatus Get(Projection projection, System.Decimal agreementStatusId)
		{
			return ((IRepository<AgreementStatus>)this).Get(projection, agreementStatusId, FetchMode.UseIdentityMap);
		}

		public AgreementStatus Get(Projection projection, System.Decimal agreementStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementStatus>)this).Get(projection, agreementStatusId, fetchMode);
		}

		public AgreementStatus Get(string projectionName, System.Decimal agreementStatusId, params string[] fields)
		{
			return ((IRepository<AgreementStatus>)this).Get(projectionName, agreementStatusId, fields);
		}

		public AgreementStatus Get(Projection projection, System.Decimal agreementStatusId, params string[] fields)
		{
			return ((IRepository<AgreementStatus>)this).Get(projection, agreementStatusId, fields);
		}

		public bool Delete(System.Decimal agreementStatusId)
		{
			var entity = new AgreementStatus { AgreementStatusId = agreementStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AgreementStatusFields
	{
		public const string AgreementStatusId = "AgreementStatusId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RISK_MANAGEMENT_PLANS")]
	public partial class RiskManagementPlan
	{
		private Decimal _riskManagementPlanId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RISK_MANAGEMENT_PLAN_ID", ColumnName ="RISK_MANAGEMENT_PLAN_ID", BaseColumnName ="RISK_MANAGEMENT_PLAN_ID", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public Decimal RiskManagementPlanId 
		{ 
		    get { return _riskManagementPlanId; } 
			set 
			{
			    _riskManagementPlanId = value;
			}
        }

		private Decimal _pharmacovigilanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="PHARMACOVIGILANCE_ID", BaseColumnName ="PHARMACOVIGILANCE_ID", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public Decimal PharmacovigilanceId 
		{ 
		    get { return _pharmacovigilanceId; } 
			set 
			{
			    _pharmacovigilanceId = value;
			}
        }

		private String _versionRmp;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="VERSION_RMP", BaseColumnName ="VERSION_RMP", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public String VersionRmp 
		{ 
		    get { return _versionRmp; } 
			set 
			{
			    _versionRmp = value;
			}
        }

		private DateTime _signOffFinalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="SIGN_OFF_FINAL_DATE", BaseColumnName ="SIGN_OFF_FINAL_DATE", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public DateTime SignOffFinalDate 
		{ 
		    get { return _signOffFinalDate; } 
			set 
			{
			    _signOffFinalDate = value;
			}
        }

		private DateTime? _rmpReportSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RMP_REPORT_SUBMISSION_DATE", BaseColumnName ="RMP_REPORT_SUBMISSION_DATE", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public DateTime? RmpReportSubmissionDate 
		{ 
		    get { return _rmpReportSubmissionDate; } 
			set 
			{
			    _rmpReportSubmissionDate = value;
			}
        }

		private DateTime? _approvalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="APPROVAL_DATE", BaseColumnName ="APPROVAL_DATE", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public DateTime? ApprovalDate 
		{ 
		    get { return _approvalDate; } 
			set 
			{
			    _approvalDate = value;
			}
        }

		private String _additionalMonitoring;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="ADDITIONAL_MONITORING", BaseColumnName ="ADDITIONAL_MONITORING", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public String AdditionalMonitoring 
		{ 
		    get { return _additionalMonitoring; } 
			set 
			{
			    _additionalMonitoring = value;
			}
        }

		private String _isLastApprovedVersion;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_LAST_APPROVED_VERSION", BaseColumnName ="IS_LAST_APPROVED_VERSION", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public String IsLastApprovedVersion 
		{ 
		    get { return _isLastApprovedVersion; } 
			set 
			{
			    _isLastApprovedVersion = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _reason;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="REASON", BaseColumnName ="REASON", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public String Reason 
		{ 
		    get { return _reason; } 
			set 
			{
			    _reason = value;
			}
        }

		private DateTime? _raDueDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RA_DUE_DATE", BaseColumnName ="RA_DUE_DATE", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public DateTime? RaDueDate 
		{ 
		    get { return _raDueDate; } 
			set 
			{
			    _raDueDate = value;
			}
        }

		private DateTime? _raSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RA_SUBMISSION_DATE", BaseColumnName ="RA_SUBMISSION_DATE", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public DateTime? RaSubmissionDate 
		{ 
		    get { return _raSubmissionDate; } 
			set 
			{
			    _raSubmissionDate = value;
			}
        }

		private Decimal? _notApprovedReasonId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="NOT_APPROVED_REASON_ID", BaseColumnName ="NOT_APPROVED_REASON_ID", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public Decimal? NotApprovedReasonId 
		{ 
		    get { return _notApprovedReasonId; } 
			set 
			{
			    _notApprovedReasonId = value;
			}
        }

		private Decimal? _rmpStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RMP_STATUS_ID", BaseColumnName ="RMP_STATUS_ID", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public Decimal? RmpStatusId 
		{ 
		    get { return _rmpStatusId; } 
			set 
			{
			    _rmpStatusId = value;
			}
        }

		private String _isRmpSubmissionDateNa;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_RMP_SUBMISSION_DATE_NA", BaseColumnName ="IS_RMP_SUBMISSION_DATE_NA", BaseTableName = "RISK_MANAGEMENT_PLANS" )]		public String IsRmpSubmissionDateNa 
		{ 
		    get { return _isRmpSubmissionDateNa; } 
			set 
			{
			    _isRmpSubmissionDateNa = value;
			}
        }

		private String _rmpStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="RMP_STATUS_NAME" )]		public String RmpStatusName 
		{ 
		    get { return _rmpStatusName; } 
			set 
			{
			    _rmpStatusName = value;
			}
        }

		private String _notApprovedReasonName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NOT_APPROVED_REASON_NAME" )]		public String NotApprovedReasonName 
		{ 
		    get { return _notApprovedReasonName; } 
			set 
			{
			    _notApprovedReasonName = value;
			}
        }


	}

	public partial class RiskManagementPlanRepository : Repository<RiskManagementPlan> 
	{
		public RiskManagementPlanRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RiskManagementPlan Get(string projectionName, System.Decimal riskManagementPlanId)
		{
			return ((IRepository<RiskManagementPlan>)this).Get(projectionName, riskManagementPlanId, FetchMode.UseIdentityMap);
		}

		public RiskManagementPlan Get(string projectionName, System.Decimal riskManagementPlanId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RiskManagementPlan>)this).Get(projectionName, riskManagementPlanId, fetchMode);
		}

		public RiskManagementPlan Get(Projection projection, System.Decimal riskManagementPlanId)
		{
			return ((IRepository<RiskManagementPlan>)this).Get(projection, riskManagementPlanId, FetchMode.UseIdentityMap);
		}

		public RiskManagementPlan Get(Projection projection, System.Decimal riskManagementPlanId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RiskManagementPlan>)this).Get(projection, riskManagementPlanId, fetchMode);
		}

		public RiskManagementPlan Get(string projectionName, System.Decimal riskManagementPlanId, params string[] fields)
		{
			return ((IRepository<RiskManagementPlan>)this).Get(projectionName, riskManagementPlanId, fields);
		}

		public RiskManagementPlan Get(Projection projection, System.Decimal riskManagementPlanId, params string[] fields)
		{
			return ((IRepository<RiskManagementPlan>)this).Get(projection, riskManagementPlanId, fields);
		}

		public bool Delete(System.Decimal riskManagementPlanId)
		{
			var entity = new RiskManagementPlan { RiskManagementPlanId = riskManagementPlanId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RiskManagementPlanFields
	{
		public const string RiskManagementPlanId = "RiskManagementPlanId";
		public const string PharmacovigilanceId = "PharmacovigilanceId";
		public const string VersionRmp = "VersionRmp";
		public const string SignOffFinalDate = "SignOffFinalDate";
		public const string RmpReportSubmissionDate = "RmpReportSubmissionDate";
		public const string ApprovalDate = "ApprovalDate";
		public const string AdditionalMonitoring = "AdditionalMonitoring";
		public const string IsLastApprovedVersion = "IsLastApprovedVersion";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string Reason = "Reason";
		public const string RaDueDate = "RaDueDate";
		public const string RaSubmissionDate = "RaSubmissionDate";
		public const string NotApprovedReasonId = "NotApprovedReasonId";
		public const string RmpStatusId = "RmpStatusId";
		public const string IsRmpSubmissionDateNa = "IsRmpSubmissionDateNa";
		public const string RmpStatusName = "RmpStatusName";
		public const string NotApprovedReasonName = "NotApprovedReasonName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="QUALITY_REFERENCES")]
	public partial class QualityReference
	{
		private Decimal _qualityReferenceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "QUALITY_REFERENCE_ID", ColumnName ="QUALITY_REFERENCE_ID", BaseColumnName ="QUALITY_REFERENCE_ID", BaseTableName = "QUALITY_REFERENCES" )]		public Decimal QualityReferenceId 
		{ 
		    get { return _qualityReferenceId; } 
			set 
			{
			    _qualityReferenceId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "QUALITY_REFERENCES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "QUALITY_REFERENCES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "QUALITY_REFERENCES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "QUALITY_REFERENCES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "QUALITY_REFERENCES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "QUALITY_REFERENCES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "QUALITY_REFERENCES" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class QualityReferenceRepository : Repository<QualityReference> 
	{
		public QualityReferenceRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public QualityReference Get(string projectionName, System.Decimal qualityReferenceId)
		{
			return ((IRepository<QualityReference>)this).Get(projectionName, qualityReferenceId, FetchMode.UseIdentityMap);
		}

		public QualityReference Get(string projectionName, System.Decimal qualityReferenceId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<QualityReference>)this).Get(projectionName, qualityReferenceId, fetchMode);
		}

		public QualityReference Get(Projection projection, System.Decimal qualityReferenceId)
		{
			return ((IRepository<QualityReference>)this).Get(projection, qualityReferenceId, FetchMode.UseIdentityMap);
		}

		public QualityReference Get(Projection projection, System.Decimal qualityReferenceId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<QualityReference>)this).Get(projection, qualityReferenceId, fetchMode);
		}

		public QualityReference Get(string projectionName, System.Decimal qualityReferenceId, params string[] fields)
		{
			return ((IRepository<QualityReference>)this).Get(projectionName, qualityReferenceId, fields);
		}

		public QualityReference Get(Projection projection, System.Decimal qualityReferenceId, params string[] fields)
		{
			return ((IRepository<QualityReference>)this).Get(projection, qualityReferenceId, fields);
		}

		public bool Delete(System.Decimal qualityReferenceId)
		{
			var entity = new QualityReference { QualityReferenceId = qualityReferenceId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class QualityReferenceFields
	{
		public const string QualityReferenceId = "QualityReferenceId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DMFCEP_QUALITY_REFERENCES")]
	public partial class DmfCepVersionQR
	{
		private Decimal _dmfcepQrId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DMFCEP_QR_ID", ColumnName ="DMFCEP_QR_ID", BaseColumnName ="DMFCEP_QR_ID", BaseTableName = "DMFCEP_QUALITY_REFERENCES" )]		public Decimal DmfcepQrId 
		{ 
		    get { return _dmfcepQrId; } 
			set 
			{
			    _dmfcepQrId = value;
			}
        }

		private Decimal _dmfcepVersionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DMFCEP_VERSION_ID", BaseColumnName ="DMFCEP_VERSION_ID", BaseTableName = "DMFCEP_QUALITY_REFERENCES" )]		public Decimal DmfcepVersionId 
		{ 
		    get { return _dmfcepVersionId; } 
			set 
			{
			    _dmfcepVersionId = value;
			}
        }

		private Decimal _qualityReferenceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="QUALITY_REFERENCE_ID", BaseColumnName ="QUALITY_REFERENCE_ID", BaseTableName = "DMFCEP_QUALITY_REFERENCES" )]		public Decimal QualityReferenceId 
		{ 
		    get { return _qualityReferenceId; } 
			set 
			{
			    _qualityReferenceId = value;
			}
        }

		private String _otherDescription;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="OTHER_DESCRIPTION", BaseColumnName ="OTHER_DESCRIPTION", BaseTableName = "DMFCEP_QUALITY_REFERENCES" )]		public String OtherDescription 
		{ 
		    get { return _otherDescription; } 
			set 
			{
			    _otherDescription = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DMFCEP_QUALITY_REFERENCES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DMFCEP_QUALITY_REFERENCES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DMFCEP_QUALITY_REFERENCES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DMFCEP_QUALITY_REFERENCES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "DMFCEP_QUALITY_REFERENCES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private Decimal? _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal? ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }


	}

	public partial class DmfCepVersionQRRepository : Repository<DmfCepVersionQR> 
	{
		public DmfCepVersionQRRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DmfCepVersionQR Get(string projectionName, System.Decimal dmfcepQrId)
		{
			return ((IRepository<DmfCepVersionQR>)this).Get(projectionName, dmfcepQrId, FetchMode.UseIdentityMap);
		}

		public DmfCepVersionQR Get(string projectionName, System.Decimal dmfcepQrId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DmfCepVersionQR>)this).Get(projectionName, dmfcepQrId, fetchMode);
		}

		public DmfCepVersionQR Get(Projection projection, System.Decimal dmfcepQrId)
		{
			return ((IRepository<DmfCepVersionQR>)this).Get(projection, dmfcepQrId, FetchMode.UseIdentityMap);
		}

		public DmfCepVersionQR Get(Projection projection, System.Decimal dmfcepQrId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DmfCepVersionQR>)this).Get(projection, dmfcepQrId, fetchMode);
		}

		public DmfCepVersionQR Get(string projectionName, System.Decimal dmfcepQrId, params string[] fields)
		{
			return ((IRepository<DmfCepVersionQR>)this).Get(projectionName, dmfcepQrId, fields);
		}

		public DmfCepVersionQR Get(Projection projection, System.Decimal dmfcepQrId, params string[] fields)
		{
			return ((IRepository<DmfCepVersionQR>)this).Get(projection, dmfcepQrId, fields);
		}

		public bool Delete(System.Decimal dmfcepQrId)
		{
			var entity = new DmfCepVersionQR { DmfcepQrId = dmfcepQrId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DmfCepVersionQRFields
	{
		public const string DmfcepQrId = "DmfcepQrId";
		public const string DmfcepVersionId = "DmfcepVersionId";
		public const string QualityReferenceId = "QualityReferenceId";
		public const string OtherDescription = "OtherDescription";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string Name = "Name";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PERIODIC_SAFETY_UPDATE_REPORTS")]
	public partial class PeriodicSafetyUpdateReport
	{
		private Decimal _psurId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "PSUR_ID", ColumnName ="PSUR_ID", BaseColumnName ="PSUR_ID", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public Decimal PsurId 
		{ 
		    get { return _psurId; } 
			set 
			{
			    _psurId = value;
			}
        }

		private Decimal _pharmacovigilanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="PHARMACOVIGILANCE_ID", BaseColumnName ="PHARMACOVIGILANCE_ID", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public Decimal PharmacovigilanceId 
		{ 
		    get { return _pharmacovigilanceId; } 
			set 
			{
			    _pharmacovigilanceId = value;
			}
        }

		private DateTime? _revisionCalendarDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REVISION_CALENDAR_DATE", BaseColumnName ="REVISION_CALENDAR_DATE", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public DateTime? RevisionCalendarDate 
		{ 
		    get { return _revisionCalendarDate; } 
			set 
			{
			    _revisionCalendarDate = value;
			}
        }

		private String _source;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="SOURCE", BaseColumnName ="SOURCE", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public String Source 
		{ 
		    get { return _source; } 
			set 
			{
			    _source = value;
			}
        }

		private String _isPsurRequired;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_PSUR_REQUIRED", BaseColumnName ="IS_PSUR_REQUIRED", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public String IsPsurRequired 
		{ 
		    get { return _isPsurRequired; } 
			set 
			{
			    _isPsurRequired = value;
			}
        }

		private String _frequency;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="FREQUENCY", BaseColumnName ="FREQUENCY", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public String Frequency 
		{ 
		    get { return _frequency; } 
			set 
			{
			    _frequency = value;
			}
        }

		private DateTime? _psurDataLock;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="PSUR_DATA_LOCK", BaseColumnName ="PSUR_DATA_LOCK", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public DateTime? PsurDataLock 
		{ 
		    get { return _psurDataLock; } 
			set 
			{
			    _psurDataLock = value;
			}
        }

		private DateTime? _nextDlp;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="NEXT_DLP", BaseColumnName ="NEXT_DLP", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public DateTime? NextDlp 
		{ 
		    get { return _nextDlp; } 
			set 
			{
			    _nextDlp = value;
			}
        }

		private String _isNextDlpApplicable;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NEXT_DLP_APPLICABLE", BaseColumnName ="IS_NEXT_DLP_APPLICABLE", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public String IsNextDlpApplicable 
		{ 
		    get { return _isNextDlpApplicable; } 
			set 
			{
			    _isNextDlpApplicable = value;
			}
        }

		private Decimal? _reportPreparedById;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="REPORT_PREPARED_BY_ID", BaseColumnName ="REPORT_PREPARED_BY_ID", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public Decimal? ReportPreparedById 
		{ 
		    get { return _reportPreparedById; } 
			set 
			{
			    _reportPreparedById = value;
			}
        }

		private Decimal? _reportPreparedNormonTpId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="REPORT_PREPARED_NORMON_TP_ID", BaseColumnName ="REPORT_PREPARED_NORMON_TP_ID", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public Decimal? ReportPreparedNormonTpId 
		{ 
		    get { return _reportPreparedNormonTpId; } 
			set 
			{
			    _reportPreparedNormonTpId = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _psusa;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PSUSA", BaseColumnName ="PSUSA", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public String Psusa 
		{ 
		    get { return _psusa; } 
			set 
			{
			    _psusa = value;
			}
        }

		private Decimal? _psurSrStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PSUR_SR_STATUS_ID", BaseColumnName ="PSUR_SR_STATUS_ID", BaseTableName = "PERIODIC_SAFETY_UPDATE_REPORTS" )]		public Decimal? PsurSrStatusId 
		{ 
		    get { return _psurSrStatusId; } 
			set 
			{
			    _psurSrStatusId = value;
			}
        }


	}

	public partial class PeriodicSafetyUpdateReportRepository : Repository<PeriodicSafetyUpdateReport> 
	{
		public PeriodicSafetyUpdateReportRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public PeriodicSafetyUpdateReport Get(string projectionName, System.Decimal psurId)
		{
			return ((IRepository<PeriodicSafetyUpdateReport>)this).Get(projectionName, psurId, FetchMode.UseIdentityMap);
		}

		public PeriodicSafetyUpdateReport Get(string projectionName, System.Decimal psurId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PeriodicSafetyUpdateReport>)this).Get(projectionName, psurId, fetchMode);
		}

		public PeriodicSafetyUpdateReport Get(Projection projection, System.Decimal psurId)
		{
			return ((IRepository<PeriodicSafetyUpdateReport>)this).Get(projection, psurId, FetchMode.UseIdentityMap);
		}

		public PeriodicSafetyUpdateReport Get(Projection projection, System.Decimal psurId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PeriodicSafetyUpdateReport>)this).Get(projection, psurId, fetchMode);
		}

		public PeriodicSafetyUpdateReport Get(string projectionName, System.Decimal psurId, params string[] fields)
		{
			return ((IRepository<PeriodicSafetyUpdateReport>)this).Get(projectionName, psurId, fields);
		}

		public PeriodicSafetyUpdateReport Get(Projection projection, System.Decimal psurId, params string[] fields)
		{
			return ((IRepository<PeriodicSafetyUpdateReport>)this).Get(projection, psurId, fields);
		}

		public bool Delete(System.Decimal psurId)
		{
			var entity = new PeriodicSafetyUpdateReport { PsurId = psurId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PeriodicSafetyUpdateReportFields
	{
		public const string PsurId = "PsurId";
		public const string PharmacovigilanceId = "PharmacovigilanceId";
		public const string RevisionCalendarDate = "RevisionCalendarDate";
		public const string Source = "Source";
		public const string IsPsurRequired = "IsPsurRequired";
		public const string Frequency = "Frequency";
		public const string PsurDataLock = "PsurDataLock";
		public const string NextDlp = "NextDlp";
		public const string IsNextDlpApplicable = "IsNextDlpApplicable";
		public const string ReportPreparedById = "ReportPreparedById";
		public const string ReportPreparedNormonTpId = "ReportPreparedNormonTpId";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string Psusa = "Psusa";
		public const string PsurSrStatusId = "PsurSrStatusId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PSUR_SUBMISSIONS")]
	public partial class PsurSubmission
	{
		private Decimal _psurSubmissionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "PSUR_SUBMISSION_ID", ColumnName ="PSUR_SUBMISSION_ID", BaseColumnName ="PSUR_SUBMISSION_ID", BaseTableName = "PSUR_SUBMISSIONS" )]		public Decimal PsurSubmissionId 
		{ 
		    get { return _psurSubmissionId; } 
			set 
			{
			    _psurSubmissionId = value;
			}
        }

		private Decimal _psurId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="PSUR_ID", BaseColumnName ="PSUR_ID", BaseTableName = "PSUR_SUBMISSIONS" )]		public Decimal PsurId 
		{ 
		    get { return _psurId; } 
			set 
			{
			    _psurId = value;
			}
        }

		private DateTime? _psurDataLock;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="PSUR_DATA_LOCK", BaseColumnName ="PSUR_DATA_LOCK", BaseTableName = "PSUR_SUBMISSIONS" )]		public DateTime? PsurDataLock 
		{ 
		    get { return _psurDataLock; } 
			set 
			{
			    _psurDataLock = value;
			}
        }

		private String _periodRecovered;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="PERIOD_RECOVERED", BaseColumnName ="PERIOD_RECOVERED", BaseTableName = "PSUR_SUBMISSIONS" )]		public String PeriodRecovered 
		{ 
		    get { return _periodRecovered; } 
			set 
			{
			    _periodRecovered = value;
			}
        }

		private DateTime? _psurSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="PSUR_SUBMISSION_DATE", BaseColumnName ="PSUR_SUBMISSION_DATE", BaseTableName = "PSUR_SUBMISSIONS" )]		public DateTime? PsurSubmissionDate 
		{ 
		    get { return _psurSubmissionDate; } 
			set 
			{
			    _psurSubmissionDate = value;
			}
        }

		private String _psurCode;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PSUR_CODE", BaseColumnName ="PSUR_CODE", BaseTableName = "PSUR_SUBMISSIONS" )]		public String PsurCode 
		{ 
		    get { return _psurCode; } 
			set 
			{
			    _psurCode = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "PSUR_SUBMISSIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "PSUR_SUBMISSIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "PSUR_SUBMISSIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "PSUR_SUBMISSIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class PsurSubmissionRepository : Repository<PsurSubmission> 
	{
		public PsurSubmissionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public PsurSubmission Get(string projectionName, System.Decimal psurSubmissionId)
		{
			return ((IRepository<PsurSubmission>)this).Get(projectionName, psurSubmissionId, FetchMode.UseIdentityMap);
		}

		public PsurSubmission Get(string projectionName, System.Decimal psurSubmissionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PsurSubmission>)this).Get(projectionName, psurSubmissionId, fetchMode);
		}

		public PsurSubmission Get(Projection projection, System.Decimal psurSubmissionId)
		{
			return ((IRepository<PsurSubmission>)this).Get(projection, psurSubmissionId, FetchMode.UseIdentityMap);
		}

		public PsurSubmission Get(Projection projection, System.Decimal psurSubmissionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PsurSubmission>)this).Get(projection, psurSubmissionId, fetchMode);
		}

		public PsurSubmission Get(string projectionName, System.Decimal psurSubmissionId, params string[] fields)
		{
			return ((IRepository<PsurSubmission>)this).Get(projectionName, psurSubmissionId, fields);
		}

		public PsurSubmission Get(Projection projection, System.Decimal psurSubmissionId, params string[] fields)
		{
			return ((IRepository<PsurSubmission>)this).Get(projection, psurSubmissionId, fields);
		}

		public bool Delete(System.Decimal psurSubmissionId)
		{
			var entity = new PsurSubmission { PsurSubmissionId = psurSubmissionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PsurSubmissionFields
	{
		public const string PsurSubmissionId = "PsurSubmissionId";
		public const string PsurId = "PsurId";
		public const string PsurDataLock = "PsurDataLock";
		public const string PeriodRecovered = "PeriodRecovered";
		public const string PsurSubmissionDate = "PsurSubmissionDate";
		public const string PsurCode = "PsurCode";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="API_MANUFACTURERS")]
	public partial class ApiManufacturer
	{
		private Decimal _apiManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "API_MANUFACTURER_ID", ColumnName ="API_MANUFACTURER_ID", BaseColumnName ="API_MANUFACTURER_ID", BaseTableName = "API_MANUFACTURERS" )]		public Decimal ApiManufacturerId 
		{ 
		    get { return _apiManufacturerId; } 
			set 
			{
			    _apiManufacturerId = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID", BaseColumnName ="ACTIVE_SUBSTANCE_ID", BaseTableName = "API_MANUFACTURERS" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private Decimal _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_ID", BaseColumnName ="MANUFACTURER_ID", BaseTableName = "API_MANUFACTURERS" )]		public Decimal ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "API_MANUFACTURERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "API_MANUFACTURERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "API_MANUFACTURERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "API_MANUFACTURERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private Decimal? _occurrences;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OCCURRENCES" )]		public Decimal? Occurrences 
		{ 
		    get { return _occurrences; } 
			set 
			{
			    _occurrences = value;
			}
        }

		private String _versionTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION_TYPE_NAME" )]		public String VersionTypeName 
		{ 
		    get { return _versionTypeName; } 
			set 
			{
			    _versionTypeName = value;
			}
        }

		private String _version;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION" )]		public String Version 
		{ 
		    get { return _version; } 
			set 
			{
			    _version = value;
			}
        }

		private DateTime? _versionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VERSION_DATE" )]		public DateTime? VersionDate 
		{ 
		    get { return _versionDate; } 
			set 
			{
			    _versionDate = value;
			}
        }

		private String _fullVersion;
		[DataMember]
		[SqlField(DbType.String, 271, ColumnName ="FULL_VERSION" )]		public String FullVersion 
		{ 
		    get { return _fullVersion; } 
			set 
			{
			    _fullVersion = value;
			}
        }


	}

	public partial class ApiManufacturerRepository : Repository<ApiManufacturer> 
	{
		public ApiManufacturerRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ApiManufacturer Get(string projectionName, System.Decimal apiManufacturerId)
		{
			return ((IRepository<ApiManufacturer>)this).Get(projectionName, apiManufacturerId, FetchMode.UseIdentityMap);
		}

		public ApiManufacturer Get(string projectionName, System.Decimal apiManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiManufacturer>)this).Get(projectionName, apiManufacturerId, fetchMode);
		}

		public ApiManufacturer Get(Projection projection, System.Decimal apiManufacturerId)
		{
			return ((IRepository<ApiManufacturer>)this).Get(projection, apiManufacturerId, FetchMode.UseIdentityMap);
		}

		public ApiManufacturer Get(Projection projection, System.Decimal apiManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiManufacturer>)this).Get(projection, apiManufacturerId, fetchMode);
		}

		public ApiManufacturer Get(string projectionName, System.Decimal apiManufacturerId, params string[] fields)
		{
			return ((IRepository<ApiManufacturer>)this).Get(projectionName, apiManufacturerId, fields);
		}

		public ApiManufacturer Get(Projection projection, System.Decimal apiManufacturerId, params string[] fields)
		{
			return ((IRepository<ApiManufacturer>)this).Get(projection, apiManufacturerId, fields);
		}

		public bool Delete(System.Decimal apiManufacturerId)
		{
			var entity = new ApiManufacturer { ApiManufacturerId = apiManufacturerId };
			return this.Delete(entity);
		}

		
		public void DeleteApiManufacturer(Decimal? apimanId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteApiManufacturerProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "APIMAN_ID"].Value = apimanId == null ? (object) DBNull.Value : apimanId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class ApiManufacturerFields
	{
		public const string ApiManufacturerId = "ApiManufacturerId";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string ManufacturerId = "ManufacturerId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string SubstanceName = "SubstanceName";
		public const string ManufacturerName = "ManufacturerName";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string Occurrences = "Occurrences";
		public const string VersionTypeName = "VersionTypeName";
		public const string Version = "Version";
		public const string VersionDate = "VersionDate";
		public const string FullVersion = "FullVersion";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="IMPLIED_MANUFACTURERS")]
	public partial class ImpliedManufacturer
	{
		private Decimal _impliedManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "IMPLIED_MANUFACTURER_ID", ColumnName ="IMPLIED_MANUFACTURER_ID", BaseColumnName ="IMPLIED_MANUFACTURER_ID", BaseTableName = "IMPLIED_MANUFACTURERS" )]		public Decimal ImpliedManufacturerId 
		{ 
		    get { return _impliedManufacturerId; } 
			set 
			{
			    _impliedManufacturerId = value;
			}
        }

		private Decimal _dmfcepVersionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DMFCEP_VERSION_ID", BaseColumnName ="DMFCEP_VERSION_ID", BaseTableName = "IMPLIED_MANUFACTURERS" )]		public Decimal DmfcepVersionId 
		{ 
		    get { return _dmfcepVersionId; } 
			set 
			{
			    _dmfcepVersionId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "IMPLIED_MANUFACTURERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "IMPLIED_MANUFACTURERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "IMPLIED_MANUFACTURERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "IMPLIED_MANUFACTURERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MANUFACTURER_ID", BaseColumnName ="MANUFACTURER_ID", BaseTableName = "IMPLIED_MANUFACTURERS" )]		public Decimal? ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private Decimal? _manufacturerAddressId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MANUFACTURER_ADDRESS_ID", BaseColumnName ="MANUFACTURER_ADDRESS_ID", BaseTableName = "IMPLIED_MANUFACTURERS" )]		public Decimal? ManufacturerAddressId 
		{ 
		    get { return _manufacturerAddressId; } 
			set 
			{
			    _manufacturerAddressId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _version;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION" )]		public String Version 
		{ 
		    get { return _version; } 
			set 
			{
			    _version = value;
			}
        }

		private String _fullName;
		[DataMember]
		[SqlField(DbType.String, 387, ColumnName ="FULL_NAME" )]		public String FullName 
		{ 
		    get { return _fullName; } 
			set 
			{
			    _fullName = value;
			}
        }


	}

	public partial class ImpliedManufacturerRepository : Repository<ImpliedManufacturer> 
	{
		public ImpliedManufacturerRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ImpliedManufacturer Get(string projectionName, System.Decimal impliedManufacturerId)
		{
			return ((IRepository<ImpliedManufacturer>)this).Get(projectionName, impliedManufacturerId, FetchMode.UseIdentityMap);
		}

		public ImpliedManufacturer Get(string projectionName, System.Decimal impliedManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ImpliedManufacturer>)this).Get(projectionName, impliedManufacturerId, fetchMode);
		}

		public ImpliedManufacturer Get(Projection projection, System.Decimal impliedManufacturerId)
		{
			return ((IRepository<ImpliedManufacturer>)this).Get(projection, impliedManufacturerId, FetchMode.UseIdentityMap);
		}

		public ImpliedManufacturer Get(Projection projection, System.Decimal impliedManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ImpliedManufacturer>)this).Get(projection, impliedManufacturerId, fetchMode);
		}

		public ImpliedManufacturer Get(string projectionName, System.Decimal impliedManufacturerId, params string[] fields)
		{
			return ((IRepository<ImpliedManufacturer>)this).Get(projectionName, impliedManufacturerId, fields);
		}

		public ImpliedManufacturer Get(Projection projection, System.Decimal impliedManufacturerId, params string[] fields)
		{
			return ((IRepository<ImpliedManufacturer>)this).Get(projection, impliedManufacturerId, fields);
		}

		public bool Delete(System.Decimal impliedManufacturerId)
		{
			var entity = new ImpliedManufacturer { ImpliedManufacturerId = impliedManufacturerId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ImpliedManufacturerFields
	{
		public const string ImpliedManufacturerId = "ImpliedManufacturerId";
		public const string DmfcepVersionId = "DmfcepVersionId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ManufacturerId = "ManufacturerId";
		public const string ManufacturerAddressId = "ManufacturerAddressId";
		public const string Name = "Name";
		public const string Address = "Address";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string SubstanceName = "SubstanceName";
		public const string Version = "Version";
		public const string FullName = "FullName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MANUFACTURER_FUNCTIONS")]
	public partial class ManufacturerFunction
	{
		private Decimal _manufacturerFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MANUFACTURER_FUNCTION_ID", ColumnName ="MANUFACTURER_FUNCTION_ID", BaseColumnName ="MANUFACTURER_FUNCTION_ID", BaseTableName = "MANUFACTURER_FUNCTIONS" )]		public Decimal ManufacturerFunctionId 
		{ 
		    get { return _manufacturerFunctionId; } 
			set 
			{
			    _manufacturerFunctionId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MANUFACTURER_FUNCTIONS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "MANUFACTURER_FUNCTIONS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MANUFACTURER_FUNCTIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MANUFACTURER_FUNCTIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MANUFACTURER_FUNCTIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MANUFACTURER_FUNCTIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isApiFunction;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_API_FUNCTION", BaseColumnName ="IS_API_FUNCTION", BaseTableName = "MANUFACTURER_FUNCTIONS" )]		public String IsApiFunction 
		{ 
		    get { return _isApiFunction; } 
			set 
			{
			    _isApiFunction = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "MANUFACTURER_FUNCTIONS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class ManufacturerFunctionRepository : Repository<ManufacturerFunction> 
	{
		public ManufacturerFunctionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ManufacturerFunction Get(string projectionName, System.Decimal manufacturerFunctionId)
		{
			return ((IRepository<ManufacturerFunction>)this).Get(projectionName, manufacturerFunctionId, FetchMode.UseIdentityMap);
		}

		public ManufacturerFunction Get(string projectionName, System.Decimal manufacturerFunctionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ManufacturerFunction>)this).Get(projectionName, manufacturerFunctionId, fetchMode);
		}

		public ManufacturerFunction Get(Projection projection, System.Decimal manufacturerFunctionId)
		{
			return ((IRepository<ManufacturerFunction>)this).Get(projection, manufacturerFunctionId, FetchMode.UseIdentityMap);
		}

		public ManufacturerFunction Get(Projection projection, System.Decimal manufacturerFunctionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ManufacturerFunction>)this).Get(projection, manufacturerFunctionId, fetchMode);
		}

		public ManufacturerFunction Get(string projectionName, System.Decimal manufacturerFunctionId, params string[] fields)
		{
			return ((IRepository<ManufacturerFunction>)this).Get(projectionName, manufacturerFunctionId, fields);
		}

		public ManufacturerFunction Get(Projection projection, System.Decimal manufacturerFunctionId, params string[] fields)
		{
			return ((IRepository<ManufacturerFunction>)this).Get(projection, manufacturerFunctionId, fields);
		}

		public bool Delete(System.Decimal manufacturerFunctionId)
		{
			var entity = new ManufacturerFunction { ManufacturerFunctionId = manufacturerFunctionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ManufacturerFunctionFields
	{
		public const string ManufacturerFunctionId = "ManufacturerFunctionId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsApiFunction = "IsApiFunction";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="IMPLIED_MANUFACTURER_FUNCTIONS")]
	public partial class ImpliedManufacturerFunction
	{
		private Decimal _imanFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "IMAN_FUNCTION_ID", ColumnName ="IMAN_FUNCTION_ID", BaseColumnName ="IMAN_FUNCTION_ID", BaseTableName = "IMPLIED_MANUFACTURER_FUNCTIONS" )]		public Decimal ImanFunctionId 
		{ 
		    get { return _imanFunctionId; } 
			set 
			{
			    _imanFunctionId = value;
			}
        }

		private Decimal _impliedManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="IMPLIED_MANUFACTURER_ID", BaseColumnName ="IMPLIED_MANUFACTURER_ID", BaseTableName = "IMPLIED_MANUFACTURER_FUNCTIONS" )]		public Decimal ImpliedManufacturerId 
		{ 
		    get { return _impliedManufacturerId; } 
			set 
			{
			    _impliedManufacturerId = value;
			}
        }

		private Decimal _manufacturerFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_FUNCTION_ID", BaseColumnName ="MANUFACTURER_FUNCTION_ID", BaseTableName = "IMPLIED_MANUFACTURER_FUNCTIONS" )]		public Decimal ManufacturerFunctionId 
		{ 
		    get { return _manufacturerFunctionId; } 
			set 
			{
			    _manufacturerFunctionId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "IMPLIED_MANUFACTURER_FUNCTIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "IMPLIED_MANUFACTURER_FUNCTIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "IMPLIED_MANUFACTURER_FUNCTIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "IMPLIED_MANUFACTURER_FUNCTIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class ImpliedManufacturerFunctionRepository : Repository<ImpliedManufacturerFunction> 
	{
		public ImpliedManufacturerFunctionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ImpliedManufacturerFunction Get(string projectionName, System.Decimal imanFunctionId)
		{
			return ((IRepository<ImpliedManufacturerFunction>)this).Get(projectionName, imanFunctionId, FetchMode.UseIdentityMap);
		}

		public ImpliedManufacturerFunction Get(string projectionName, System.Decimal imanFunctionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ImpliedManufacturerFunction>)this).Get(projectionName, imanFunctionId, fetchMode);
		}

		public ImpliedManufacturerFunction Get(Projection projection, System.Decimal imanFunctionId)
		{
			return ((IRepository<ImpliedManufacturerFunction>)this).Get(projection, imanFunctionId, FetchMode.UseIdentityMap);
		}

		public ImpliedManufacturerFunction Get(Projection projection, System.Decimal imanFunctionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ImpliedManufacturerFunction>)this).Get(projection, imanFunctionId, fetchMode);
		}

		public ImpliedManufacturerFunction Get(string projectionName, System.Decimal imanFunctionId, params string[] fields)
		{
			return ((IRepository<ImpliedManufacturerFunction>)this).Get(projectionName, imanFunctionId, fields);
		}

		public ImpliedManufacturerFunction Get(Projection projection, System.Decimal imanFunctionId, params string[] fields)
		{
			return ((IRepository<ImpliedManufacturerFunction>)this).Get(projection, imanFunctionId, fields);
		}

		public bool Delete(System.Decimal imanFunctionId)
		{
			var entity = new ImpliedManufacturerFunction { ImanFunctionId = imanFunctionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ImpliedManufacturerFunctionFields
	{
		public const string ImanFunctionId = "ImanFunctionId";
		public const string ImpliedManufacturerId = "ImpliedManufacturerId";
		public const string ManufacturerFunctionId = "ManufacturerFunctionId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="API_PACKAGING_MATERIALS")]
	public partial class PackagingMaterial
	{
		private Decimal _apiPackagingMaterialId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "API_PACKAGING_MATERIAL_ID", ColumnName ="API_PACKAGING_MATERIAL_ID", BaseColumnName ="API_PACKAGING_MATERIAL_ID", BaseTableName = "API_PACKAGING_MATERIALS" )]		public Decimal ApiPackagingMaterialId 
		{ 
		    get { return _apiPackagingMaterialId; } 
			set 
			{
			    _apiPackagingMaterialId = value;
			}
        }

		private Decimal _dmfcepVersionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DMFCEP_VERSION_ID", BaseColumnName ="DMFCEP_VERSION_ID", BaseTableName = "API_PACKAGING_MATERIALS" )]		public Decimal DmfcepVersionId 
		{ 
		    get { return _dmfcepVersionId; } 
			set 
			{
			    _dmfcepVersionId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "API_PACKAGING_MATERIALS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private Decimal? _retest;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RETEST", BaseColumnName ="RETEST", BaseTableName = "API_PACKAGING_MATERIALS" )]		public Decimal? Retest 
		{ 
		    get { return _retest; } 
			set 
			{
			    _retest = value;
			}
        }

		private String _retestMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="RETEST_MEASUREMENT", BaseColumnName ="RETEST_MEASUREMENT", BaseTableName = "API_PACKAGING_MATERIALS" )]		public String RetestMeasurement 
		{ 
		    get { return _retestMeasurement; } 
			set 
			{
			    _retestMeasurement = value;
			}
        }

		private Decimal? _shelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SHELF_LIFE", BaseColumnName ="SHELF_LIFE", BaseTableName = "API_PACKAGING_MATERIALS" )]		public Decimal? ShelfLife 
		{ 
		    get { return _shelfLife; } 
			set 
			{
			    _shelfLife = value;
			}
        }

		private String _shelfLifeMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="SHELF_LIFE_MEASUREMENT", BaseColumnName ="SHELF_LIFE_MEASUREMENT", BaseTableName = "API_PACKAGING_MATERIALS" )]		public String ShelfLifeMeasurement 
		{ 
		    get { return _shelfLifeMeasurement; } 
			set 
			{
			    _shelfLifeMeasurement = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "API_PACKAGING_MATERIALS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "API_PACKAGING_MATERIALS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "API_PACKAGING_MATERIALS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "API_PACKAGING_MATERIALS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _hasRetest;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_RETEST", BaseColumnName ="HAS_RETEST", BaseTableName = "API_PACKAGING_MATERIALS" )]		public String HasRetest 
		{ 
		    get { return _hasRetest; } 
			set 
			{
			    _hasRetest = value;
			}
        }

		private String _hasShelfLife;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_SHELF_LIFE", BaseColumnName ="HAS_SHELF_LIFE", BaseTableName = "API_PACKAGING_MATERIALS" )]		public String HasShelfLife 
		{ 
		    get { return _hasShelfLife; } 
			set 
			{
			    _hasShelfLife = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }


	}

	public partial class PackagingMaterialRepository : Repository<PackagingMaterial> 
	{
		public PackagingMaterialRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public PackagingMaterial Get(string projectionName, System.Decimal apiPackagingMaterialId)
		{
			return ((IRepository<PackagingMaterial>)this).Get(projectionName, apiPackagingMaterialId, FetchMode.UseIdentityMap);
		}

		public PackagingMaterial Get(string projectionName, System.Decimal apiPackagingMaterialId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PackagingMaterial>)this).Get(projectionName, apiPackagingMaterialId, fetchMode);
		}

		public PackagingMaterial Get(Projection projection, System.Decimal apiPackagingMaterialId)
		{
			return ((IRepository<PackagingMaterial>)this).Get(projection, apiPackagingMaterialId, FetchMode.UseIdentityMap);
		}

		public PackagingMaterial Get(Projection projection, System.Decimal apiPackagingMaterialId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PackagingMaterial>)this).Get(projection, apiPackagingMaterialId, fetchMode);
		}

		public PackagingMaterial Get(string projectionName, System.Decimal apiPackagingMaterialId, params string[] fields)
		{
			return ((IRepository<PackagingMaterial>)this).Get(projectionName, apiPackagingMaterialId, fields);
		}

		public PackagingMaterial Get(Projection projection, System.Decimal apiPackagingMaterialId, params string[] fields)
		{
			return ((IRepository<PackagingMaterial>)this).Get(projection, apiPackagingMaterialId, fields);
		}

		public bool Delete(System.Decimal apiPackagingMaterialId)
		{
			var entity = new PackagingMaterial { ApiPackagingMaterialId = apiPackagingMaterialId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PackagingMaterialFields
	{
		public const string ApiPackagingMaterialId = "ApiPackagingMaterialId";
		public const string DmfcepVersionId = "DmfcepVersionId";
		public const string Name = "Name";
		public const string Retest = "Retest";
		public const string RetestMeasurement = "RetestMeasurement";
		public const string ShelfLife = "ShelfLife";
		public const string ShelfLifeMeasurement = "ShelfLifeMeasurement";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string HasRetest = "HasRetest";
		public const string HasShelfLife = "HasShelfLife";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PSUR_SR_STATUSES")]
	public partial class PsurSrStatus
	{
		private Decimal _psurSrStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "PSUR_SR_STATUS_ID", ColumnName ="PSUR_SR_STATUS_ID", BaseColumnName ="PSUR_SR_STATUS_ID", BaseTableName = "PSUR_SR_STATUSES" )]		public Decimal PsurSrStatusId 
		{ 
		    get { return _psurSrStatusId; } 
			set 
			{
			    _psurSrStatusId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "PSUR_SR_STATUSES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "PSUR_SR_STATUSES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "PSUR_SR_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "PSUR_SR_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "PSUR_SR_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "PSUR_SR_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class PsurSrStatusRepository : Repository<PsurSrStatus> 
	{
		public PsurSrStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public PsurSrStatus Get(string projectionName, System.Decimal psurSrStatusId)
		{
			return ((IRepository<PsurSrStatus>)this).Get(projectionName, psurSrStatusId, FetchMode.UseIdentityMap);
		}

		public PsurSrStatus Get(string projectionName, System.Decimal psurSrStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PsurSrStatus>)this).Get(projectionName, psurSrStatusId, fetchMode);
		}

		public PsurSrStatus Get(Projection projection, System.Decimal psurSrStatusId)
		{
			return ((IRepository<PsurSrStatus>)this).Get(projection, psurSrStatusId, FetchMode.UseIdentityMap);
		}

		public PsurSrStatus Get(Projection projection, System.Decimal psurSrStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PsurSrStatus>)this).Get(projection, psurSrStatusId, fetchMode);
		}

		public PsurSrStatus Get(string projectionName, System.Decimal psurSrStatusId, params string[] fields)
		{
			return ((IRepository<PsurSrStatus>)this).Get(projectionName, psurSrStatusId, fields);
		}

		public PsurSrStatus Get(Projection projection, System.Decimal psurSrStatusId, params string[] fields)
		{
			return ((IRepository<PsurSrStatus>)this).Get(projection, psurSrStatusId, fields);
		}

		public bool Delete(System.Decimal psurSrStatusId)
		{
			var entity = new PsurSrStatus { PsurSrStatusId = psurSrStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PsurSrStatusFields
	{
		public const string PsurSrStatusId = "PsurSrStatusId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DEVELOPERS")]
	public partial class Developer
	{
		private Decimal _developerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DEVELOPER_ID", ColumnName ="DEVELOPER_ID", BaseColumnName ="DEVELOPER_ID", BaseTableName = "DEVELOPERS" )]		public Decimal DeveloperId 
		{ 
		    get { return _developerId; } 
			set 
			{
			    _developerId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "DEVELOPERS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DEVELOPERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DEVELOPERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DEVELOPERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DEVELOPERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "DEVELOPERS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }

		private Decimal? _developmentTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DEVELOPMENT_TYPE_ID", BaseColumnName ="DEVELOPMENT_TYPE_ID", BaseTableName = "DEVELOPERS" )]		public Decimal? DevelopmentTypeId 
		{ 
		    get { return _developmentTypeId; } 
			set 
			{
			    _developmentTypeId = value;
			}
        }


	}

	public partial class DeveloperRepository : Repository<Developer> 
	{
		public DeveloperRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Developer Get(string projectionName, System.Decimal developerId)
		{
			return ((IRepository<Developer>)this).Get(projectionName, developerId, FetchMode.UseIdentityMap);
		}

		public Developer Get(string projectionName, System.Decimal developerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Developer>)this).Get(projectionName, developerId, fetchMode);
		}

		public Developer Get(Projection projection, System.Decimal developerId)
		{
			return ((IRepository<Developer>)this).Get(projection, developerId, FetchMode.UseIdentityMap);
		}

		public Developer Get(Projection projection, System.Decimal developerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Developer>)this).Get(projection, developerId, fetchMode);
		}

		public Developer Get(string projectionName, System.Decimal developerId, params string[] fields)
		{
			return ((IRepository<Developer>)this).Get(projectionName, developerId, fields);
		}

		public Developer Get(Projection projection, System.Decimal developerId, params string[] fields)
		{
			return ((IRepository<Developer>)this).Get(projection, developerId, fields);
		}

		public bool Delete(System.Decimal developerId)
		{
			var entity = new Developer { DeveloperId = developerId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DeveloperFields
	{
		public const string DeveloperId = "DeveloperId";
		public const string Name = "Name";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsActive = "IsActive";
		public const string DevelopmentTypeId = "DevelopmentTypeId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RMP_STATUSES")]
	public partial class RmpStatus
	{
		private Decimal _rmpStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RMP_STATUS_ID", ColumnName ="RMP_STATUS_ID", BaseColumnName ="RMP_STATUS_ID", BaseTableName = "RMP_STATUSES" )]		public Decimal RmpStatusId 
		{ 
		    get { return _rmpStatusId; } 
			set 
			{
			    _rmpStatusId = value;
			}
        }

		private String _rmpStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="RMP_STATUS_NAME", BaseColumnName ="RMP_STATUS_NAME", BaseTableName = "RMP_STATUSES" )]		public String RmpStatusName 
		{ 
		    get { return _rmpStatusName; } 
			set 
			{
			    _rmpStatusName = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "RMP_STATUSES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RMP_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RMP_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RMP_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RMP_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class RmpStatusRepository : Repository<RmpStatus> 
	{
		public RmpStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RmpStatus Get(string projectionName, System.Decimal rmpStatusId)
		{
			return ((IRepository<RmpStatus>)this).Get(projectionName, rmpStatusId, FetchMode.UseIdentityMap);
		}

		public RmpStatus Get(string projectionName, System.Decimal rmpStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RmpStatus>)this).Get(projectionName, rmpStatusId, fetchMode);
		}

		public RmpStatus Get(Projection projection, System.Decimal rmpStatusId)
		{
			return ((IRepository<RmpStatus>)this).Get(projection, rmpStatusId, FetchMode.UseIdentityMap);
		}

		public RmpStatus Get(Projection projection, System.Decimal rmpStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RmpStatus>)this).Get(projection, rmpStatusId, fetchMode);
		}

		public RmpStatus Get(string projectionName, System.Decimal rmpStatusId, params string[] fields)
		{
			return ((IRepository<RmpStatus>)this).Get(projectionName, rmpStatusId, fields);
		}

		public RmpStatus Get(Projection projection, System.Decimal rmpStatusId, params string[] fields)
		{
			return ((IRepository<RmpStatus>)this).Get(projection, rmpStatusId, fields);
		}

		public bool Delete(System.Decimal rmpStatusId)
		{
			var entity = new RmpStatus { RmpStatusId = rmpStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RmpStatusFields
	{
		public const string RmpStatusId = "RmpStatusId";
		public const string RmpStatusName = "RmpStatusName";
		public const string Description = "Description";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="NOT_APPROVED_REASONS")]
	public partial class NotApprovedReason
	{
		private Decimal _notApprovedReasonId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "NOT_APPROVED_REASON_ID", ColumnName ="NOT_APPROVED_REASON_ID", BaseColumnName ="NOT_APPROVED_REASON_ID", BaseTableName = "NOT_APPROVED_REASONS" )]		public Decimal NotApprovedReasonId 
		{ 
		    get { return _notApprovedReasonId; } 
			set 
			{
			    _notApprovedReasonId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "NOT_APPROVED_REASONS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "NOT_APPROVED_REASONS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "NOT_APPROVED_REASONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "NOT_APPROVED_REASONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "NOT_APPROVED_REASONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "NOT_APPROVED_REASONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "NOT_APPROVED_REASONS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class NotApprovedReasonRepository : Repository<NotApprovedReason> 
	{
		public NotApprovedReasonRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public NotApprovedReason Get(string projectionName, System.Decimal notApprovedReasonId)
		{
			return ((IRepository<NotApprovedReason>)this).Get(projectionName, notApprovedReasonId, FetchMode.UseIdentityMap);
		}

		public NotApprovedReason Get(string projectionName, System.Decimal notApprovedReasonId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotApprovedReason>)this).Get(projectionName, notApprovedReasonId, fetchMode);
		}

		public NotApprovedReason Get(Projection projection, System.Decimal notApprovedReasonId)
		{
			return ((IRepository<NotApprovedReason>)this).Get(projection, notApprovedReasonId, FetchMode.UseIdentityMap);
		}

		public NotApprovedReason Get(Projection projection, System.Decimal notApprovedReasonId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotApprovedReason>)this).Get(projection, notApprovedReasonId, fetchMode);
		}

		public NotApprovedReason Get(string projectionName, System.Decimal notApprovedReasonId, params string[] fields)
		{
			return ((IRepository<NotApprovedReason>)this).Get(projectionName, notApprovedReasonId, fields);
		}

		public NotApprovedReason Get(Projection projection, System.Decimal notApprovedReasonId, params string[] fields)
		{
			return ((IRepository<NotApprovedReason>)this).Get(projection, notApprovedReasonId, fields);
		}

		public bool Delete(System.Decimal notApprovedReasonId)
		{
			var entity = new NotApprovedReason { NotApprovedReasonId = notApprovedReasonId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class NotApprovedReasonFields
	{
		public const string NotApprovedReasonId = "NotApprovedReasonId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="SAFETY_REFERRALS")]
	public partial class SafetyReferral
	{
		private Decimal _safetyReferralsId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "SAFETY_RERERRAL_ID", ColumnName ="SAFETY_REFERRALS_ID", BaseColumnName ="SAFETY_REFERRALS_ID", BaseTableName = "SAFETY_REFERRALS" )]		public Decimal SafetyReferralsId 
		{ 
		    get { return _safetyReferralsId; } 
			set 
			{
			    _safetyReferralsId = value;
			}
        }

		private Decimal _pharmacovigilanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="PHARMACOVIGILANCE_ID", BaseColumnName ="PHARMACOVIGILANCE_ID", BaseTableName = "SAFETY_REFERRALS" )]		public Decimal PharmacovigilanceId 
		{ 
		    get { return _pharmacovigilanceId; } 
			set 
			{
			    _pharmacovigilanceId = value;
			}
        }

		private String _issue;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ISSUE", BaseColumnName ="ISSUE", BaseTableName = "SAFETY_REFERRALS" )]		public String Issue 
		{ 
		    get { return _issue; } 
			set 
			{
			    _issue = value;
			}
        }

		private DateTime? _startDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="START_DATE", BaseColumnName ="START_DATE", BaseTableName = "SAFETY_REFERRALS" )]		public DateTime? StartDate 
		{ 
		    get { return _startDate; } 
			set 
			{
			    _startDate = value;
			}
        }

		private String _code;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CODE", BaseColumnName ="CODE", BaseTableName = "SAFETY_REFERRALS" )]		public String Code 
		{ 
		    get { return _code; } 
			set 
			{
			    _code = value;
			}
        }

		private DateTime? _endDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="END_DATE", BaseColumnName ="END_DATE", BaseTableName = "SAFETY_REFERRALS" )]		public DateTime? EndDate 
		{ 
		    get { return _endDate; } 
			set 
			{
			    _endDate = value;
			}
        }

		private String _conclussions;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CONCLUSSIONS", BaseColumnName ="CONCLUSSIONS", BaseTableName = "SAFETY_REFERRALS" )]		public String Conclussions 
		{ 
		    get { return _conclussions; } 
			set 
			{
			    _conclussions = value;
			}
        }

		private Decimal? _safetyReferralStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SAFETY_REFERRAL_STATUS_ID", BaseColumnName ="SAFETY_REFERRAL_STATUS_ID", BaseTableName = "SAFETY_REFERRALS" )]		public Decimal? SafetyReferralStatusId 
		{ 
		    get { return _safetyReferralStatusId; } 
			set 
			{
			    _safetyReferralStatusId = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "SAFETY_REFERRALS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "SAFETY_REFERRALS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "SAFETY_REFERRALS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "SAFETY_REFERRALS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _safetyReferralStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SAFETY_REFERRAL_STATUS_NAME" )]		public String SafetyReferralStatusName 
		{ 
		    get { return _safetyReferralStatusName; } 
			set 
			{
			    _safetyReferralStatusName = value;
			}
        }


	}

	public partial class SafetyReferralRepository : Repository<SafetyReferral> 
	{
		public SafetyReferralRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public SafetyReferral Get(string projectionName, System.Decimal safetyReferralsId)
		{
			return ((IRepository<SafetyReferral>)this).Get(projectionName, safetyReferralsId, FetchMode.UseIdentityMap);
		}

		public SafetyReferral Get(string projectionName, System.Decimal safetyReferralsId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SafetyReferral>)this).Get(projectionName, safetyReferralsId, fetchMode);
		}

		public SafetyReferral Get(Projection projection, System.Decimal safetyReferralsId)
		{
			return ((IRepository<SafetyReferral>)this).Get(projection, safetyReferralsId, FetchMode.UseIdentityMap);
		}

		public SafetyReferral Get(Projection projection, System.Decimal safetyReferralsId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SafetyReferral>)this).Get(projection, safetyReferralsId, fetchMode);
		}

		public SafetyReferral Get(string projectionName, System.Decimal safetyReferralsId, params string[] fields)
		{
			return ((IRepository<SafetyReferral>)this).Get(projectionName, safetyReferralsId, fields);
		}

		public SafetyReferral Get(Projection projection, System.Decimal safetyReferralsId, params string[] fields)
		{
			return ((IRepository<SafetyReferral>)this).Get(projection, safetyReferralsId, fields);
		}

		public bool Delete(System.Decimal safetyReferralsId)
		{
			var entity = new SafetyReferral { SafetyReferralsId = safetyReferralsId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class SafetyReferralFields
	{
		public const string SafetyReferralsId = "SafetyReferralsId";
		public const string PharmacovigilanceId = "PharmacovigilanceId";
		public const string Issue = "Issue";
		public const string StartDate = "StartDate";
		public const string Code = "Code";
		public const string EndDate = "EndDate";
		public const string Conclussions = "Conclussions";
		public const string SafetyReferralStatusId = "SafetyReferralStatusId";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string SafetyReferralStatusName = "SafetyReferralStatusName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class HolderManufacturer
	{
		private Decimal _imanFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="IMAN_FUNCTION_ID" )]		public Decimal ImanFunctionId 
		{ 
		    get { return _imanFunctionId; } 
			set 
			{
			    _imanFunctionId = value;
			}
        }

		private Decimal _impliedManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="IMPLIED_MANUFACTURER_ID" )]		public Decimal ImpliedManufacturerId 
		{ 
		    get { return _impliedManufacturerId; } 
			set 
			{
			    _impliedManufacturerId = value;
			}
        }

		private Decimal _manufacturerFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_FUNCTION_ID" )]		public Decimal ManufacturerFunctionId 
		{ 
		    get { return _manufacturerFunctionId; } 
			set 
			{
			    _manufacturerFunctionId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _functionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FUNCTION_NAME" )]		public String FunctionName 
		{ 
		    get { return _functionName; } 
			set 
			{
			    _functionName = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }


	}

	public partial class HolderManufacturerRepository : Repository<HolderManufacturer> 
	{
		public HolderManufacturerRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class HolderManufacturerFields
	{
		public const string ImanFunctionId = "ImanFunctionId";
		public const string ImpliedManufacturerId = "ImpliedManufacturerId";
		public const string ManufacturerFunctionId = "ManufacturerFunctionId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string FunctionName = "FunctionName";
		public const string ManufacturerName = "ManufacturerName";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="SAFETY_REFERRAL_STATUSES")]
	public partial class SafetyReferralStatus
	{
		private Decimal _safetyReferralStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "SAFETY_REFERRAL_STATUS_ID", ColumnName ="SAFETY_REFERRAL_STATUS_ID", BaseColumnName ="SAFETY_REFERRAL_STATUS_ID", BaseTableName = "SAFETY_REFERRAL_STATUSES" )]		public Decimal SafetyReferralStatusId 
		{ 
		    get { return _safetyReferralStatusId; } 
			set 
			{
			    _safetyReferralStatusId = value;
			}
        }

		private String _safetyReferralStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SAFETY_REFERRAL_STATUS_NAME", BaseColumnName ="SAFETY_REFERRAL_STATUS_NAME", BaseTableName = "SAFETY_REFERRAL_STATUSES" )]		public String SafetyReferralStatusName 
		{ 
		    get { return _safetyReferralStatusName; } 
			set 
			{
			    _safetyReferralStatusName = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "SAFETY_REFERRAL_STATUSES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "SAFETY_REFERRAL_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "SAFETY_REFERRAL_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "SAFETY_REFERRAL_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "SAFETY_REFERRAL_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class SafetyReferralStatusRepository : Repository<SafetyReferralStatus> 
	{
		public SafetyReferralStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public SafetyReferralStatus Get(string projectionName, System.Decimal safetyReferralStatusId)
		{
			return ((IRepository<SafetyReferralStatus>)this).Get(projectionName, safetyReferralStatusId, FetchMode.UseIdentityMap);
		}

		public SafetyReferralStatus Get(string projectionName, System.Decimal safetyReferralStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SafetyReferralStatus>)this).Get(projectionName, safetyReferralStatusId, fetchMode);
		}

		public SafetyReferralStatus Get(Projection projection, System.Decimal safetyReferralStatusId)
		{
			return ((IRepository<SafetyReferralStatus>)this).Get(projection, safetyReferralStatusId, FetchMode.UseIdentityMap);
		}

		public SafetyReferralStatus Get(Projection projection, System.Decimal safetyReferralStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SafetyReferralStatus>)this).Get(projection, safetyReferralStatusId, fetchMode);
		}

		public SafetyReferralStatus Get(string projectionName, System.Decimal safetyReferralStatusId, params string[] fields)
		{
			return ((IRepository<SafetyReferralStatus>)this).Get(projectionName, safetyReferralStatusId, fields);
		}

		public SafetyReferralStatus Get(Projection projection, System.Decimal safetyReferralStatusId, params string[] fields)
		{
			return ((IRepository<SafetyReferralStatus>)this).Get(projection, safetyReferralStatusId, fields);
		}

		public bool Delete(System.Decimal safetyReferralStatusId)
		{
			var entity = new SafetyReferralStatus { SafetyReferralStatusId = safetyReferralStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class SafetyReferralStatusFields
	{
		public const string SafetyReferralStatusId = "SafetyReferralStatusId";
		public const string SafetyReferralStatusName = "SafetyReferralStatusName";
		public const string Description = "Description";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="COMMITMENTS")]
	public partial class Commitment
	{
		private Decimal _commitmentId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "COMMITMENT_ID", ColumnName ="COMMITMENT_ID", BaseColumnName ="COMMITMENT_ID", BaseTableName = "COMMITMENTS" )]		public Decimal CommitmentId 
		{ 
		    get { return _commitmentId; } 
			set 
			{
			    _commitmentId = value;
			}
        }

		private Decimal _pharmacovigilanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="PHARMACOVIGILANCE_ID", BaseColumnName ="PHARMACOVIGILANCE_ID", BaseTableName = "COMMITMENTS" )]		public Decimal PharmacovigilanceId 
		{ 
		    get { return _pharmacovigilanceId; } 
			set 
			{
			    _pharmacovigilanceId = value;
			}
        }

		private String _source;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="SOURCE", BaseColumnName ="SOURCE", BaseTableName = "COMMITMENTS" )]		public String Source 
		{ 
		    get { return _source; } 
			set 
			{
			    _source = value;
			}
        }

		private String _reason;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="REASON", BaseColumnName ="REASON", BaseTableName = "COMMITMENTS" )]		public String Reason 
		{ 
		    get { return _reason; } 
			set 
			{
			    _reason = value;
			}
        }

		private String _action;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ACTION", BaseColumnName ="ACTION", BaseTableName = "COMMITMENTS" )]		public String Action 
		{ 
		    get { return _action; } 
			set 
			{
			    _action = value;
			}
        }

		private DateTime? _startDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="START_DATE", BaseColumnName ="START_DATE", BaseTableName = "COMMITMENTS" )]		public DateTime? StartDate 
		{ 
		    get { return _startDate; } 
			set 
			{
			    _startDate = value;
			}
        }

		private DateTime? _dueDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DUE_DATE", BaseColumnName ="DUE_DATE", BaseTableName = "COMMITMENTS" )]		public DateTime? DueDate 
		{ 
		    get { return _dueDate; } 
			set 
			{
			    _dueDate = value;
			}
        }

		private DateTime? _fulfillmentDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FULFILLMENT_DATE", BaseColumnName ="FULFILLMENT_DATE", BaseTableName = "COMMITMENTS" )]		public DateTime? FulfillmentDate 
		{ 
		    get { return _fulfillmentDate; } 
			set 
			{
			    _fulfillmentDate = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "COMMITMENTS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private String _isNotAvailable;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NOT_AVAILABLE", BaseColumnName ="IS_NOT_AVAILABLE", BaseTableName = "COMMITMENTS" )]		public String IsNotAvailable 
		{ 
		    get { return _isNotAvailable; } 
			set 
			{
			    _isNotAvailable = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "COMMITMENTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "COMMITMENTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "COMMITMENTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "COMMITMENTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _commitmentStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMITMENT_STATUS_ID", BaseColumnName ="COMMITMENT_STATUS_ID", BaseTableName = "COMMITMENTS" )]		public Decimal? CommitmentStatusId 
		{ 
		    get { return _commitmentStatusId; } 
			set 
			{
			    _commitmentStatusId = value;
			}
        }

		private String _commitmentStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="COMMITMENT_STATUS_NAME" )]		public String CommitmentStatusName 
		{ 
		    get { return _commitmentStatusName; } 
			set 
			{
			    _commitmentStatusName = value;
			}
        }


	}

	public partial class CommitmentRepository : Repository<Commitment> 
	{
		public CommitmentRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Commitment Get(string projectionName, System.Decimal commitmentId)
		{
			return ((IRepository<Commitment>)this).Get(projectionName, commitmentId, FetchMode.UseIdentityMap);
		}

		public Commitment Get(string projectionName, System.Decimal commitmentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Commitment>)this).Get(projectionName, commitmentId, fetchMode);
		}

		public Commitment Get(Projection projection, System.Decimal commitmentId)
		{
			return ((IRepository<Commitment>)this).Get(projection, commitmentId, FetchMode.UseIdentityMap);
		}

		public Commitment Get(Projection projection, System.Decimal commitmentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Commitment>)this).Get(projection, commitmentId, fetchMode);
		}

		public Commitment Get(string projectionName, System.Decimal commitmentId, params string[] fields)
		{
			return ((IRepository<Commitment>)this).Get(projectionName, commitmentId, fields);
		}

		public Commitment Get(Projection projection, System.Decimal commitmentId, params string[] fields)
		{
			return ((IRepository<Commitment>)this).Get(projection, commitmentId, fields);
		}

		public bool Delete(System.Decimal commitmentId)
		{
			var entity = new Commitment { CommitmentId = commitmentId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class CommitmentFields
	{
		public const string CommitmentId = "CommitmentId";
		public const string PharmacovigilanceId = "PharmacovigilanceId";
		public const string Source = "Source";
		public const string Reason = "Reason";
		public const string Action = "Action";
		public const string StartDate = "StartDate";
		public const string DueDate = "DueDate";
		public const string FulfillmentDate = "FulfillmentDate";
		public const string Comments = "Comments";
		public const string IsNotAvailable = "IsNotAvailable";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string CommitmentStatusId = "CommitmentStatusId";
		public const string CommitmentStatusName = "CommitmentStatusName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="COMMITMENT_STATUSES")]
	public partial class CommitmentStatus
	{
		private Decimal _commitmentStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "COMMITMENT_STATUS_ID", ColumnName ="COMMITMENT_STATUS_ID", BaseColumnName ="COMMITMENT_STATUS_ID", BaseTableName = "COMMITMENT_STATUSES" )]		public Decimal CommitmentStatusId 
		{ 
		    get { return _commitmentStatusId; } 
			set 
			{
			    _commitmentStatusId = value;
			}
        }

		private String _commitmentStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="COMMITMENT_STATUS_NAME", BaseColumnName ="COMMITMENT_STATUS_NAME", BaseTableName = "COMMITMENT_STATUSES" )]		public String CommitmentStatusName 
		{ 
		    get { return _commitmentStatusName; } 
			set 
			{
			    _commitmentStatusName = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "COMMITMENT_STATUSES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "COMMITMENT_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "COMMITMENT_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "COMMITMENT_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "COMMITMENT_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class CommitmentStatusRepository : Repository<CommitmentStatus> 
	{
		public CommitmentStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public CommitmentStatus Get(string projectionName, System.Decimal commitmentStatusId)
		{
			return ((IRepository<CommitmentStatus>)this).Get(projectionName, commitmentStatusId, FetchMode.UseIdentityMap);
		}

		public CommitmentStatus Get(string projectionName, System.Decimal commitmentStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CommitmentStatus>)this).Get(projectionName, commitmentStatusId, fetchMode);
		}

		public CommitmentStatus Get(Projection projection, System.Decimal commitmentStatusId)
		{
			return ((IRepository<CommitmentStatus>)this).Get(projection, commitmentStatusId, FetchMode.UseIdentityMap);
		}

		public CommitmentStatus Get(Projection projection, System.Decimal commitmentStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CommitmentStatus>)this).Get(projection, commitmentStatusId, fetchMode);
		}

		public CommitmentStatus Get(string projectionName, System.Decimal commitmentStatusId, params string[] fields)
		{
			return ((IRepository<CommitmentStatus>)this).Get(projectionName, commitmentStatusId, fields);
		}

		public CommitmentStatus Get(Projection projection, System.Decimal commitmentStatusId, params string[] fields)
		{
			return ((IRepository<CommitmentStatus>)this).Get(projection, commitmentStatusId, fields);
		}

		public bool Delete(System.Decimal commitmentStatusId)
		{
			var entity = new CommitmentStatus { CommitmentStatusId = commitmentStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class CommitmentStatusFields
	{
		public const string CommitmentStatusId = "CommitmentStatusId";
		public const string CommitmentStatusName = "CommitmentStatusName";
		public const string Description = "Description";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_MANUFACTURERS")]
	public partial class MpManufacturer
	{
		private Decimal _mpManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_MANUFACTURER_ID", ColumnName ="MP_MANUFACTURER_ID", BaseColumnName ="MP_MANUFACTURER_ID", BaseTableName = "MP_MANUFACTURERS" )]		public Decimal MpManufacturerId 
		{ 
		    get { return _mpManufacturerId; } 
			set 
			{
			    _mpManufacturerId = value;
			}
        }

		private Decimal _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_ID", BaseColumnName ="MANUFACTURER_ID", BaseTableName = "MP_MANUFACTURERS" )]		public Decimal ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private Decimal? _manufacturerAddressId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MANUFACTURER_ADDRESS_ID", BaseColumnName ="MANUFACTURER_ADDRESS_ID", BaseTableName = "MP_MANUFACTURERS" )]		public Decimal? ManufacturerAddressId 
		{ 
		    get { return _manufacturerAddressId; } 
			set 
			{
			    _manufacturerAddressId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_MANUFACTURERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_MANUFACTURERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_MANUFACTURERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_MANUFACTURERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID", BaseColumnName ="MEDICINAL_PRODUCT_ID", BaseTableName = "MP_MANUFACTURERS" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private Decimal? _occurrences;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OCCURRENCES" )]		public Decimal? Occurrences 
		{ 
		    get { return _occurrences; } 
			set 
			{
			    _occurrences = value;
			}
        }


	}

	public partial class MpManufacturerRepository : Repository<MpManufacturer> 
	{
		public MpManufacturerRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpManufacturer Get(string projectionName, System.Decimal mpManufacturerId)
		{
			return ((IRepository<MpManufacturer>)this).Get(projectionName, mpManufacturerId, FetchMode.UseIdentityMap);
		}

		public MpManufacturer Get(string projectionName, System.Decimal mpManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpManufacturer>)this).Get(projectionName, mpManufacturerId, fetchMode);
		}

		public MpManufacturer Get(Projection projection, System.Decimal mpManufacturerId)
		{
			return ((IRepository<MpManufacturer>)this).Get(projection, mpManufacturerId, FetchMode.UseIdentityMap);
		}

		public MpManufacturer Get(Projection projection, System.Decimal mpManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpManufacturer>)this).Get(projection, mpManufacturerId, fetchMode);
		}

		public MpManufacturer Get(string projectionName, System.Decimal mpManufacturerId, params string[] fields)
		{
			return ((IRepository<MpManufacturer>)this).Get(projectionName, mpManufacturerId, fields);
		}

		public MpManufacturer Get(Projection projection, System.Decimal mpManufacturerId, params string[] fields)
		{
			return ((IRepository<MpManufacturer>)this).Get(projection, mpManufacturerId, fields);
		}

		public bool Delete(System.Decimal mpManufacturerId)
		{
			var entity = new MpManufacturer { MpManufacturerId = mpManufacturerId };
			return this.Delete(entity);
		}

		
		public void DeleteMpManufacturer(Decimal? manId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteMpManufacturerProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "MAN_ID"].Value = manId == null ? (object) DBNull.Value : manId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class MpManufacturerFields
	{
		public const string MpManufacturerId = "MpManufacturerId";
		public const string ManufacturerId = "ManufacturerId";
		public const string ManufacturerAddressId = "ManufacturerAddressId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string ManufacturerName = "ManufacturerName";
		public const string Address = "Address";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string Occurrences = "Occurrences";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_MANUFACTURER_FUNCTIONS")]
	public partial class MpManufacturerFunction
	{
		private Decimal _mpManufacturerFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_MANUFACTURER_FUNCTION_ID", ColumnName ="MP_MANUFACTURER_FUNCTION_ID", BaseColumnName ="MP_MANUFACTURER_FUNCTION_ID", BaseTableName = "MP_MANUFACTURER_FUNCTIONS" )]		public Decimal MpManufacturerFunctionId 
		{ 
		    get { return _mpManufacturerFunctionId; } 
			set 
			{
			    _mpManufacturerFunctionId = value;
			}
        }

		private Decimal _mpManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_MANUFACTURER_ID", BaseColumnName ="MP_MANUFACTURER_ID", BaseTableName = "MP_MANUFACTURER_FUNCTIONS" )]		public Decimal MpManufacturerId 
		{ 
		    get { return _mpManufacturerId; } 
			set 
			{
			    _mpManufacturerId = value;
			}
        }

		private Decimal _manufacturerFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_FUNCTION_ID", BaseColumnName ="MANUFACTURER_FUNCTION_ID", BaseTableName = "MP_MANUFACTURER_FUNCTIONS" )]		public Decimal ManufacturerFunctionId 
		{ 
		    get { return _manufacturerFunctionId; } 
			set 
			{
			    _manufacturerFunctionId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _manufacturerFunctionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MANUFACTURER_FUNCTION_NAME" )]		public String ManufacturerFunctionName 
		{ 
		    get { return _manufacturerFunctionName; } 
			set 
			{
			    _manufacturerFunctionName = value;
			}
        }


	}

	public partial class MpManufacturerFunctionRepository : Repository<MpManufacturerFunction> 
	{
		public MpManufacturerFunctionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpManufacturerFunction Get(string projectionName, System.Decimal mpManufacturerFunctionId)
		{
			return ((IRepository<MpManufacturerFunction>)this).Get(projectionName, mpManufacturerFunctionId, FetchMode.UseIdentityMap);
		}

		public MpManufacturerFunction Get(string projectionName, System.Decimal mpManufacturerFunctionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpManufacturerFunction>)this).Get(projectionName, mpManufacturerFunctionId, fetchMode);
		}

		public MpManufacturerFunction Get(Projection projection, System.Decimal mpManufacturerFunctionId)
		{
			return ((IRepository<MpManufacturerFunction>)this).Get(projection, mpManufacturerFunctionId, FetchMode.UseIdentityMap);
		}

		public MpManufacturerFunction Get(Projection projection, System.Decimal mpManufacturerFunctionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpManufacturerFunction>)this).Get(projection, mpManufacturerFunctionId, fetchMode);
		}

		public MpManufacturerFunction Get(string projectionName, System.Decimal mpManufacturerFunctionId, params string[] fields)
		{
			return ((IRepository<MpManufacturerFunction>)this).Get(projectionName, mpManufacturerFunctionId, fields);
		}

		public MpManufacturerFunction Get(Projection projection, System.Decimal mpManufacturerFunctionId, params string[] fields)
		{
			return ((IRepository<MpManufacturerFunction>)this).Get(projection, mpManufacturerFunctionId, fields);
		}

		public bool Delete(System.Decimal mpManufacturerFunctionId)
		{
			var entity = new MpManufacturerFunction { MpManufacturerFunctionId = mpManufacturerFunctionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpManufacturerFunctionFields
	{
		public const string MpManufacturerFunctionId = "MpManufacturerFunctionId";
		public const string MpManufacturerId = "MpManufacturerId";
		public const string ManufacturerFunctionId = "ManufacturerFunctionId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string ManufacturerFunctionName = "ManufacturerFunctionName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="SIGNALS")]
	public partial class Signal
	{
		private Decimal _signalId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "SIGNAL_ID", ColumnName ="SIGNAL_ID", BaseColumnName ="SIGNAL_ID", BaseTableName = "SIGNALS" )]		public Decimal SignalId 
		{ 
		    get { return _signalId; } 
			set 
			{
			    _signalId = value;
			}
        }

		private Decimal _pharmacovigilanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="PHARMACOVIGILANCE_ID", BaseColumnName ="PHARMACOVIGILANCE_ID", BaseTableName = "SIGNALS" )]		public Decimal PharmacovigilanceId 
		{ 
		    get { return _pharmacovigilanceId; } 
			set 
			{
			    _pharmacovigilanceId = value;
			}
        }

		private String _source;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="SOURCE", BaseColumnName ="SOURCE", BaseTableName = "SIGNALS" )]		public String Source 
		{ 
		    get { return _source; } 
			set 
			{
			    _source = value;
			}
        }

		private DateTime? _detectionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DETECTION_DATE", BaseColumnName ="DETECTION_DATE", BaseTableName = "SIGNALS" )]		public DateTime? DetectionDate 
		{ 
		    get { return _detectionDate; } 
			set 
			{
			    _detectionDate = value;
			}
        }

		private String _conclusion;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CONCLUSION", BaseColumnName ="CONCLUSION", BaseTableName = "SIGNALS" )]		public String Conclusion 
		{ 
		    get { return _conclusion; } 
			set 
			{
			    _conclusion = value;
			}
        }

		private String _action;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ACTION", BaseColumnName ="ACTION", BaseTableName = "SIGNALS" )]		public String Action 
		{ 
		    get { return _action; } 
			set 
			{
			    _action = value;
			}
        }

		private String _code;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CODE", BaseColumnName ="CODE", BaseTableName = "SIGNALS" )]		public String Code 
		{ 
		    get { return _code; } 
			set 
			{
			    _code = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "SIGNALS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _closingDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLOSING_DATE", BaseColumnName ="CLOSING_DATE", BaseTableName = "SIGNALS" )]		public DateTime? ClosingDate 
		{ 
		    get { return _closingDate; } 
			set 
			{
			    _closingDate = value;
			}
        }

		private String _isClosingDateNa;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_CLOSING_DATE_NA", BaseColumnName ="IS_CLOSING_DATE_NA", BaseTableName = "SIGNALS" )]		public String IsClosingDateNa 
		{ 
		    get { return _isClosingDateNa; } 
			set 
			{
			    _isClosingDateNa = value;
			}
        }

		private Decimal? _signalsClasificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SIGNALS_CLASIFICATION_ID", BaseColumnName ="SIGNALS_CLASIFICATION_ID", BaseTableName = "SIGNALS" )]		public Decimal? SignalsClasificationId 
		{ 
		    get { return _signalsClasificationId; } 
			set 
			{
			    _signalsClasificationId = value;
			}
        }

		private Decimal? _signalStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SIGNAL_STATUS_ID", BaseColumnName ="SIGNAL_STATUS_ID", BaseTableName = "SIGNALS" )]		public Decimal? SignalStatusId 
		{ 
		    get { return _signalStatusId; } 
			set 
			{
			    _signalStatusId = value;
			}
        }

		private String _signalStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SIGNAL_STATUS_NAME" )]		public String SignalStatusName 
		{ 
		    get { return _signalStatusName; } 
			set 
			{
			    _signalStatusName = value;
			}
        }

		private String _signalClassificationName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SIGNAL_CLASSIFICATION_NAME" )]		public String SignalClassificationName 
		{ 
		    get { return _signalClassificationName; } 
			set 
			{
			    _signalClassificationName = value;
			}
        }


	}

	public partial class SignalRepository : Repository<Signal> 
	{
		public SignalRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Signal Get(string projectionName, System.Decimal signalId)
		{
			return ((IRepository<Signal>)this).Get(projectionName, signalId, FetchMode.UseIdentityMap);
		}

		public Signal Get(string projectionName, System.Decimal signalId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Signal>)this).Get(projectionName, signalId, fetchMode);
		}

		public Signal Get(Projection projection, System.Decimal signalId)
		{
			return ((IRepository<Signal>)this).Get(projection, signalId, FetchMode.UseIdentityMap);
		}

		public Signal Get(Projection projection, System.Decimal signalId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Signal>)this).Get(projection, signalId, fetchMode);
		}

		public Signal Get(string projectionName, System.Decimal signalId, params string[] fields)
		{
			return ((IRepository<Signal>)this).Get(projectionName, signalId, fields);
		}

		public Signal Get(Projection projection, System.Decimal signalId, params string[] fields)
		{
			return ((IRepository<Signal>)this).Get(projection, signalId, fields);
		}

		public bool Delete(System.Decimal signalId)
		{
			var entity = new Signal { SignalId = signalId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class SignalFields
	{
		public const string SignalId = "SignalId";
		public const string PharmacovigilanceId = "PharmacovigilanceId";
		public const string Source = "Source";
		public const string DetectionDate = "DetectionDate";
		public const string Conclusion = "Conclusion";
		public const string Action = "Action";
		public const string Code = "Code";
		public const string Description = "Description";
		public const string ClosingDate = "ClosingDate";
		public const string IsClosingDateNa = "IsClosingDateNa";
		public const string SignalsClasificationId = "SignalsClasificationId";
		public const string SignalStatusId = "SignalStatusId";
		public const string SignalStatusName = "SignalStatusName";
		public const string SignalClassificationName = "SignalClassificationName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="SIGNAL_STATUSES")]
	public partial class SignalStatus
	{
		private Decimal _signalStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "SIGNAL_STATUS_ID", ColumnName ="SIGNAL_STATUS_ID", BaseColumnName ="SIGNAL_STATUS_ID", BaseTableName = "SIGNAL_STATUSES" )]		public Decimal SignalStatusId 
		{ 
		    get { return _signalStatusId; } 
			set 
			{
			    _signalStatusId = value;
			}
        }

		private String _signalStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SIGNAL_STATUS_NAME", BaseColumnName ="SIGNAL_STATUS_NAME", BaseTableName = "SIGNAL_STATUSES" )]		public String SignalStatusName 
		{ 
		    get { return _signalStatusName; } 
			set 
			{
			    _signalStatusName = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "SIGNAL_STATUSES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "SIGNAL_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "SIGNAL_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "SIGNAL_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "SIGNAL_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class SignalStatusRepository : Repository<SignalStatus> 
	{
		public SignalStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public SignalStatus Get(string projectionName, System.Decimal signalStatusId)
		{
			return ((IRepository<SignalStatus>)this).Get(projectionName, signalStatusId, FetchMode.UseIdentityMap);
		}

		public SignalStatus Get(string projectionName, System.Decimal signalStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SignalStatus>)this).Get(projectionName, signalStatusId, fetchMode);
		}

		public SignalStatus Get(Projection projection, System.Decimal signalStatusId)
		{
			return ((IRepository<SignalStatus>)this).Get(projection, signalStatusId, FetchMode.UseIdentityMap);
		}

		public SignalStatus Get(Projection projection, System.Decimal signalStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SignalStatus>)this).Get(projection, signalStatusId, fetchMode);
		}

		public SignalStatus Get(string projectionName, System.Decimal signalStatusId, params string[] fields)
		{
			return ((IRepository<SignalStatus>)this).Get(projectionName, signalStatusId, fields);
		}

		public SignalStatus Get(Projection projection, System.Decimal signalStatusId, params string[] fields)
		{
			return ((IRepository<SignalStatus>)this).Get(projection, signalStatusId, fields);
		}

		public bool Delete(System.Decimal signalStatusId)
		{
			var entity = new SignalStatus { SignalStatusId = signalStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class SignalStatusFields
	{
		public const string SignalStatusId = "SignalStatusId";
		public const string SignalStatusName = "SignalStatusName";
		public const string Description = "Description";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="SIGNAL_CLASSIFICATIONS")]
	public partial class SignalClassification
	{
		private Decimal _signalClassificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "SIGNAL_CLASSIFICATION_ID", ColumnName ="SIGNAL_CLASSIFICATION_ID", BaseColumnName ="SIGNAL_CLASSIFICATION_ID", BaseTableName = "SIGNAL_CLASSIFICATIONS" )]		public Decimal SignalClassificationId 
		{ 
		    get { return _signalClassificationId; } 
			set 
			{
			    _signalClassificationId = value;
			}
        }

		private String _signalClassificationName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SIGNAL_CLASSIFICATION_NAME", BaseColumnName ="SIGNAL_CLASSIFICATION_NAME", BaseTableName = "SIGNAL_CLASSIFICATIONS" )]		public String SignalClassificationName 
		{ 
		    get { return _signalClassificationName; } 
			set 
			{
			    _signalClassificationName = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "SIGNAL_CLASSIFICATIONS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "SIGNAL_CLASSIFICATIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "SIGNAL_CLASSIFICATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "SIGNAL_CLASSIFICATIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "SIGNAL_CLASSIFICATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "SIGNAL_CLASSIFICATIONS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class SignalClassificationRepository : Repository<SignalClassification> 
	{
		public SignalClassificationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public SignalClassification Get(string projectionName, System.Decimal signalClassificationId)
		{
			return ((IRepository<SignalClassification>)this).Get(projectionName, signalClassificationId, FetchMode.UseIdentityMap);
		}

		public SignalClassification Get(string projectionName, System.Decimal signalClassificationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SignalClassification>)this).Get(projectionName, signalClassificationId, fetchMode);
		}

		public SignalClassification Get(Projection projection, System.Decimal signalClassificationId)
		{
			return ((IRepository<SignalClassification>)this).Get(projection, signalClassificationId, FetchMode.UseIdentityMap);
		}

		public SignalClassification Get(Projection projection, System.Decimal signalClassificationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SignalClassification>)this).Get(projection, signalClassificationId, fetchMode);
		}

		public SignalClassification Get(string projectionName, System.Decimal signalClassificationId, params string[] fields)
		{
			return ((IRepository<SignalClassification>)this).Get(projectionName, signalClassificationId, fields);
		}

		public SignalClassification Get(Projection projection, System.Decimal signalClassificationId, params string[] fields)
		{
			return ((IRepository<SignalClassification>)this).Get(projection, signalClassificationId, fields);
		}

		public bool Delete(System.Decimal signalClassificationId)
		{
			var entity = new SignalClassification { SignalClassificationId = signalClassificationId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class SignalClassificationFields
	{
		public const string SignalClassificationId = "SignalClassificationId";
		public const string SignalClassificationName = "SignalClassificationName";
		public const string Description = "Description";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PHARMACOVIGILANCE_AGREEMENTS")]
	public partial class PhvAgreement
	{
		private Decimal _pharmacovigilanceAgreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "PHARMACOVIGILANCE_AGREEMENT_ID", ColumnName ="PHARMACOVIGILANCE_AGREEMENT_ID", BaseColumnName ="PHARMACOVIGILANCE_AGREEMENT_ID", BaseTableName = "PHARMACOVIGILANCE_AGREEMENTS" )]		public Decimal PharmacovigilanceAgreementId 
		{ 
		    get { return _pharmacovigilanceAgreementId; } 
			set 
			{
			    _pharmacovigilanceAgreementId = value;
			}
        }

		private Decimal? _pharmacovigilanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PHARMACOVIGILANCE_ID", BaseColumnName ="PHARMACOVIGILANCE_ID", BaseTableName = "PHARMACOVIGILANCE_AGREEMENTS" )]		public Decimal? PharmacovigilanceId 
		{ 
		    get { return _pharmacovigilanceId; } 
			set 
			{
			    _pharmacovigilanceId = value;
			}
        }

		private Decimal? _agreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="AGREEMENT_ID", BaseColumnName ="AGREEMENT_ID", BaseTableName = "PHARMACOVIGILANCE_AGREEMENTS" )]		public Decimal? AgreementId 
		{ 
		    get { return _agreementId; } 
			set 
			{
			    _agreementId = value;
			}
        }

		private String _agreementTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="AGREEMENT_TYPE_NAME" )]		public String AgreementTypeName 
		{ 
		    get { return _agreementTypeName; } 
			set 
			{
			    _agreementTypeName = value;
			}
        }

		private String _companyName;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMPANY_NAME" )]		public String CompanyName 
		{ 
		    get { return _companyName; } 
			set 
			{
			    _companyName = value;
			}
        }

		private String _agreementName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="AGREEMENT_NAME" )]		public String AgreementName 
		{ 
		    get { return _agreementName; } 
			set 
			{
			    _agreementName = value;
			}
        }

		private String _status;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS" )]		public String Status 
		{ 
		    get { return _status; } 
			set 
			{
			    _status = value;
			}
        }

		private DateTime? _signatureDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SIGNATURE_DATE" )]		public DateTime? SignatureDate 
		{ 
		    get { return _signatureDate; } 
			set 
			{
			    _signatureDate = value;
			}
        }

		private DateTime? _authorisationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="AUTHORISATION_DATE" )]		public DateTime? AuthorisationDate 
		{ 
		    get { return _authorisationDate; } 
			set 
			{
			    _authorisationDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }


	}

	public partial class PhvAgreementRepository : Repository<PhvAgreement> 
	{
		public PhvAgreementRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public PhvAgreement Get(string projectionName, System.Decimal pharmacovigilanceAgreementId)
		{
			return ((IRepository<PhvAgreement>)this).Get(projectionName, pharmacovigilanceAgreementId, FetchMode.UseIdentityMap);
		}

		public PhvAgreement Get(string projectionName, System.Decimal pharmacovigilanceAgreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PhvAgreement>)this).Get(projectionName, pharmacovigilanceAgreementId, fetchMode);
		}

		public PhvAgreement Get(Projection projection, System.Decimal pharmacovigilanceAgreementId)
		{
			return ((IRepository<PhvAgreement>)this).Get(projection, pharmacovigilanceAgreementId, FetchMode.UseIdentityMap);
		}

		public PhvAgreement Get(Projection projection, System.Decimal pharmacovigilanceAgreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PhvAgreement>)this).Get(projection, pharmacovigilanceAgreementId, fetchMode);
		}

		public PhvAgreement Get(string projectionName, System.Decimal pharmacovigilanceAgreementId, params string[] fields)
		{
			return ((IRepository<PhvAgreement>)this).Get(projectionName, pharmacovigilanceAgreementId, fields);
		}

		public PhvAgreement Get(Projection projection, System.Decimal pharmacovigilanceAgreementId, params string[] fields)
		{
			return ((IRepository<PhvAgreement>)this).Get(projection, pharmacovigilanceAgreementId, fields);
		}

		public bool Delete(System.Decimal pharmacovigilanceAgreementId)
		{
			var entity = new PhvAgreement { PharmacovigilanceAgreementId = pharmacovigilanceAgreementId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PhvAgreementFields
	{
		public const string PharmacovigilanceAgreementId = "PharmacovigilanceAgreementId";
		public const string PharmacovigilanceId = "PharmacovigilanceId";
		public const string AgreementId = "AgreementId";
		public const string AgreementTypeName = "AgreementTypeName";
		public const string CompanyName = "CompanyName";
		public const string AgreementName = "AgreementName";
		public const string Status = "Status";
		public const string SignatureDate = "SignatureDate";
		public const string AuthorisationDate = "AuthorisationDate";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string CountryName = "CountryName";
		public const string TwoLettersCode = "TwoLettersCode";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MANUFACTURER_ADDRESSES")]
	public partial class ManufacturerAddress
	{
		private Decimal _manufacturerAddressId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MANUFACTURER_ADDRESS_ID", ColumnName ="MANUFACTURER_ADDRESS_ID", BaseColumnName ="MANUFACTURER_ADDRESS_ID", BaseTableName = "MANUFACTURER_ADDRESSES" )]		public Decimal ManufacturerAddressId 
		{ 
		    get { return _manufacturerAddressId; } 
			set 
			{
			    _manufacturerAddressId = value;
			}
        }

		private Decimal _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_ID", BaseColumnName ="MANUFACTURER_ID", BaseTableName = "MANUFACTURER_ADDRESSES" )]		public Decimal ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS", BaseColumnName ="ADDRESS", BaseTableName = "MANUFACTURER_ADDRESSES" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MANUFACTURER_ADDRESSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MANUFACTURER_ADDRESSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MANUFACTURER_ADDRESSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MANUFACTURER_ADDRESSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "MANUFACTURER_ADDRESSES" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }

		private String _fullAddress;
		[DataMember]
		[SqlField(DbType.String, 769, ColumnName ="FULL_ADDRESS" )]		public String FullAddress 
		{ 
		    get { return _fullAddress; } 
			set 
			{
			    _fullAddress = value;
			}
        }


	}

	public partial class ManufacturerAddressRepository : Repository<ManufacturerAddress> 
	{
		public ManufacturerAddressRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ManufacturerAddress Get(string projectionName, System.Decimal manufacturerAddressId)
		{
			return ((IRepository<ManufacturerAddress>)this).Get(projectionName, manufacturerAddressId, FetchMode.UseIdentityMap);
		}

		public ManufacturerAddress Get(string projectionName, System.Decimal manufacturerAddressId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ManufacturerAddress>)this).Get(projectionName, manufacturerAddressId, fetchMode);
		}

		public ManufacturerAddress Get(Projection projection, System.Decimal manufacturerAddressId)
		{
			return ((IRepository<ManufacturerAddress>)this).Get(projection, manufacturerAddressId, FetchMode.UseIdentityMap);
		}

		public ManufacturerAddress Get(Projection projection, System.Decimal manufacturerAddressId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ManufacturerAddress>)this).Get(projection, manufacturerAddressId, fetchMode);
		}

		public ManufacturerAddress Get(string projectionName, System.Decimal manufacturerAddressId, params string[] fields)
		{
			return ((IRepository<ManufacturerAddress>)this).Get(projectionName, manufacturerAddressId, fields);
		}

		public ManufacturerAddress Get(Projection projection, System.Decimal manufacturerAddressId, params string[] fields)
		{
			return ((IRepository<ManufacturerAddress>)this).Get(projection, manufacturerAddressId, fields);
		}

		public bool Delete(System.Decimal manufacturerAddressId)
		{
			var entity = new ManufacturerAddress { ManufacturerAddressId = manufacturerAddressId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ManufacturerAddressFields
	{
		public const string ManufacturerAddressId = "ManufacturerAddressId";
		public const string ManufacturerId = "ManufacturerId";
		public const string Address = "Address";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsActive = "IsActive";
		public const string FullAddress = "FullAddress";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_FORMULATION_STATUSES")]
	public partial class MpFormulationStatus
	{
		private Decimal _mpFormulationStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_FORMULATION_STATUS_ID", ColumnName ="MP_FORMULATION_STATUS_ID", BaseColumnName ="MP_FORMULATION_STATUS_ID", BaseTableName = "MP_FORMULATION_STATUSES" )]		public Decimal MpFormulationStatusId 
		{ 
		    get { return _mpFormulationStatusId; } 
			set 
			{
			    _mpFormulationStatusId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MP_FORMULATION_STATUSES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_FORMULATION_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_FORMULATION_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_FORMULATION_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_FORMULATION_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class MpFormulationStatusRepository : Repository<MpFormulationStatus> 
	{
		public MpFormulationStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpFormulationStatus Get(string projectionName, System.Decimal mpFormulationStatusId)
		{
			return ((IRepository<MpFormulationStatus>)this).Get(projectionName, mpFormulationStatusId, FetchMode.UseIdentityMap);
		}

		public MpFormulationStatus Get(string projectionName, System.Decimal mpFormulationStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpFormulationStatus>)this).Get(projectionName, mpFormulationStatusId, fetchMode);
		}

		public MpFormulationStatus Get(Projection projection, System.Decimal mpFormulationStatusId)
		{
			return ((IRepository<MpFormulationStatus>)this).Get(projection, mpFormulationStatusId, FetchMode.UseIdentityMap);
		}

		public MpFormulationStatus Get(Projection projection, System.Decimal mpFormulationStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpFormulationStatus>)this).Get(projection, mpFormulationStatusId, fetchMode);
		}

		public MpFormulationStatus Get(string projectionName, System.Decimal mpFormulationStatusId, params string[] fields)
		{
			return ((IRepository<MpFormulationStatus>)this).Get(projectionName, mpFormulationStatusId, fields);
		}

		public MpFormulationStatus Get(Projection projection, System.Decimal mpFormulationStatusId, params string[] fields)
		{
			return ((IRepository<MpFormulationStatus>)this).Get(projection, mpFormulationStatusId, fields);
		}

		public bool Delete(System.Decimal mpFormulationStatusId)
		{
			var entity = new MpFormulationStatus { MpFormulationStatusId = mpFormulationStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpFormulationStatusFields
	{
		public const string MpFormulationStatusId = "MpFormulationStatusId";
		public const string Name = "Name";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_FORMULATIONS")]
	public partial class MpFormulation
	{
		private Decimal _mpFormulationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_FORMULATION_ID", ColumnName ="MP_FORMULATION_ID", BaseColumnName ="MP_FORMULATION_ID", BaseTableName = "MP_FORMULATIONS" )]		public Decimal MpFormulationId 
		{ 
		    get { return _mpFormulationId; } 
			set 
			{
			    _mpFormulationId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID", BaseColumnName ="MEDICINAL_PRODUCT_ID", BaseTableName = "MP_FORMULATIONS" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_FORMULATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_FORMULATIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_FORMULATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_FORMULATIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _mpFormulationStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_FORMULATION_STATUS_ID", BaseColumnName ="MP_FORMULATION_STATUS_ID", BaseTableName = "MP_FORMULATIONS" )]		public Decimal MpFormulationStatusId 
		{ 
		    get { return _mpFormulationStatusId; } 
			set 
			{
			    _mpFormulationStatusId = value;
			}
        }

		private String _formulationName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="FORMULATION_NAME", BaseColumnName ="FORMULATION_NAME", BaseTableName = "MP_FORMULATIONS" )]		public String FormulationName 
		{ 
		    get { return _formulationName; } 
			set 
			{
			    _formulationName = value;
			}
        }

		private String _statusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS_NAME" )]		public String StatusName 
		{ 
		    get { return _statusName; } 
			set 
			{
			    _statusName = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private Decimal? _occurrences;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OCCURRENCES" )]		public Decimal? Occurrences 
		{ 
		    get { return _occurrences; } 
			set 
			{
			    _occurrences = value;
			}
        }


	}

	public partial class MpFormulationRepository : Repository<MpFormulation> 
	{
		public MpFormulationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpFormulation Get(string projectionName, System.Decimal mpFormulationId)
		{
			return ((IRepository<MpFormulation>)this).Get(projectionName, mpFormulationId, FetchMode.UseIdentityMap);
		}

		public MpFormulation Get(string projectionName, System.Decimal mpFormulationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpFormulation>)this).Get(projectionName, mpFormulationId, fetchMode);
		}

		public MpFormulation Get(Projection projection, System.Decimal mpFormulationId)
		{
			return ((IRepository<MpFormulation>)this).Get(projection, mpFormulationId, FetchMode.UseIdentityMap);
		}

		public MpFormulation Get(Projection projection, System.Decimal mpFormulationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpFormulation>)this).Get(projection, mpFormulationId, fetchMode);
		}

		public MpFormulation Get(string projectionName, System.Decimal mpFormulationId, params string[] fields)
		{
			return ((IRepository<MpFormulation>)this).Get(projectionName, mpFormulationId, fields);
		}

		public MpFormulation Get(Projection projection, System.Decimal mpFormulationId, params string[] fields)
		{
			return ((IRepository<MpFormulation>)this).Get(projection, mpFormulationId, fields);
		}

		public bool Delete(System.Decimal mpFormulationId)
		{
			var entity = new MpFormulation { MpFormulationId = mpFormulationId };
			return this.Delete(entity);
		}

		
		public void DeleteMpFormulation(Decimal? formId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteMpFormulationProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "FORM_ID"].Value = formId == null ? (object) DBNull.Value : formId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class MpFormulationFields
	{
		public const string MpFormulationId = "MpFormulationId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string MpFormulationStatusId = "MpFormulationStatusId";
		public const string FormulationName = "FormulationName";
		public const string StatusName = "StatusName";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string Occurrences = "Occurrences";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_FORMULATION_COMPONENTS")]
	public partial class MpFormulationComponent
	{
		private Decimal _mpFormulationComponentId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_FORMULATION_COMPONENT_ID", ColumnName ="MP_FORMULATION_COMPONENT_ID", BaseColumnName ="MP_FORMULATION_COMPONENT_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal MpFormulationComponentId 
		{ 
		    get { return _mpFormulationComponentId; } 
			set 
			{
			    _mpFormulationComponentId = value;
			}
        }

		private Decimal _mpFormulationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_FORMULATION_ID", BaseColumnName ="MP_FORMULATION_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal MpFormulationId 
		{ 
		    get { return _mpFormulationId; } 
			set 
			{
			    _mpFormulationId = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private Decimal _componentFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COMPONENT_FUNCTION_ID", BaseColumnName ="COMPONENT_FUNCTION_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal ComponentFunctionId 
		{ 
		    get { return _componentFunctionId; } 
			set 
			{
			    _componentFunctionId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _concentrationType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CONCENTRATION_TYPE", BaseColumnName ="CONCENTRATION_TYPE", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String ConcentrationType 
		{ 
		    get { return _concentrationType; } 
			set 
			{
			    _concentrationType = value;
			}
        }

		private Decimal? _amountValueId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="AMOUNT_VALUE_ID", BaseColumnName ="AMOUNT_VALUE_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal? AmountValueId 
		{ 
		    get { return _amountValueId; } 
			set 
			{
			    _amountValueId = value;
			}
        }

		private String _mandatoryStatement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="MANDATORY_STATEMENT", BaseColumnName ="MANDATORY_STATEMENT", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String MandatoryStatement 
		{ 
		    get { return _mandatoryStatement; } 
			set 
			{
			    _mandatoryStatement = value;
			}
        }

		private String _origin;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="ORIGIN", BaseColumnName ="ORIGIN", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String Origin 
		{ 
		    get { return _origin; } 
			set 
			{
			    _origin = value;
			}
        }

		private Decimal? _lowLimitNumeratorValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LOW_LIMIT_NUMERATOR_VALUE", BaseColumnName ="LOW_LIMIT_NUMERATOR_VALUE", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal? LowLimitNumeratorValue 
		{ 
		    get { return _lowLimitNumeratorValue; } 
			set 
			{
			    _lowLimitNumeratorValue = value;
			}
        }

		private String _lowLimitNumeratorPrefixId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOW_LIMIT_NUMERATOR_PREFIX_ID", BaseColumnName ="LOW_LIMIT_NUMERATOR_PREFIX_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String LowLimitNumeratorPrefixId 
		{ 
		    get { return _lowLimitNumeratorPrefixId; } 
			set 
			{
			    _lowLimitNumeratorPrefixId = value;
			}
        }

		private String _lowLimitNumeratorUnitId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOW_LIMIT_NUMERATOR_UNIT_ID", BaseColumnName ="LOW_LIMIT_NUMERATOR_UNIT_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String LowLimitNumeratorUnitId 
		{ 
		    get { return _lowLimitNumeratorUnitId; } 
			set 
			{
			    _lowLimitNumeratorUnitId = value;
			}
        }

		private Decimal? _lowLimitDenomValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LOW_LIMIT_DENOM_VALUE", BaseColumnName ="LOW_LIMIT_DENOM_VALUE", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal? LowLimitDenomValue 
		{ 
		    get { return _lowLimitDenomValue; } 
			set 
			{
			    _lowLimitDenomValue = value;
			}
        }

		private String _lowLimitDenomPrefixId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOW_LIMIT_DENOM_PREFIX_ID", BaseColumnName ="LOW_LIMIT_DENOM_PREFIX_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String LowLimitDenomPrefixId 
		{ 
		    get { return _lowLimitDenomPrefixId; } 
			set 
			{
			    _lowLimitDenomPrefixId = value;
			}
        }

		private String _lowLimitDenomUnitId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOW_LIMIT_DENOM_UNIT_ID", BaseColumnName ="LOW_LIMIT_DENOM_UNIT_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String LowLimitDenomUnitId 
		{ 
		    get { return _lowLimitDenomUnitId; } 
			set 
			{
			    _lowLimitDenomUnitId = value;
			}
        }

		private Decimal? _upLimitNumeratorValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="UP_LIMIT_NUMERATOR_VALUE", BaseColumnName ="UP_LIMIT_NUMERATOR_VALUE", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal? UpLimitNumeratorValue 
		{ 
		    get { return _upLimitNumeratorValue; } 
			set 
			{
			    _upLimitNumeratorValue = value;
			}
        }

		private String _upLimitNumeratorPrefixId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="UP_LIMIT_NUMERATOR_PREFIX_ID", BaseColumnName ="UP_LIMIT_NUMERATOR_PREFIX_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String UpLimitNumeratorPrefixId 
		{ 
		    get { return _upLimitNumeratorPrefixId; } 
			set 
			{
			    _upLimitNumeratorPrefixId = value;
			}
        }

		private String _upLimitNumeratorUnitId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="UP_LIMIT_NUMERATOR_UNIT_ID", BaseColumnName ="UP_LIMIT_NUMERATOR_UNIT_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String UpLimitNumeratorUnitId 
		{ 
		    get { return _upLimitNumeratorUnitId; } 
			set 
			{
			    _upLimitNumeratorUnitId = value;
			}
        }

		private Decimal? _upLimitDenomValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="UP_LIMIT_DENOM_VALUE", BaseColumnName ="UP_LIMIT_DENOM_VALUE", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal? UpLimitDenomValue 
		{ 
		    get { return _upLimitDenomValue; } 
			set 
			{
			    _upLimitDenomValue = value;
			}
        }

		private String _upLimitDenomPrefixId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="UP_LIMIT_DENOM_PREFIX_ID", BaseColumnName ="UP_LIMIT_DENOM_PREFIX_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String UpLimitDenomPrefixId 
		{ 
		    get { return _upLimitDenomPrefixId; } 
			set 
			{
			    _upLimitDenomPrefixId = value;
			}
        }

		private String _upLimitDenomUnitId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="UP_LIMIT_DENOM_UNIT_ID", BaseColumnName ="UP_LIMIT_DENOM_UNIT_ID", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String UpLimitDenomUnitId 
		{ 
		    get { return _upLimitDenomUnitId; } 
			set 
			{
			    _upLimitDenomUnitId = value;
			}
        }

		private Decimal? _componentIdr;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMPONENT_IDR", BaseColumnName ="COMPONENT_IDR", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public Decimal? ComponentIdr 
		{ 
		    get { return _componentIdr; } 
			set 
			{
			    _componentIdr = value;
			}
        }

		private String _superName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="SUPER_NAME", BaseColumnName ="SUPER_NAME", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String SuperName 
		{ 
		    get { return _superName; } 
			set 
			{
			    _superName = value;
			}
        }

		private String _isForEma;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_EMA", BaseColumnName ="IS_FOR_EMA", BaseTableName = "MP_FORMULATION_COMPONENTS" )]		public String IsForEma 
		{ 
		    get { return _isForEma; } 
			set 
			{
			    _isForEma = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _componentFunctionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="COMPONENT_FUNCTION_NAME" )]		public String ComponentFunctionName 
		{ 
		    get { return _componentFunctionName; } 
			set 
			{
			    _componentFunctionName = value;
			}
        }

		private String _amountValueName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="AMOUNT_VALUE_NAME" )]		public String AmountValueName 
		{ 
		    get { return _amountValueName; } 
			set 
			{
			    _amountValueName = value;
			}
        }


	}

	public partial class MpFormulationComponentRepository : Repository<MpFormulationComponent> 
	{
		public MpFormulationComponentRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpFormulationComponent Get(string projectionName, System.Decimal mpFormulationComponentId)
		{
			return ((IRepository<MpFormulationComponent>)this).Get(projectionName, mpFormulationComponentId, FetchMode.UseIdentityMap);
		}

		public MpFormulationComponent Get(string projectionName, System.Decimal mpFormulationComponentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpFormulationComponent>)this).Get(projectionName, mpFormulationComponentId, fetchMode);
		}

		public MpFormulationComponent Get(Projection projection, System.Decimal mpFormulationComponentId)
		{
			return ((IRepository<MpFormulationComponent>)this).Get(projection, mpFormulationComponentId, FetchMode.UseIdentityMap);
		}

		public MpFormulationComponent Get(Projection projection, System.Decimal mpFormulationComponentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpFormulationComponent>)this).Get(projection, mpFormulationComponentId, fetchMode);
		}

		public MpFormulationComponent Get(string projectionName, System.Decimal mpFormulationComponentId, params string[] fields)
		{
			return ((IRepository<MpFormulationComponent>)this).Get(projectionName, mpFormulationComponentId, fields);
		}

		public MpFormulationComponent Get(Projection projection, System.Decimal mpFormulationComponentId, params string[] fields)
		{
			return ((IRepository<MpFormulationComponent>)this).Get(projection, mpFormulationComponentId, fields);
		}

		public bool Delete(System.Decimal mpFormulationComponentId)
		{
			var entity = new MpFormulationComponent { MpFormulationComponentId = mpFormulationComponentId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpFormulationComponentFields
	{
		public const string MpFormulationComponentId = "MpFormulationComponentId";
		public const string MpFormulationId = "MpFormulationId";
		public const string XevmpdCode = "XevmpdCode";
		public const string ComponentFunctionId = "ComponentFunctionId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ConcentrationType = "ConcentrationType";
		public const string AmountValueId = "AmountValueId";
		public const string MandatoryStatement = "MandatoryStatement";
		public const string Origin = "Origin";
		public const string LowLimitNumeratorValue = "LowLimitNumeratorValue";
		public const string LowLimitNumeratorPrefixId = "LowLimitNumeratorPrefixId";
		public const string LowLimitNumeratorUnitId = "LowLimitNumeratorUnitId";
		public const string LowLimitDenomValue = "LowLimitDenomValue";
		public const string LowLimitDenomPrefixId = "LowLimitDenomPrefixId";
		public const string LowLimitDenomUnitId = "LowLimitDenomUnitId";
		public const string UpLimitNumeratorValue = "UpLimitNumeratorValue";
		public const string UpLimitNumeratorPrefixId = "UpLimitNumeratorPrefixId";
		public const string UpLimitNumeratorUnitId = "UpLimitNumeratorUnitId";
		public const string UpLimitDenomValue = "UpLimitDenomValue";
		public const string UpLimitDenomPrefixId = "UpLimitDenomPrefixId";
		public const string UpLimitDenomUnitId = "UpLimitDenomUnitId";
		public const string ComponentIdr = "ComponentIdr";
		public const string SuperName = "SuperName";
		public const string IsForEma = "IsForEma";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string SubstanceName = "SubstanceName";
		public const string ComponentFunctionName = "ComponentFunctionName";
		public const string AmountValueName = "AmountValueName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="COMPONENT_FUNCTIONS")]
	public partial class ComponentFunction
	{
		private Decimal _componentFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "COMPONENT_FUNCTION_ID", ColumnName ="COMPONENT_FUNCTION_ID", BaseColumnName ="COMPONENT_FUNCTION_ID", BaseTableName = "COMPONENT_FUNCTIONS" )]		public Decimal ComponentFunctionId 
		{ 
		    get { return _componentFunctionId; } 
			set 
			{
			    _componentFunctionId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "COMPONENT_FUNCTIONS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "COMPONENT_FUNCTIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "COMPONENT_FUNCTIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "COMPONENT_FUNCTIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "COMPONENT_FUNCTIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class ComponentFunctionRepository : Repository<ComponentFunction> 
	{
		public ComponentFunctionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ComponentFunction Get(string projectionName, System.Decimal componentFunctionId)
		{
			return ((IRepository<ComponentFunction>)this).Get(projectionName, componentFunctionId, FetchMode.UseIdentityMap);
		}

		public ComponentFunction Get(string projectionName, System.Decimal componentFunctionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ComponentFunction>)this).Get(projectionName, componentFunctionId, fetchMode);
		}

		public ComponentFunction Get(Projection projection, System.Decimal componentFunctionId)
		{
			return ((IRepository<ComponentFunction>)this).Get(projection, componentFunctionId, FetchMode.UseIdentityMap);
		}

		public ComponentFunction Get(Projection projection, System.Decimal componentFunctionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ComponentFunction>)this).Get(projection, componentFunctionId, fetchMode);
		}

		public ComponentFunction Get(string projectionName, System.Decimal componentFunctionId, params string[] fields)
		{
			return ((IRepository<ComponentFunction>)this).Get(projectionName, componentFunctionId, fields);
		}

		public ComponentFunction Get(Projection projection, System.Decimal componentFunctionId, params string[] fields)
		{
			return ((IRepository<ComponentFunction>)this).Get(projection, componentFunctionId, fields);
		}

		public bool Delete(System.Decimal componentFunctionId)
		{
			var entity = new ComponentFunction { ComponentFunctionId = componentFunctionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ComponentFunctionFields
	{
		public const string ComponentFunctionId = "ComponentFunctionId";
		public const string Name = "Name";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="AMOUNT_VALUE_TYPES")]
	public partial class AmountValueType
	{
		private Decimal _amountValueId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "AMOUNT_VALUE_ID", ColumnName ="AMOUNT_VALUE_ID", BaseColumnName ="AMOUNT_VALUE_ID", BaseTableName = "AMOUNT_VALUE_TYPES" )]		public Decimal AmountValueId 
		{ 
		    get { return _amountValueId; } 
			set 
			{
			    _amountValueId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "AMOUNT_VALUE_TYPES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "AMOUNT_VALUE_TYPES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "AMOUNT_VALUE_TYPES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "AMOUNT_VALUE_TYPES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "AMOUNT_VALUE_TYPES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "AMOUNT_VALUE_TYPES" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class AmountValueTypeRepository : Repository<AmountValueType> 
	{
		public AmountValueTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AmountValueType Get(string projectionName, System.Decimal amountValueId)
		{
			return ((IRepository<AmountValueType>)this).Get(projectionName, amountValueId, FetchMode.UseIdentityMap);
		}

		public AmountValueType Get(string projectionName, System.Decimal amountValueId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AmountValueType>)this).Get(projectionName, amountValueId, fetchMode);
		}

		public AmountValueType Get(Projection projection, System.Decimal amountValueId)
		{
			return ((IRepository<AmountValueType>)this).Get(projection, amountValueId, FetchMode.UseIdentityMap);
		}

		public AmountValueType Get(Projection projection, System.Decimal amountValueId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AmountValueType>)this).Get(projection, amountValueId, fetchMode);
		}

		public AmountValueType Get(string projectionName, System.Decimal amountValueId, params string[] fields)
		{
			return ((IRepository<AmountValueType>)this).Get(projectionName, amountValueId, fields);
		}

		public AmountValueType Get(Projection projection, System.Decimal amountValueId, params string[] fields)
		{
			return ((IRepository<AmountValueType>)this).Get(projection, amountValueId, fields);
		}

		public bool Delete(System.Decimal amountValueId)
		{
			var entity = new AmountValueType { AmountValueId = amountValueId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AmountValueTypeFields
	{
		public const string AmountValueId = "AmountValueId";
		public const string Name = "Name";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_UNITS_OF_MEASUREMENT")]
	public partial class EmaUnitOfMeasurement
	{
		private String _listName;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="LIST_NAME", BaseColumnName ="LIST_NAME", BaseTableName = "EMA_UNITS_OF_MEASUREMENT" )]		public String ListName 
		{ 
		    get { return _listName; } 
			set 
			{
			    _listName = value;
			}
        }

		private String _xevmpdUnitCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_UNIT_CODE", BaseColumnName ="XEVMPD_UNIT_CODE", BaseTableName = "EMA_UNITS_OF_MEASUREMENT" )]		public String XevmpdUnitCode 
		{ 
		    get { return _xevmpdUnitCode; } 
			set 
			{
			    _xevmpdUnitCode = value;
			}
        }

		private String _unitValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="UNIT_VALUE", BaseColumnName ="UNIT_VALUE", BaseTableName = "EMA_UNITS_OF_MEASUREMENT" )]		public String UnitValue 
		{ 
		    get { return _unitValue; } 
			set 
			{
			    _unitValue = value;
			}
        }

		private String _termType;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="TERM_TYPE", BaseColumnName ="TERM_TYPE", BaseTableName = "EMA_UNITS_OF_MEASUREMENT" )]		public String TermType 
		{ 
		    get { return _termType; } 
			set 
			{
			    _termType = value;
			}
        }


	}

	public partial class EmaUnitOfMeasurementRepository : Repository<EmaUnitOfMeasurement> 
	{
		public EmaUnitOfMeasurementRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaUnitOfMeasurementFields
	{
		public const string ListName = "ListName";
		public const string XevmpdUnitCode = "XevmpdUnitCode";
		public const string UnitValue = "UnitValue";
		public const string TermType = "TermType";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="AGREEMENT_TERRITORIES")]
	public partial class AgreementTerritory
	{
		private Decimal _agreementTerritoryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "AGREEMENT_TERRITORY_ID", ColumnName ="AGREEMENT_TERRITORY_ID", BaseColumnName ="AGREEMENT_TERRITORY_ID", BaseTableName = "AGREEMENT_TERRITORIES" )]		public Decimal AgreementTerritoryId 
		{ 
		    get { return _agreementTerritoryId; } 
			set 
			{
			    _agreementTerritoryId = value;
			}
        }

		private Decimal? _agreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="AGREEMENT_ID", BaseColumnName ="AGREEMENT_ID", BaseTableName = "AGREEMENT_TERRITORIES" )]		public Decimal? AgreementId 
		{ 
		    get { return _agreementId; } 
			set 
			{
			    _agreementId = value;
			}
        }

		private Decimal? _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COUNTRY_ID", BaseColumnName ="COUNTRY_ID", BaseTableName = "AGREEMENT_TERRITORIES" )]		public Decimal? CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "AGREEMENT_TERRITORIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "AGREEMENT_TERRITORIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "AGREEMENT_TERRITORIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "AGREEMENT_TERRITORIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class AgreementTerritoryRepository : Repository<AgreementTerritory> 
	{
		public AgreementTerritoryRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AgreementTerritory Get(string projectionName, System.Decimal agreementTerritoryId)
		{
			return ((IRepository<AgreementTerritory>)this).Get(projectionName, agreementTerritoryId, FetchMode.UseIdentityMap);
		}

		public AgreementTerritory Get(string projectionName, System.Decimal agreementTerritoryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementTerritory>)this).Get(projectionName, agreementTerritoryId, fetchMode);
		}

		public AgreementTerritory Get(Projection projection, System.Decimal agreementTerritoryId)
		{
			return ((IRepository<AgreementTerritory>)this).Get(projection, agreementTerritoryId, FetchMode.UseIdentityMap);
		}

		public AgreementTerritory Get(Projection projection, System.Decimal agreementTerritoryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AgreementTerritory>)this).Get(projection, agreementTerritoryId, fetchMode);
		}

		public AgreementTerritory Get(string projectionName, System.Decimal agreementTerritoryId, params string[] fields)
		{
			return ((IRepository<AgreementTerritory>)this).Get(projectionName, agreementTerritoryId, fields);
		}

		public AgreementTerritory Get(Projection projection, System.Decimal agreementTerritoryId, params string[] fields)
		{
			return ((IRepository<AgreementTerritory>)this).Get(projection, agreementTerritoryId, fields);
		}

		public bool Delete(System.Decimal agreementTerritoryId)
		{
			var entity = new AgreementTerritory { AgreementTerritoryId = agreementTerritoryId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AgreementTerritoryFields
	{
		public const string AgreementTerritoryId = "AgreementTerritoryId";
		public const string AgreementId = "AgreementId";
		public const string CountryId = "CountryId";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_STATUSES")]
	public partial class DossierStatus
	{
		private Decimal _dossierStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_STATUS_ID", ColumnName ="DOSSIER_STATUS_ID", BaseColumnName ="DOSSIER_STATUS_ID", BaseTableName = "DOSSIER_STATUSES" )]		public Decimal DossierStatusId 
		{ 
		    get { return _dossierStatusId; } 
			set 
			{
			    _dossierStatusId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "DOSSIER_STATUSES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class DossierStatusRepository : Repository<DossierStatus> 
	{
		public DossierStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierStatus Get(string projectionName, System.Decimal dossierStatusId)
		{
			return ((IRepository<DossierStatus>)this).Get(projectionName, dossierStatusId, FetchMode.UseIdentityMap);
		}

		public DossierStatus Get(string projectionName, System.Decimal dossierStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierStatus>)this).Get(projectionName, dossierStatusId, fetchMode);
		}

		public DossierStatus Get(Projection projection, System.Decimal dossierStatusId)
		{
			return ((IRepository<DossierStatus>)this).Get(projection, dossierStatusId, FetchMode.UseIdentityMap);
		}

		public DossierStatus Get(Projection projection, System.Decimal dossierStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierStatus>)this).Get(projection, dossierStatusId, fetchMode);
		}

		public DossierStatus Get(string projectionName, System.Decimal dossierStatusId, params string[] fields)
		{
			return ((IRepository<DossierStatus>)this).Get(projectionName, dossierStatusId, fields);
		}

		public DossierStatus Get(Projection projection, System.Decimal dossierStatusId, params string[] fields)
		{
			return ((IRepository<DossierStatus>)this).Get(projection, dossierStatusId, fields);
		}

		public bool Delete(System.Decimal dossierStatusId)
		{
			var entity = new DossierStatus { DossierStatusId = dossierStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierStatusFields
	{
		public const string DossierStatusId = "DossierStatusId";
		public const string Name = "Name";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_ADMIN_ROUTES")]
	public partial class DossierAdminRoute
	{
		private Decimal _dossierAdminRouteId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_ADMIN_ROUTE_ID", ColumnName ="DOSSIER_ADMIN_ROUTE_ID", BaseColumnName ="DOSSIER_ADMIN_ROUTE_ID", BaseTableName = "DOSSIER_ADMIN_ROUTES" )]		public Decimal DossierAdminRouteId 
		{ 
		    get { return _dossierAdminRouteId; } 
			set 
			{
			    _dossierAdminRouteId = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "DOSSIER_ADMIN_ROUTES" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "DOSSIER_ADMIN_ROUTES" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_ADMIN_ROUTES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_ADMIN_ROUTES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_ADMIN_ROUTES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_ADMIN_ROUTES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _routeOfAdministrationValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ROUTE_OF_ADMINISTRATION_VALUE" )]		public String RouteOfAdministrationValue 
		{ 
		    get { return _routeOfAdministrationValue; } 
			set 
			{
			    _routeOfAdministrationValue = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }


	}

	public partial class DossierAdminRouteRepository : Repository<DossierAdminRoute> 
	{
		public DossierAdminRouteRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierAdminRoute Get(string projectionName, System.Decimal dossierAdminRouteId)
		{
			return ((IRepository<DossierAdminRoute>)this).Get(projectionName, dossierAdminRouteId, FetchMode.UseIdentityMap);
		}

		public DossierAdminRoute Get(string projectionName, System.Decimal dossierAdminRouteId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierAdminRoute>)this).Get(projectionName, dossierAdminRouteId, fetchMode);
		}

		public DossierAdminRoute Get(Projection projection, System.Decimal dossierAdminRouteId)
		{
			return ((IRepository<DossierAdminRoute>)this).Get(projection, dossierAdminRouteId, FetchMode.UseIdentityMap);
		}

		public DossierAdminRoute Get(Projection projection, System.Decimal dossierAdminRouteId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierAdminRoute>)this).Get(projection, dossierAdminRouteId, fetchMode);
		}

		public DossierAdminRoute Get(string projectionName, System.Decimal dossierAdminRouteId, params string[] fields)
		{
			return ((IRepository<DossierAdminRoute>)this).Get(projectionName, dossierAdminRouteId, fields);
		}

		public DossierAdminRoute Get(Projection projection, System.Decimal dossierAdminRouteId, params string[] fields)
		{
			return ((IRepository<DossierAdminRoute>)this).Get(projection, dossierAdminRouteId, fields);
		}

		public bool Delete(System.Decimal dossierAdminRouteId)
		{
			var entity = new DossierAdminRoute { DossierAdminRouteId = dossierAdminRouteId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierAdminRouteFields
	{
		public const string DossierAdminRouteId = "DossierAdminRouteId";
		public const string DossierId = "DossierId";
		public const string XevmpdCode = "XevmpdCode";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string RouteOfAdministrationValue = "RouteOfAdministrationValue";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_ATC_CODES")]
	public partial class DossierAtcCode
	{
		private Decimal _dossierAtcCodeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_ATC_CODE_ID", ColumnName ="DOSSIER_ATC_CODE_ID", BaseColumnName ="DOSSIER_ATC_CODE_ID", BaseTableName = "DOSSIER_ATC_CODES" )]		public Decimal DossierAtcCodeId 
		{ 
		    get { return _dossierAtcCodeId; } 
			set 
			{
			    _dossierAtcCodeId = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "DOSSIER_ATC_CODES" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "DOSSIER_ATC_CODES" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_ATC_CODES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_ATC_CODES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_ATC_CODES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_ATC_CODES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _atcCode;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ATC_CODE", BaseColumnName ="ATC_CODE", BaseTableName = "DOSSIER_ATC_CODES" )]		public String AtcCode 
		{ 
		    get { return _atcCode; } 
			set 
			{
			    _atcCode = value;
			}
        }

		private Decimal? _sidAtcCodeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SID_ATC_CODE_ID", BaseColumnName ="SID_ATC_CODE_ID", BaseTableName = "DOSSIER_ATC_CODES" )]		public Decimal? SidAtcCodeId 
		{ 
		    get { return _sidAtcCodeId; } 
			set 
			{
			    _sidAtcCodeId = value;
			}
        }

		private String _value;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VALUE" )]		public String Value 
		{ 
		    get { return _value; } 
			set 
			{
			    _value = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _atcValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ATC_VALUE" )]		public String AtcValue 
		{ 
		    get { return _atcValue; } 
			set 
			{
			    _atcValue = value;
			}
        }


	}

	public partial class DossierAtcCodeRepository : Repository<DossierAtcCode> 
	{
		public DossierAtcCodeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierAtcCode Get(string projectionName, System.Decimal dossierAtcCodeId)
		{
			return ((IRepository<DossierAtcCode>)this).Get(projectionName, dossierAtcCodeId, FetchMode.UseIdentityMap);
		}

		public DossierAtcCode Get(string projectionName, System.Decimal dossierAtcCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierAtcCode>)this).Get(projectionName, dossierAtcCodeId, fetchMode);
		}

		public DossierAtcCode Get(Projection projection, System.Decimal dossierAtcCodeId)
		{
			return ((IRepository<DossierAtcCode>)this).Get(projection, dossierAtcCodeId, FetchMode.UseIdentityMap);
		}

		public DossierAtcCode Get(Projection projection, System.Decimal dossierAtcCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierAtcCode>)this).Get(projection, dossierAtcCodeId, fetchMode);
		}

		public DossierAtcCode Get(string projectionName, System.Decimal dossierAtcCodeId, params string[] fields)
		{
			return ((IRepository<DossierAtcCode>)this).Get(projectionName, dossierAtcCodeId, fields);
		}

		public DossierAtcCode Get(Projection projection, System.Decimal dossierAtcCodeId, params string[] fields)
		{
			return ((IRepository<DossierAtcCode>)this).Get(projection, dossierAtcCodeId, fields);
		}

		public bool Delete(System.Decimal dossierAtcCodeId)
		{
			var entity = new DossierAtcCode { DossierAtcCodeId = dossierAtcCodeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierAtcCodeFields
	{
		public const string DossierAtcCodeId = "DossierAtcCodeId";
		public const string XevmpdCode = "XevmpdCode";
		public const string DossierId = "DossierId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string AtcCode = "AtcCode";
		public const string SidAtcCodeId = "SidAtcCodeId";
		public const string Value = "Value";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string AtcValue = "AtcValue";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_PROC_NUMBERS")]
	public partial class DossierProcNumber
	{
		private Decimal _dossierProcNumberId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_PROC_NUMBER_ID", ColumnName ="DOSSIER_PROC_NUMBER_ID", BaseColumnName ="DOSSIER_PROC_NUMBER_ID", BaseTableName = "DOSSIER_PROC_NUMBERS" )]		public Decimal DossierProcNumberId 
		{ 
		    get { return _dossierProcNumberId; } 
			set 
			{
			    _dossierProcNumberId = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "DOSSIER_PROC_NUMBERS" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private String _procNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PROC_NUMBER", BaseColumnName ="PROC_NUMBER", BaseTableName = "DOSSIER_PROC_NUMBERS" )]		public String ProcNumber 
		{ 
		    get { return _procNumber; } 
			set 
			{
			    _procNumber = value;
			}
        }

		private String _status;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="STATUS", BaseColumnName ="STATUS", BaseTableName = "DOSSIER_PROC_NUMBERS" )]		public String Status 
		{ 
		    get { return _status; } 
			set 
			{
			    _status = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_PROC_NUMBERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_PROC_NUMBERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_PROC_NUMBERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_PROC_NUMBERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }


	}

	public partial class DossierProcNumberRepository : Repository<DossierProcNumber> 
	{
		public DossierProcNumberRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierProcNumber Get(string projectionName, System.Decimal dossierProcNumberId)
		{
			return ((IRepository<DossierProcNumber>)this).Get(projectionName, dossierProcNumberId, FetchMode.UseIdentityMap);
		}

		public DossierProcNumber Get(string projectionName, System.Decimal dossierProcNumberId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierProcNumber>)this).Get(projectionName, dossierProcNumberId, fetchMode);
		}

		public DossierProcNumber Get(Projection projection, System.Decimal dossierProcNumberId)
		{
			return ((IRepository<DossierProcNumber>)this).Get(projection, dossierProcNumberId, FetchMode.UseIdentityMap);
		}

		public DossierProcNumber Get(Projection projection, System.Decimal dossierProcNumberId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierProcNumber>)this).Get(projection, dossierProcNumberId, fetchMode);
		}

		public DossierProcNumber Get(string projectionName, System.Decimal dossierProcNumberId, params string[] fields)
		{
			return ((IRepository<DossierProcNumber>)this).Get(projectionName, dossierProcNumberId, fields);
		}

		public DossierProcNumber Get(Projection projection, System.Decimal dossierProcNumberId, params string[] fields)
		{
			return ((IRepository<DossierProcNumber>)this).Get(projection, dossierProcNumberId, fields);
		}

		public bool Delete(System.Decimal dossierProcNumberId)
		{
			var entity = new DossierProcNumber { DossierProcNumberId = dossierProcNumberId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierProcNumberFields
	{
		public const string DossierProcNumberId = "DossierProcNumberId";
		public const string DossierId = "DossierId";
		public const string ProcNumber = "ProcNumber";
		public const string Status = "Status";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="HELP_FIELD_TYPES")]
	public partial class HelpFieldType
	{
		private Decimal _helpFieldTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="HELP_FIELD_TYPE_ID", BaseColumnName ="HELP_FIELD_TYPE_ID", BaseTableName = "HELP_FIELD_TYPES" )]		public Decimal HelpFieldTypeId 
		{ 
		    get { return _helpFieldTypeId; } 
			set 
			{
			    _helpFieldTypeId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "HELP_FIELD_TYPES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "HELP_FIELD_TYPES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "HELP_FIELD_TYPES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "HELP_FIELD_TYPES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "HELP_FIELD_TYPES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class HelpFieldTypeRepository : Repository<HelpFieldType> 
	{
		public HelpFieldTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public HelpFieldType Get(string projectionName, System.Decimal helpFieldTypeId)
		{
			return ((IRepository<HelpFieldType>)this).Get(projectionName, helpFieldTypeId, FetchMode.UseIdentityMap);
		}

		public HelpFieldType Get(string projectionName, System.Decimal helpFieldTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<HelpFieldType>)this).Get(projectionName, helpFieldTypeId, fetchMode);
		}

		public HelpFieldType Get(Projection projection, System.Decimal helpFieldTypeId)
		{
			return ((IRepository<HelpFieldType>)this).Get(projection, helpFieldTypeId, FetchMode.UseIdentityMap);
		}

		public HelpFieldType Get(Projection projection, System.Decimal helpFieldTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<HelpFieldType>)this).Get(projection, helpFieldTypeId, fetchMode);
		}

		public HelpFieldType Get(string projectionName, System.Decimal helpFieldTypeId, params string[] fields)
		{
			return ((IRepository<HelpFieldType>)this).Get(projectionName, helpFieldTypeId, fields);
		}

		public HelpFieldType Get(Projection projection, System.Decimal helpFieldTypeId, params string[] fields)
		{
			return ((IRepository<HelpFieldType>)this).Get(projection, helpFieldTypeId, fields);
		}

		public bool Delete(System.Decimal helpFieldTypeId)
		{
			var entity = new HelpFieldType { HelpFieldTypeId = helpFieldTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class HelpFieldTypeFields
	{
		public const string HelpFieldTypeId = "HelpFieldTypeId";
		public const string Name = "Name";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="HELP_FIELDS")]
	public partial class HelpField
	{
		private Decimal _helpFieldId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "HELP_FIELD_ID", ColumnName ="HELP_FIELD_ID", BaseColumnName ="HELP_FIELD_ID", BaseTableName = "HELP_FIELDS" )]		public Decimal HelpFieldId 
		{ 
		    get { return _helpFieldId; } 
			set 
			{
			    _helpFieldId = value;
			}
        }

		private String _helpFieldKey;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="HELP_FIELD_KEY", BaseColumnName ="HELP_FIELD_KEY", BaseTableName = "HELP_FIELDS" )]		public String HelpFieldKey 
		{ 
		    get { return _helpFieldKey; } 
			set 
			{
			    _helpFieldKey = value;
			}
        }

		private String _helpFieldText;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="HELP_FIELD_TEXT", BaseColumnName ="HELP_FIELD_TEXT", BaseTableName = "HELP_FIELDS" )]		public String HelpFieldText 
		{ 
		    get { return _helpFieldText; } 
			set 
			{
			    _helpFieldText = value;
			}
        }

		private Decimal _helpFieldTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="HELP_FIELD_TYPE_ID", BaseColumnName ="HELP_FIELD_TYPE_ID", BaseTableName = "HELP_FIELDS" )]		public Decimal HelpFieldTypeId 
		{ 
		    get { return _helpFieldTypeId; } 
			set 
			{
			    _helpFieldTypeId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "HELP_FIELDS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "HELP_FIELDS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "HELP_FIELDS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "HELP_FIELDS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "HELP_FIELDS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class HelpFieldRepository : Repository<HelpField> 
	{
		public HelpFieldRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public HelpField Get(string projectionName, System.Decimal helpFieldId)
		{
			return ((IRepository<HelpField>)this).Get(projectionName, helpFieldId, FetchMode.UseIdentityMap);
		}

		public HelpField Get(string projectionName, System.Decimal helpFieldId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<HelpField>)this).Get(projectionName, helpFieldId, fetchMode);
		}

		public HelpField Get(Projection projection, System.Decimal helpFieldId)
		{
			return ((IRepository<HelpField>)this).Get(projection, helpFieldId, FetchMode.UseIdentityMap);
		}

		public HelpField Get(Projection projection, System.Decimal helpFieldId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<HelpField>)this).Get(projection, helpFieldId, fetchMode);
		}

		public HelpField Get(string projectionName, System.Decimal helpFieldId, params string[] fields)
		{
			return ((IRepository<HelpField>)this).Get(projectionName, helpFieldId, fields);
		}

		public HelpField Get(Projection projection, System.Decimal helpFieldId, params string[] fields)
		{
			return ((IRepository<HelpField>)this).Get(projection, helpFieldId, fields);
		}

		public bool Delete(System.Decimal helpFieldId)
		{
			var entity = new HelpField { HelpFieldId = helpFieldId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class HelpFieldFields
	{
		public const string HelpFieldId = "HelpFieldId";
		public const string HelpFieldKey = "HelpFieldKey";
		public const string HelpFieldText = "HelpFieldText";
		public const string HelpFieldTypeId = "HelpFieldTypeId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="THIRD_PARTY_QPPV_CONTACT_MEANS")]
	public partial class ThirdPartyQppvContactMean
	{
		private Decimal _tpqqpvContactMeanId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "TPQPPV_CONTACT_MEAN_ID", ColumnName ="TPQQPV_CONTACT_MEAN_ID", BaseColumnName ="TPQQPV_CONTACT_MEAN_ID", BaseTableName = "THIRD_PARTY_QPPV_CONTACT_MEANS" )]		public Decimal TpqqpvContactMeanId 
		{ 
		    get { return _tpqqpvContactMeanId; } 
			set 
			{
			    _tpqqpvContactMeanId = value;
			}
        }

		private Decimal _agreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="AGREEMENT_ID", BaseColumnName ="AGREEMENT_ID", BaseTableName = "THIRD_PARTY_QPPV_CONTACT_MEANS" )]		public Decimal AgreementId 
		{ 
		    get { return _agreementId; } 
			set 
			{
			    _agreementId = value;
			}
        }

		private Decimal? _phoneNumber;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PHONE_NUMBER", BaseColumnName ="PHONE_NUMBER", BaseTableName = "THIRD_PARTY_QPPV_CONTACT_MEANS" )]		public Decimal? PhoneNumber 
		{ 
		    get { return _phoneNumber; } 
			set 
			{
			    _phoneNumber = value;
			}
        }

		private Decimal? _faxNumber;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="FAX_NUMBER", BaseColumnName ="FAX_NUMBER", BaseTableName = "THIRD_PARTY_QPPV_CONTACT_MEANS" )]		public Decimal? FaxNumber 
		{ 
		    get { return _faxNumber; } 
			set 
			{
			    _faxNumber = value;
			}
        }

		private String _email;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="EMAIL", BaseColumnName ="EMAIL", BaseTableName = "THIRD_PARTY_QPPV_CONTACT_MEANS" )]		public String Email 
		{ 
		    get { return _email; } 
			set 
			{
			    _email = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "THIRD_PARTY_QPPV_CONTACT_MEANS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "THIRD_PARTY_QPPV_CONTACT_MEANS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "THIRD_PARTY_QPPV_CONTACT_MEANS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _modifiedDate;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "THIRD_PARTY_QPPV_CONTACT_MEANS" )]		public String ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class ThirdPartyQppvContactMeanRepository : Repository<ThirdPartyQppvContactMean> 
	{
		public ThirdPartyQppvContactMeanRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ThirdPartyQppvContactMean Get(string projectionName, System.Decimal tpqqpvContactMeanId)
		{
			return ((IRepository<ThirdPartyQppvContactMean>)this).Get(projectionName, tpqqpvContactMeanId, FetchMode.UseIdentityMap);
		}

		public ThirdPartyQppvContactMean Get(string projectionName, System.Decimal tpqqpvContactMeanId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ThirdPartyQppvContactMean>)this).Get(projectionName, tpqqpvContactMeanId, fetchMode);
		}

		public ThirdPartyQppvContactMean Get(Projection projection, System.Decimal tpqqpvContactMeanId)
		{
			return ((IRepository<ThirdPartyQppvContactMean>)this).Get(projection, tpqqpvContactMeanId, FetchMode.UseIdentityMap);
		}

		public ThirdPartyQppvContactMean Get(Projection projection, System.Decimal tpqqpvContactMeanId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ThirdPartyQppvContactMean>)this).Get(projection, tpqqpvContactMeanId, fetchMode);
		}

		public ThirdPartyQppvContactMean Get(string projectionName, System.Decimal tpqqpvContactMeanId, params string[] fields)
		{
			return ((IRepository<ThirdPartyQppvContactMean>)this).Get(projectionName, tpqqpvContactMeanId, fields);
		}

		public ThirdPartyQppvContactMean Get(Projection projection, System.Decimal tpqqpvContactMeanId, params string[] fields)
		{
			return ((IRepository<ThirdPartyQppvContactMean>)this).Get(projection, tpqqpvContactMeanId, fields);
		}

		public bool Delete(System.Decimal tpqqpvContactMeanId)
		{
			var entity = new ThirdPartyQppvContactMean { TpqqpvContactMeanId = tpqqpvContactMeanId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ThirdPartyQppvContactMeanFields
	{
		public const string TpqqpvContactMeanId = "TpqqpvContactMeanId";
		public const string AgreementId = "AgreementId";
		public const string PhoneNumber = "PhoneNumber";
		public const string FaxNumber = "FaxNumber";
		public const string Email = "Email";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PSMF_LOCATIONS")]
	public partial class PsmfLocation
	{
		private Decimal _psmfLocationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "PSMF_LOCATION_ID", ColumnName ="PSMF_LOCATION_ID", BaseColumnName ="PSMF_LOCATION_ID", BaseTableName = "PSMF_LOCATIONS" )]		public Decimal PsmfLocationId 
		{ 
		    get { return _psmfLocationId; } 
			set 
			{
			    _psmfLocationId = value;
			}
        }

		private String _psmfLocationName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PSMF_LOCATION_NAME", BaseColumnName ="PSMF_LOCATION_NAME", BaseTableName = "PSMF_LOCATIONS" )]		public String PsmfLocationName 
		{ 
		    get { return _psmfLocationName; } 
			set 
			{
			    _psmfLocationName = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "PSMF_LOCATIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "PSMF_LOCATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "PSMF_LOCATIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "PSMF_LOCATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "PSMF_LOCATIONS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class PsmfLocationRepository : Repository<PsmfLocation> 
	{
		public PsmfLocationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public PsmfLocation Get(string projectionName, System.Decimal psmfLocationId)
		{
			return ((IRepository<PsmfLocation>)this).Get(projectionName, psmfLocationId, FetchMode.UseIdentityMap);
		}

		public PsmfLocation Get(string projectionName, System.Decimal psmfLocationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PsmfLocation>)this).Get(projectionName, psmfLocationId, fetchMode);
		}

		public PsmfLocation Get(Projection projection, System.Decimal psmfLocationId)
		{
			return ((IRepository<PsmfLocation>)this).Get(projection, psmfLocationId, FetchMode.UseIdentityMap);
		}

		public PsmfLocation Get(Projection projection, System.Decimal psmfLocationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PsmfLocation>)this).Get(projection, psmfLocationId, fetchMode);
		}

		public PsmfLocation Get(string projectionName, System.Decimal psmfLocationId, params string[] fields)
		{
			return ((IRepository<PsmfLocation>)this).Get(projectionName, psmfLocationId, fields);
		}

		public PsmfLocation Get(Projection projection, System.Decimal psmfLocationId, params string[] fields)
		{
			return ((IRepository<PsmfLocation>)this).Get(projection, psmfLocationId, fields);
		}

		public bool Delete(System.Decimal psmfLocationId)
		{
			var entity = new PsmfLocation { PsmfLocationId = psmfLocationId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PsmfLocationFields
	{
		public const string PsmfLocationId = "PsmfLocationId";
		public const string PsmfLocationName = "PsmfLocationName";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="GROUPS")]
	public partial class Group
	{
		private Decimal _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "GROUP_ID", ColumnName ="GROUP_ID", BaseColumnName ="GROUP_ID", BaseTableName = "GROUPS" )]		public Decimal GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private String _groupName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUP_NAME", BaseColumnName ="GROUP_NAME", BaseTableName = "GROUPS" )]		public String GroupName 
		{ 
		    get { return _groupName; } 
			set 
			{
			    _groupName = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "GROUPS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "GROUPS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "GROUPS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "GROUPS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "GROUPS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class GroupRepository : Repository<Group> 
	{
		public GroupRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Group Get(string projectionName, System.Decimal groupId)
		{
			return ((IRepository<Group>)this).Get(projectionName, groupId, FetchMode.UseIdentityMap);
		}

		public Group Get(string projectionName, System.Decimal groupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Group>)this).Get(projectionName, groupId, fetchMode);
		}

		public Group Get(Projection projection, System.Decimal groupId)
		{
			return ((IRepository<Group>)this).Get(projection, groupId, FetchMode.UseIdentityMap);
		}

		public Group Get(Projection projection, System.Decimal groupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Group>)this).Get(projection, groupId, fetchMode);
		}

		public Group Get(string projectionName, System.Decimal groupId, params string[] fields)
		{
			return ((IRepository<Group>)this).Get(projectionName, groupId, fields);
		}

		public Group Get(Projection projection, System.Decimal groupId, params string[] fields)
		{
			return ((IRepository<Group>)this).Get(projection, groupId, fields);
		}

		public bool Delete(System.Decimal groupId)
		{
			var entity = new Group { GroupId = groupId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class GroupFields
	{
		public const string GroupId = "GroupId";
		public const string GroupName = "GroupName";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="GROUP_COUNTRIES")]
	public partial class GroupCountry
	{
		private Decimal _groupCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "GROUP_COUNTRY_ID", ColumnName ="GROUP_COUNTRY_ID", BaseColumnName ="GROUP_COUNTRY_ID", BaseTableName = "GROUP_COUNTRIES" )]		public Decimal GroupCountryId 
		{ 
		    get { return _groupCountryId; } 
			set 
			{
			    _groupCountryId = value;
			}
        }

		private Decimal _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="GROUP_ID", BaseColumnName ="GROUP_ID", BaseTableName = "GROUP_COUNTRIES" )]		public Decimal GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID", BaseColumnName ="COUNTRY_ID", BaseTableName = "GROUP_COUNTRIES" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "GROUP_COUNTRIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "GROUP_COUNTRIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "GROUP_COUNTRIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "GROUP_COUNTRIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class GroupCountryRepository : Repository<GroupCountry> 
	{
		public GroupCountryRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public GroupCountry Get(string projectionName, System.Decimal groupCountryId)
		{
			return ((IRepository<GroupCountry>)this).Get(projectionName, groupCountryId, FetchMode.UseIdentityMap);
		}

		public GroupCountry Get(string projectionName, System.Decimal groupCountryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<GroupCountry>)this).Get(projectionName, groupCountryId, fetchMode);
		}

		public GroupCountry Get(Projection projection, System.Decimal groupCountryId)
		{
			return ((IRepository<GroupCountry>)this).Get(projection, groupCountryId, FetchMode.UseIdentityMap);
		}

		public GroupCountry Get(Projection projection, System.Decimal groupCountryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<GroupCountry>)this).Get(projection, groupCountryId, fetchMode);
		}

		public GroupCountry Get(string projectionName, System.Decimal groupCountryId, params string[] fields)
		{
			return ((IRepository<GroupCountry>)this).Get(projectionName, groupCountryId, fields);
		}

		public GroupCountry Get(Projection projection, System.Decimal groupCountryId, params string[] fields)
		{
			return ((IRepository<GroupCountry>)this).Get(projection, groupCountryId, fields);
		}

		public bool Delete(System.Decimal groupCountryId)
		{
			var entity = new GroupCountry { GroupCountryId = groupCountryId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class GroupCountryFields
	{
		public const string GroupCountryId = "GroupCountryId";
		public const string GroupId = "GroupId";
		public const string CountryId = "CountryId";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="USER_ROLE_ENTITIES")]
	public partial class UserRoleEntity
	{
		private Decimal _userId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="USER_ID", BaseColumnName ="USER_ID", BaseTableName = "USER_ROLE_ENTITIES" )]		public Decimal UserId 
		{ 
		    get { return _userId; } 
			set 
			{
			    _userId = value;
			}
        }

		private Decimal _roleId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="ROLE_ID", BaseColumnName ="ROLE_ID", BaseTableName = "USER_ROLE_ENTITIES" )]		public Decimal RoleId 
		{ 
		    get { return _roleId; } 
			set 
			{
			    _roleId = value;
			}
        }

		private Decimal _entityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="ENTITY_ID", BaseColumnName ="ENTITY_ID", BaseTableName = "USER_ROLE_ENTITIES" )]		public Decimal EntityId 
		{ 
		    get { return _entityId; } 
			set 
			{
			    _entityId = value;
			}
        }


	}

	public partial class UserRoleEntityRepository : Repository<UserRoleEntity> 
	{
		public UserRoleEntityRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class UserRoleEntityFields
	{
		public const string UserId = "UserId";
		public const string RoleId = "RoleId";
		public const string EntityId = "EntityId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="USER_ROLE_GROUPS")]
	public partial class UserRoleGroup
	{
		private Decimal _userRoleGroupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "USER_ROLE_GROUP_ID", ColumnName ="USER_ROLE_GROUP_ID", BaseColumnName ="USER_ROLE_GROUP_ID", BaseTableName = "USER_ROLE_GROUPS" )]		public Decimal UserRoleGroupId 
		{ 
		    get { return _userRoleGroupId; } 
			set 
			{
			    _userRoleGroupId = value;
			}
        }

		private Decimal _userId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="USER_ID", BaseColumnName ="USER_ID", BaseTableName = "USER_ROLE_GROUPS" )]		public Decimal UserId 
		{ 
		    get { return _userId; } 
			set 
			{
			    _userId = value;
			}
        }

		private Decimal _roleId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ROLE_ID", BaseColumnName ="ROLE_ID", BaseTableName = "USER_ROLE_GROUPS" )]		public Decimal RoleId 
		{ 
		    get { return _roleId; } 
			set 
			{
			    _roleId = value;
			}
        }

		private Decimal? _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="GROUP_ID", BaseColumnName ="GROUP_ID", BaseTableName = "USER_ROLE_GROUPS" )]		public Decimal? GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private String _userName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="USER_NAME" )]		public String UserName 
		{ 
		    get { return _userName; } 
			set 
			{
			    _userName = value;
			}
        }

		private String _roleName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ROLE_NAME" )]		public String RoleName 
		{ 
		    get { return _roleName; } 
			set 
			{
			    _roleName = value;
			}
        }

		private String _groupName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUP_NAME" )]		public String GroupName 
		{ 
		    get { return _groupName; } 
			set 
			{
			    _groupName = value;
			}
        }


	}

	public partial class UserRoleGroupRepository : Repository<UserRoleGroup> 
	{
		public UserRoleGroupRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public UserRoleGroup Get(string projectionName, System.Decimal userRoleGroupId)
		{
			return ((IRepository<UserRoleGroup>)this).Get(projectionName, userRoleGroupId, FetchMode.UseIdentityMap);
		}

		public UserRoleGroup Get(string projectionName, System.Decimal userRoleGroupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<UserRoleGroup>)this).Get(projectionName, userRoleGroupId, fetchMode);
		}

		public UserRoleGroup Get(Projection projection, System.Decimal userRoleGroupId)
		{
			return ((IRepository<UserRoleGroup>)this).Get(projection, userRoleGroupId, FetchMode.UseIdentityMap);
		}

		public UserRoleGroup Get(Projection projection, System.Decimal userRoleGroupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<UserRoleGroup>)this).Get(projection, userRoleGroupId, fetchMode);
		}

		public UserRoleGroup Get(string projectionName, System.Decimal userRoleGroupId, params string[] fields)
		{
			return ((IRepository<UserRoleGroup>)this).Get(projectionName, userRoleGroupId, fields);
		}

		public UserRoleGroup Get(Projection projection, System.Decimal userRoleGroupId, params string[] fields)
		{
			return ((IRepository<UserRoleGroup>)this).Get(projection, userRoleGroupId, fields);
		}

		public bool Delete(System.Decimal userRoleGroupId)
		{
			var entity = new UserRoleGroup { UserRoleGroupId = userRoleGroupId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class UserRoleGroupFields
	{
		public const string UserRoleGroupId = "UserRoleGroupId";
		public const string UserId = "UserId";
		public const string RoleId = "RoleId";
		public const string GroupId = "GroupId";
		public const string UserName = "UserName";
		public const string RoleName = "RoleName";
		public const string GroupName = "GroupName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="AUTHORISATION_PROCEDURES")]
	public partial class AuthorisationProcedure
	{
		private Decimal _authorisationProcedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "AUTHORISATION_PROCEDURE_ID", ColumnName ="AUTHORISATION_PROCEDURE_ID", BaseColumnName ="AUTHORISATION_PROCEDURE_ID", BaseTableName = "AUTHORISATION_PROCEDURES" )]		public Decimal AuthorisationProcedureId 
		{ 
		    get { return _authorisationProcedureId; } 
			set 
			{
			    _authorisationProcedureId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "AUTHORISATION_PROCEDURES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "AUTHORISATION_PROCEDURES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "AUTHORISATION_PROCEDURES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "AUTHORISATION_PROCEDURES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "AUTHORISATION_PROCEDURES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "AUTHORISATION_PROCEDURES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class AuthorisationProcedureRepository : Repository<AuthorisationProcedure> 
	{
		public AuthorisationProcedureRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AuthorisationProcedure Get(string projectionName, System.Decimal authorisationProcedureId)
		{
			return ((IRepository<AuthorisationProcedure>)this).Get(projectionName, authorisationProcedureId, FetchMode.UseIdentityMap);
		}

		public AuthorisationProcedure Get(string projectionName, System.Decimal authorisationProcedureId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AuthorisationProcedure>)this).Get(projectionName, authorisationProcedureId, fetchMode);
		}

		public AuthorisationProcedure Get(Projection projection, System.Decimal authorisationProcedureId)
		{
			return ((IRepository<AuthorisationProcedure>)this).Get(projection, authorisationProcedureId, FetchMode.UseIdentityMap);
		}

		public AuthorisationProcedure Get(Projection projection, System.Decimal authorisationProcedureId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AuthorisationProcedure>)this).Get(projection, authorisationProcedureId, fetchMode);
		}

		public AuthorisationProcedure Get(string projectionName, System.Decimal authorisationProcedureId, params string[] fields)
		{
			return ((IRepository<AuthorisationProcedure>)this).Get(projectionName, authorisationProcedureId, fields);
		}

		public AuthorisationProcedure Get(Projection projection, System.Decimal authorisationProcedureId, params string[] fields)
		{
			return ((IRepository<AuthorisationProcedure>)this).Get(projection, authorisationProcedureId, fields);
		}

		public bool Delete(System.Decimal authorisationProcedureId)
		{
			var entity = new AuthorisationProcedure { AuthorisationProcedureId = authorisationProcedureId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AuthorisationProcedureFields
	{
		public const string AuthorisationProcedureId = "AuthorisationProcedureId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MAP_COUNTRIES")]
	public partial class MapCountry
	{
		private Decimal _mapCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MAP_COUNTRY_ID", ColumnName ="MAP_COUNTRY_ID", BaseColumnName ="MAP_COUNTRY_ID", BaseTableName = "MAP_COUNTRIES" )]		public Decimal MapCountryId 
		{ 
		    get { return _mapCountryId; } 
			set 
			{
			    _mapCountryId = value;
			}
        }

		private Decimal _authorisationProcedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="AUTHORISATION_PROCEDURE_ID", BaseColumnName ="AUTHORISATION_PROCEDURE_ID", BaseTableName = "MAP_COUNTRIES" )]		public Decimal AuthorisationProcedureId 
		{ 
		    get { return _authorisationProcedureId; } 
			set 
			{
			    _authorisationProcedureId = value;
			}
        }

		private String _countryCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_CODE", BaseColumnName ="COUNTRY_CODE", BaseTableName = "MAP_COUNTRIES" )]		public String CountryCode 
		{ 
		    get { return _countryCode; } 
			set 
			{
			    _countryCode = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MAP_COUNTRIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MAP_COUNTRIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MAP_COUNTRIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MAP_COUNTRIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }


	}

	public partial class MapCountryRepository : Repository<MapCountry> 
	{
		public MapCountryRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MapCountry Get(string projectionName, System.Decimal mapCountryId)
		{
			return ((IRepository<MapCountry>)this).Get(projectionName, mapCountryId, FetchMode.UseIdentityMap);
		}

		public MapCountry Get(string projectionName, System.Decimal mapCountryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MapCountry>)this).Get(projectionName, mapCountryId, fetchMode);
		}

		public MapCountry Get(Projection projection, System.Decimal mapCountryId)
		{
			return ((IRepository<MapCountry>)this).Get(projection, mapCountryId, FetchMode.UseIdentityMap);
		}

		public MapCountry Get(Projection projection, System.Decimal mapCountryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MapCountry>)this).Get(projection, mapCountryId, fetchMode);
		}

		public MapCountry Get(string projectionName, System.Decimal mapCountryId, params string[] fields)
		{
			return ((IRepository<MapCountry>)this).Get(projectionName, mapCountryId, fields);
		}

		public MapCountry Get(Projection projection, System.Decimal mapCountryId, params string[] fields)
		{
			return ((IRepository<MapCountry>)this).Get(projection, mapCountryId, fields);
		}

		public bool Delete(System.Decimal mapCountryId)
		{
			var entity = new MapCountry { MapCountryId = mapCountryId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MapCountryFields
	{
		public const string MapCountryId = "MapCountryId";
		public const string AuthorisationProcedureId = "AuthorisationProcedureId";
		public const string CountryCode = "CountryCode";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string CountryId = "CountryId";
		public const string CountryName = "CountryName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRIES")]
	public partial class DossierCountry
	{
		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_ID", ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID", BaseColumnName ="COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _dossierStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_STATUS_ID", BaseColumnName ="DOSSIER_STATUS_ID", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal DossierStatusId 
		{ 
		    get { return _dossierStatusId; } 
			set 
			{
			    _dossierStatusId = value;
			}
        }

		private Decimal? _mahId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MAH_ID", BaseColumnName ="MAH_ID", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal? MahId 
		{ 
		    get { return _mahId; } 
			set 
			{
			    _mahId = value;
			}
        }

		private Decimal? _localRepresentativeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LOCAL_REPRESENTATIVE_ID", BaseColumnName ="LOCAL_REPRESENTATIVE_ID", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal? LocalRepresentativeId 
		{ 
		    get { return _localRepresentativeId; } 
			set 
			{
			    _localRepresentativeId = value;
			}
        }

		private String _roleCountry;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="ROLE_COUNTRY", BaseColumnName ="ROLE_COUNTRY", BaseTableName = "DOSSIER_COUNTRIES" )]		public String RoleCountry 
		{ 
		    get { return _roleCountry; } 
			set 
			{
			    _roleCountry = value;
			}
        }

		private Decimal? _dispensingClassificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DISPENSING_CLASSIFICATION_ID", BaseColumnName ="DISPENSING_CLASSIFICATION_ID", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal? DispensingClassificationId 
		{ 
		    get { return _dispensingClassificationId; } 
			set 
			{
			    _dispensingClassificationId = value;
			}
        }

		private Decimal? _dispensingClassDetailId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DISPENSING_CLASS_DETAIL_ID", BaseColumnName ="DISPENSING_CLASS_DETAIL_ID", BaseTableName = "DOSSIER_COUNTRIES" )]		public Decimal? DispensingClassDetailId 
		{ 
		    get { return _dispensingClassDetailId; } 
			set 
			{
			    _dispensingClassDetailId = value;
			}
        }

		private String _isAntiTamperingDevice;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ANTI_TAMPERING_DEVICE", BaseColumnName ="IS_ANTI_TAMPERING_DEVICE", BaseTableName = "DOSSIER_COUNTRIES" )]		public String IsAntiTamperingDevice 
		{ 
		    get { return _isAntiTamperingDevice; } 
			set 
			{
			    _isAntiTamperingDevice = value;
			}
        }

		private String _isUniqueIdentifier;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_UNIQUE_IDENTIFIER", BaseColumnName ="IS_UNIQUE_IDENTIFIER", BaseTableName = "DOSSIER_COUNTRIES" )]		public String IsUniqueIdentifier 
		{ 
		    get { return _isUniqueIdentifier; } 
			set 
			{
			    _isUniqueIdentifier = value;
			}
        }

		private DateTime? _patentExpiryDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="PATENT_EXPIRY_DATE", BaseColumnName ="PATENT_EXPIRY_DATE", BaseTableName = "DOSSIER_COUNTRIES" )]		public DateTime? PatentExpiryDate 
		{ 
		    get { return _patentExpiryDate; } 
			set 
			{
			    _patentExpiryDate = value;
			}
        }

		private DateTime? _launchDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LAUNCH_DATE", BaseColumnName ="LAUNCH_DATE", BaseTableName = "DOSSIER_COUNTRIES" )]		public DateTime? LaunchDate 
		{ 
		    get { return _launchDate; } 
			set 
			{
			    _launchDate = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "DOSSIER_COUNTRIES" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private String _currentMarketingStatus;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CURRENT_MARKETING_STATUS", BaseColumnName ="CURRENT_MARKETING_STATUS", BaseTableName = "DOSSIER_COUNTRIES" )]		public String CurrentMarketingStatus 
		{ 
		    get { return _currentMarketingStatus; } 
			set 
			{
			    _currentMarketingStatus = value;
			}
        }

		private String _isMktNumberPresentation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_MKT_NUMBER_PRESENTATION", BaseColumnName ="IS_MKT_NUMBER_PRESENTATION", BaseTableName = "DOSSIER_COUNTRIES" )]		public String IsMktNumberPresentation 
		{ 
		    get { return _isMktNumberPresentation; } 
			set 
			{
			    _isMktNumberPresentation = value;
			}
        }

		private String _isNaLocalRepresentative;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_LOCAL_REPRESENTATIVE", BaseColumnName ="IS_NA_LOCAL_REPRESENTATIVE", BaseTableName = "DOSSIER_COUNTRIES" )]		public String IsNaLocalRepresentative 
		{ 
		    get { return _isNaLocalRepresentative; } 
			set 
			{
			    _isNaLocalRepresentative = value;
			}
        }

		private String _isNaMarketingAgreements;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_MARKETING_AGREEMENTS", BaseColumnName ="IS_NA_MARKETING_AGREEMENTS", BaseTableName = "DOSSIER_COUNTRIES" )]		public String IsNaMarketingAgreements 
		{ 
		    get { return _isNaMarketingAgreements; } 
			set 
			{
			    _isNaMarketingAgreements = value;
			}
        }

		private String _isNaPricings;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_PRICINGS", BaseColumnName ="IS_NA_PRICINGS", BaseTableName = "DOSSIER_COUNTRIES" )]		public String IsNaPricings 
		{ 
		    get { return _isNaPricings; } 
			set 
			{
			    _isNaPricings = value;
			}
        }

		private String _isNaPatentExpiryDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_PATENT_EXPIRY_DATE", BaseColumnName ="IS_NA_PATENT_EXPIRY_DATE", BaseTableName = "DOSSIER_COUNTRIES" )]		public String IsNaPatentExpiryDate 
		{ 
		    get { return _isNaPatentExpiryDate; } 
			set 
			{
			    _isNaPatentExpiryDate = value;
			}
        }

		private String _isNaLaunchDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_LAUNCH_DATE", BaseColumnName ="IS_NA_LAUNCH_DATE", BaseTableName = "DOSSIER_COUNTRIES" )]		public String IsNaLaunchDate 
		{ 
		    get { return _isNaLaunchDate; } 
			set 
			{
			    _isNaLaunchDate = value;
			}
        }

		private DateTime? _exclusivityDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXCLUSIVITY_DATE", BaseColumnName ="EXCLUSIVITY_DATE", BaseTableName = "DOSSIER_COUNTRIES" )]		public DateTime? ExclusivityDate 
		{ 
		    get { return _exclusivityDate; } 
			set 
			{
			    _exclusivityDate = value;
			}
        }

		private String _isNaExclusivityDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXCLUSIVITY_DATE", BaseColumnName ="IS_NA_EXCLUSIVITY_DATE", BaseTableName = "DOSSIER_COUNTRIES" )]		public String IsNaExclusivityDate 
		{ 
		    get { return _isNaExclusivityDate; } 
			set 
			{
			    _isNaExclusivityDate = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _dossierStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DOSSIER_STATUS_NAME" )]		public String DossierStatusName 
		{ 
		    get { return _dossierStatusName; } 
			set 
			{
			    _dossierStatusName = value;
			}
        }

		private String _mahName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MAH_NAME" )]		public String MahName 
		{ 
		    get { return _mahName; } 
			set 
			{
			    _mahName = value;
			}
        }

		private String _lcName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="LC_NAME" )]		public String LcName 
		{ 
		    get { return _lcName; } 
			set 
			{
			    _lcName = value;
			}
        }

		private String _dispensingClassificationName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DISPENSING_CLASSIFICATION_NAME" )]		public String DispensingClassificationName 
		{ 
		    get { return _dispensingClassificationName; } 
			set 
			{
			    _dispensingClassificationName = value;
			}
        }

		private String _dispensingClassDetailName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DISPENSING_CLASS_DETAIL_NAME" )]		public String DispensingClassDetailName 
		{ 
		    get { return _dispensingClassDetailName; } 
			set 
			{
			    _dispensingClassDetailName = value;
			}
        }

		private String _mahAddress;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="MAH_ADDRESS" )]		public String MahAddress 
		{ 
		    get { return _mahAddress; } 
			set 
			{
			    _mahAddress = value;
			}
        }

		private String _lcAddress;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="LC_ADDRESS" )]		public String LcAddress 
		{ 
		    get { return _lcAddress; } 
			set 
			{
			    _lcAddress = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private Decimal? _patentExpiryDateYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PATENT_EXPIRY_DATE_YEAR" )]		public Decimal? PatentExpiryDateYear 
		{ 
		    get { return _patentExpiryDateYear; } 
			set 
			{
			    _patentExpiryDateYear = value;
			}
        }

		private Decimal? _patentExpiryDateMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PATENT_EXPIRY_DATE_MONTH" )]		public Decimal? PatentExpiryDateMonth 
		{ 
		    get { return _patentExpiryDateMonth; } 
			set 
			{
			    _patentExpiryDateMonth = value;
			}
        }

		private Decimal? _launchDateYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LAUNCH_DATE_YEAR" )]		public Decimal? LaunchDateYear 
		{ 
		    get { return _launchDateYear; } 
			set 
			{
			    _launchDateYear = value;
			}
        }

		private Decimal? _launchDateMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LAUNCH_DATE_MONTH" )]		public Decimal? LaunchDateMonth 
		{ 
		    get { return _launchDateMonth; } 
			set 
			{
			    _launchDateMonth = value;
			}
        }

		private Decimal? _includedMods;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="INCLUDED_MODS" )]		public Decimal? IncludedMods 
		{ 
		    get { return _includedMods; } 
			set 
			{
			    _includedMods = value;
			}
        }

		private Decimal? _exclusivityYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="EXCLUSIVITY_YEAR" )]		public Decimal? ExclusivityYear 
		{ 
		    get { return _exclusivityYear; } 
			set 
			{
			    _exclusivityYear = value;
			}
        }

		private Decimal? _exclusivityMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="EXCLUSIVITY_MONTH" )]		public Decimal? ExclusivityMonth 
		{ 
		    get { return _exclusivityMonth; } 
			set 
			{
			    _exclusivityMonth = value;
			}
        }


	}

	public partial class DossierCountryRepository : Repository<DossierCountry> 
	{
		public DossierCountryRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountry Get(string projectionName, System.Decimal dossierCountryId)
		{
			return ((IRepository<DossierCountry>)this).Get(projectionName, dossierCountryId, FetchMode.UseIdentityMap);
		}

		public DossierCountry Get(string projectionName, System.Decimal dossierCountryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountry>)this).Get(projectionName, dossierCountryId, fetchMode);
		}

		public DossierCountry Get(Projection projection, System.Decimal dossierCountryId)
		{
			return ((IRepository<DossierCountry>)this).Get(projection, dossierCountryId, FetchMode.UseIdentityMap);
		}

		public DossierCountry Get(Projection projection, System.Decimal dossierCountryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountry>)this).Get(projection, dossierCountryId, fetchMode);
		}

		public DossierCountry Get(string projectionName, System.Decimal dossierCountryId, params string[] fields)
		{
			return ((IRepository<DossierCountry>)this).Get(projectionName, dossierCountryId, fields);
		}

		public DossierCountry Get(Projection projection, System.Decimal dossierCountryId, params string[] fields)
		{
			return ((IRepository<DossierCountry>)this).Get(projection, dossierCountryId, fields);
		}

		public bool Delete(System.Decimal dossierCountryId)
		{
			var entity = new DossierCountry { DossierCountryId = dossierCountryId };
			return this.Delete(entity);
		}

		
		public void DeleteDossierCountry(Decimal? dcId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteDossierCountryProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "DC_ID"].Value = dcId == null ? (object) DBNull.Value : dcId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}

		public void GenerateDossierTasks(Decimal? pDossierCountryId, Decimal? pMarketingAgreementId, Decimal? pTaskActionId, Decimal? pGroupId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateGenerateDossierTasksProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "P_DOSSIER_COUNTRY_ID"].Value = pDossierCountryId == null ? (object) DBNull.Value : pDossierCountryId.Value;
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "P_MARKETING_AGREEMENT_ID"].Value = pMarketingAgreementId == null ? (object) DBNull.Value : pMarketingAgreementId.Value;
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "P_TASK_ACTION_ID"].Value = pTaskActionId == null ? (object) DBNull.Value : pTaskActionId.Value;
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "P_GROUP_ID"].Value = pGroupId == null ? (object) DBNull.Value : pGroupId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryFields
	{
		public const string DossierCountryId = "DossierCountryId";
		public const string CountryId = "CountryId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierId = "DossierId";
		public const string DossierStatusId = "DossierStatusId";
		public const string MahId = "MahId";
		public const string LocalRepresentativeId = "LocalRepresentativeId";
		public const string RoleCountry = "RoleCountry";
		public const string DispensingClassificationId = "DispensingClassificationId";
		public const string DispensingClassDetailId = "DispensingClassDetailId";
		public const string IsAntiTamperingDevice = "IsAntiTamperingDevice";
		public const string IsUniqueIdentifier = "IsUniqueIdentifier";
		public const string PatentExpiryDate = "PatentExpiryDate";
		public const string LaunchDate = "LaunchDate";
		public const string Comments = "Comments";
		public const string CurrentMarketingStatus = "CurrentMarketingStatus";
		public const string IsMktNumberPresentation = "IsMktNumberPresentation";
		public const string IsNaLocalRepresentative = "IsNaLocalRepresentative";
		public const string IsNaMarketingAgreements = "IsNaMarketingAgreements";
		public const string IsNaPricings = "IsNaPricings";
		public const string IsNaPatentExpiryDate = "IsNaPatentExpiryDate";
		public const string IsNaLaunchDate = "IsNaLaunchDate";
		public const string ExclusivityDate = "ExclusivityDate";
		public const string IsNaExclusivityDate = "IsNaExclusivityDate";
		public const string CountryName = "CountryName";
		public const string TwoLettersCode = "TwoLettersCode";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string DossierStatusName = "DossierStatusName";
		public const string MahName = "MahName";
		public const string LcName = "LcName";
		public const string DispensingClassificationName = "DispensingClassificationName";
		public const string DispensingClassDetailName = "DispensingClassDetailName";
		public const string MahAddress = "MahAddress";
		public const string LcAddress = "LcAddress";
		public const string ProductName = "ProductName";
		public const string PatentExpiryDateYear = "PatentExpiryDateYear";
		public const string PatentExpiryDateMonth = "PatentExpiryDateMonth";
		public const string LaunchDateYear = "LaunchDateYear";
		public const string LaunchDateMonth = "LaunchDateMonth";
		public const string IncludedMods = "IncludedMods";
		public const string ExclusivityYear = "ExclusivityYear";
		public const string ExclusivityMonth = "ExclusivityMonth";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MARKETING_AGREEMENTS")]
	public partial class MarketingAgreement
	{
		private Decimal _marketingAgreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="MARKETING_AGREEMENT_ID", BaseColumnName ="MARKETING_AGREEMENT_ID", BaseTableName = "MARKETING_AGREEMENTS" )]		public Decimal MarketingAgreementId 
		{ 
		    get { return _marketingAgreementId; } 
			set 
			{
			    _marketingAgreementId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MARKETING_AGREEMENTS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "MARKETING_AGREEMENTS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MARKETING_AGREEMENTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MARKETING_AGREEMENTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MARKETING_AGREEMENTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MARKETING_AGREEMENTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class MarketingAgreementRepository : Repository<MarketingAgreement> 
	{
		public MarketingAgreementRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MarketingAgreement Get(string projectionName, System.Decimal marketingAgreementId)
		{
			return ((IRepository<MarketingAgreement>)this).Get(projectionName, marketingAgreementId, FetchMode.UseIdentityMap);
		}

		public MarketingAgreement Get(string projectionName, System.Decimal marketingAgreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MarketingAgreement>)this).Get(projectionName, marketingAgreementId, fetchMode);
		}

		public MarketingAgreement Get(Projection projection, System.Decimal marketingAgreementId)
		{
			return ((IRepository<MarketingAgreement>)this).Get(projection, marketingAgreementId, FetchMode.UseIdentityMap);
		}

		public MarketingAgreement Get(Projection projection, System.Decimal marketingAgreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MarketingAgreement>)this).Get(projection, marketingAgreementId, fetchMode);
		}

		public MarketingAgreement Get(string projectionName, System.Decimal marketingAgreementId, params string[] fields)
		{
			return ((IRepository<MarketingAgreement>)this).Get(projectionName, marketingAgreementId, fields);
		}

		public MarketingAgreement Get(Projection projection, System.Decimal marketingAgreementId, params string[] fields)
		{
			return ((IRepository<MarketingAgreement>)this).Get(projection, marketingAgreementId, fields);
		}

		public bool Delete(System.Decimal marketingAgreementId)
		{
			var entity = new MarketingAgreement { MarketingAgreementId = marketingAgreementId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MarketingAgreementFields
	{
		public const string MarketingAgreementId = "MarketingAgreementId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COMMITMENTS")]
	public partial class DossierCommitment
	{
		private Decimal _dossierCommitmentId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COMMITMENT_ID", ColumnName ="DOSSIER_COMMITMENT_ID", BaseColumnName ="DOSSIER_COMMITMENT_ID", BaseTableName = "DOSSIER_COMMITMENTS" )]		public Decimal DossierCommitmentId 
		{ 
		    get { return _dossierCommitmentId; } 
			set 
			{
			    _dossierCommitmentId = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "DOSSIER_COMMITMENTS" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "DOSSIER_COMMITMENTS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private String _isNeedUpdated;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NEED_UPDATED", BaseColumnName ="IS_NEED_UPDATED", BaseTableName = "DOSSIER_COMMITMENTS" )]		public String IsNeedUpdated 
		{ 
		    get { return _isNeedUpdated; } 
			set 
			{
			    _isNeedUpdated = value;
			}
        }

		private String _isDeadline;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DEADLINE", BaseColumnName ="IS_DEADLINE", BaseTableName = "DOSSIER_COMMITMENTS" )]		public String IsDeadline 
		{ 
		    get { return _isDeadline; } 
			set 
			{
			    _isDeadline = value;
			}
        }

		private DateTime? _deadlineDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DEADLINE_DATE", BaseColumnName ="DEADLINE_DATE", BaseTableName = "DOSSIER_COMMITMENTS" )]		public DateTime? DeadlineDate 
		{ 
		    get { return _deadlineDate; } 
			set 
			{
			    _deadlineDate = value;
			}
        }

		private DateTime? _expectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DATE", BaseColumnName ="EXPECTED_DATE", BaseTableName = "DOSSIER_COMMITMENTS" )]		public DateTime? ExpectedDate 
		{ 
		    get { return _expectedDate; } 
			set 
			{
			    _expectedDate = value;
			}
        }

		private String _status;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="STATUS", BaseColumnName ="STATUS", BaseTableName = "DOSSIER_COMMITMENTS" )]		public String Status 
		{ 
		    get { return _status; } 
			set 
			{
			    _status = value;
			}
        }

		private String _consecuentActions;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CONSECUENT_ACTIONS", BaseColumnName ="CONSECUENT_ACTIONS", BaseTableName = "DOSSIER_COMMITMENTS" )]		public String ConsecuentActions 
		{ 
		    get { return _consecuentActions; } 
			set 
			{
			    _consecuentActions = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "DOSSIER_COMMITMENTS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COMMITMENTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COMMITMENTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COMMITMENTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COMMITMENTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isNaDeadlineDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DEADLINE_DATE", BaseColumnName ="IS_NA_DEADLINE_DATE", BaseTableName = "DOSSIER_COMMITMENTS" )]		public String IsNaDeadlineDate 
		{ 
		    get { return _isNaDeadlineDate; } 
			set 
			{
			    _isNaDeadlineDate = value;
			}
        }

		private String _isNaExpectedDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DATE", BaseColumnName ="IS_NA_EXPECTED_DATE", BaseTableName = "DOSSIER_COMMITMENTS" )]		public String IsNaExpectedDate 
		{ 
		    get { return _isNaExpectedDate; } 
			set 
			{
			    _isNaExpectedDate = value;
			}
        }

		private String _statusName;
		[DataMember]
		[SqlField(DbType.String, 11, ColumnName ="STATUS_NAME" )]		public String StatusName 
		{ 
		    get { return _statusName; } 
			set 
			{
			    _statusName = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }


	}

	public partial class DossierCommitmentRepository : Repository<DossierCommitment> 
	{
		public DossierCommitmentRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCommitment Get(string projectionName, System.Decimal dossierCommitmentId)
		{
			return ((IRepository<DossierCommitment>)this).Get(projectionName, dossierCommitmentId, FetchMode.UseIdentityMap);
		}

		public DossierCommitment Get(string projectionName, System.Decimal dossierCommitmentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCommitment>)this).Get(projectionName, dossierCommitmentId, fetchMode);
		}

		public DossierCommitment Get(Projection projection, System.Decimal dossierCommitmentId)
		{
			return ((IRepository<DossierCommitment>)this).Get(projection, dossierCommitmentId, FetchMode.UseIdentityMap);
		}

		public DossierCommitment Get(Projection projection, System.Decimal dossierCommitmentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCommitment>)this).Get(projection, dossierCommitmentId, fetchMode);
		}

		public DossierCommitment Get(string projectionName, System.Decimal dossierCommitmentId, params string[] fields)
		{
			return ((IRepository<DossierCommitment>)this).Get(projectionName, dossierCommitmentId, fields);
		}

		public DossierCommitment Get(Projection projection, System.Decimal dossierCommitmentId, params string[] fields)
		{
			return ((IRepository<DossierCommitment>)this).Get(projection, dossierCommitmentId, fields);
		}

		public bool Delete(System.Decimal dossierCommitmentId)
		{
			var entity = new DossierCommitment { DossierCommitmentId = dossierCommitmentId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCommitmentFields
	{
		public const string DossierCommitmentId = "DossierCommitmentId";
		public const string DossierId = "DossierId";
		public const string Description = "Description";
		public const string IsNeedUpdated = "IsNeedUpdated";
		public const string IsDeadline = "IsDeadline";
		public const string DeadlineDate = "DeadlineDate";
		public const string ExpectedDate = "ExpectedDate";
		public const string Status = "Status";
		public const string ConsecuentActions = "ConsecuentActions";
		public const string Comments = "Comments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsNaDeadlineDate = "IsNaDeadlineDate";
		public const string IsNaExpectedDate = "IsNaExpectedDate";
		public const string StatusName = "StatusName";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="LANGUAGES")]
	public partial class Language
	{
		private String _code;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="CODE", BaseColumnName ="CODE", BaseTableName = "LANGUAGES" )]		public String Code 
		{ 
		    get { return _code; } 
			set 
			{
			    _code = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "LANGUAGES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _codeName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CODE_NAME", BaseColumnName ="CODE_NAME", BaseTableName = "LANGUAGES" )]		public String CodeName 
		{ 
		    get { return _codeName; } 
			set 
			{
			    _codeName = value;
			}
        }


	}

	public partial class LanguageRepository : Repository<Language> 
	{
		public LanguageRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class LanguageFields
	{
		public const string Code = "Code";
		public const string Name = "Name";
		public const string CodeName = "CodeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MANUFACTURING_PROCESSES")]
	public partial class ManufacturingProcess
	{
		private Decimal _manufacturingProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MANUFACTURING_PROCESS_ID", ColumnName ="MANUFACTURING_PROCESS_ID", BaseColumnName ="MANUFACTURING_PROCESS_ID", BaseTableName = "MANUFACTURING_PROCESSES" )]		public Decimal ManufacturingProcessId 
		{ 
		    get { return _manufacturingProcessId; } 
			set 
			{
			    _manufacturingProcessId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MANUFACTURING_PROCESSES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "MANUFACTURING_PROCESSES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MANUFACTURING_PROCESSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MANUFACTURING_PROCESSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MANUFACTURING_PROCESSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MANUFACTURING_PROCESSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class ManufacturingProcessRepository : Repository<ManufacturingProcess> 
	{
		public ManufacturingProcessRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ManufacturingProcess Get(string projectionName, System.Decimal manufacturingProcessId)
		{
			return ((IRepository<ManufacturingProcess>)this).Get(projectionName, manufacturingProcessId, FetchMode.UseIdentityMap);
		}

		public ManufacturingProcess Get(string projectionName, System.Decimal manufacturingProcessId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ManufacturingProcess>)this).Get(projectionName, manufacturingProcessId, fetchMode);
		}

		public ManufacturingProcess Get(Projection projection, System.Decimal manufacturingProcessId)
		{
			return ((IRepository<ManufacturingProcess>)this).Get(projection, manufacturingProcessId, FetchMode.UseIdentityMap);
		}

		public ManufacturingProcess Get(Projection projection, System.Decimal manufacturingProcessId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ManufacturingProcess>)this).Get(projection, manufacturingProcessId, fetchMode);
		}

		public ManufacturingProcess Get(string projectionName, System.Decimal manufacturingProcessId, params string[] fields)
		{
			return ((IRepository<ManufacturingProcess>)this).Get(projectionName, manufacturingProcessId, fields);
		}

		public ManufacturingProcess Get(Projection projection, System.Decimal manufacturingProcessId, params string[] fields)
		{
			return ((IRepository<ManufacturingProcess>)this).Get(projection, manufacturingProcessId, fields);
		}

		public bool Delete(System.Decimal manufacturingProcessId)
		{
			var entity = new ManufacturingProcess { ManufacturingProcessId = manufacturingProcessId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ManufacturingProcessFields
	{
		public const string ManufacturingProcessId = "ManufacturingProcessId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_MP_MANUFACTURERS")]
	public partial class DossierMpManufacturer
	{
		private Decimal _dossierMpManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_MP_MANUFACTURER_ID", ColumnName ="DOSSIER_MP_MANUFACTURER_ID", BaseColumnName ="DOSSIER_MP_MANUFACTURER_ID", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public Decimal DossierMpManufacturerId 
		{ 
		    get { return _dossierMpManufacturerId; } 
			set 
			{
			    _dossierMpManufacturerId = value;
			}
        }

		private Decimal _mpManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_MANUFACTURER_ID", BaseColumnName ="MP_MANUFACTURER_ID", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public Decimal MpManufacturerId 
		{ 
		    get { return _mpManufacturerId; } 
			set 
			{
			    _mpManufacturerId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _manufacturingProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MANUFACTURING_PROCESS_ID", BaseColumnName ="MANUFACTURING_PROCESS_ID", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public Decimal? ManufacturingProcessId 
		{ 
		    get { return _manufacturingProcessId; } 
			set 
			{
			    _manufacturingProcessId = value;
			}
        }

		private String _batchSize;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="BATCH_SIZE", BaseColumnName ="BATCH_SIZE", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public String BatchSize 
		{ 
		    get { return _batchSize; } 
			set 
			{
			    _batchSize = value;
			}
        }

		private String _containerClosureSystem;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CONTAINER_CLOSURE_SYSTEM", BaseColumnName ="CONTAINER_CLOSURE_SYSTEM", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public String ContainerClosureSystem 
		{ 
		    get { return _containerClosureSystem; } 
			set 
			{
			    _containerClosureSystem = value;
			}
        }

		private Decimal? _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public Decimal? DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal? _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MP_DOSSIER_ID", BaseColumnName ="MP_DOSSIER_ID", BaseTableName = "DOSSIER_MP_MANUFACTURERS" )]		public Decimal? MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _isAdded;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="IS_ADDED" )]		public String IsAdded 
		{ 
		    get { return _isAdded; } 
			set 
			{
			    _isAdded = value;
			}
        }

		private Decimal? _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MANUFACTURER_ID" )]		public Decimal? ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private String _manufacturingProcessName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURING_PROCESS_NAME" )]		public String ManufacturingProcessName 
		{ 
		    get { return _manufacturingProcessName; } 
			set 
			{
			    _manufacturingProcessName = value;
			}
        }


	}

	public partial class DossierMpManufacturerRepository : Repository<DossierMpManufacturer> 
	{
		public DossierMpManufacturerRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierMpManufacturer Get(string projectionName, System.Decimal dossierMpManufacturerId)
		{
			return ((IRepository<DossierMpManufacturer>)this).Get(projectionName, dossierMpManufacturerId, FetchMode.UseIdentityMap);
		}

		public DossierMpManufacturer Get(string projectionName, System.Decimal dossierMpManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpManufacturer>)this).Get(projectionName, dossierMpManufacturerId, fetchMode);
		}

		public DossierMpManufacturer Get(Projection projection, System.Decimal dossierMpManufacturerId)
		{
			return ((IRepository<DossierMpManufacturer>)this).Get(projection, dossierMpManufacturerId, FetchMode.UseIdentityMap);
		}

		public DossierMpManufacturer Get(Projection projection, System.Decimal dossierMpManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpManufacturer>)this).Get(projection, dossierMpManufacturerId, fetchMode);
		}

		public DossierMpManufacturer Get(string projectionName, System.Decimal dossierMpManufacturerId, params string[] fields)
		{
			return ((IRepository<DossierMpManufacturer>)this).Get(projectionName, dossierMpManufacturerId, fields);
		}

		public DossierMpManufacturer Get(Projection projection, System.Decimal dossierMpManufacturerId, params string[] fields)
		{
			return ((IRepository<DossierMpManufacturer>)this).Get(projection, dossierMpManufacturerId, fields);
		}

		public bool Delete(System.Decimal dossierMpManufacturerId)
		{
			var entity = new DossierMpManufacturer { DossierMpManufacturerId = dossierMpManufacturerId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierMpManufacturerFields
	{
		public const string DossierMpManufacturerId = "DossierMpManufacturerId";
		public const string MpManufacturerId = "MpManufacturerId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ManufacturingProcessId = "ManufacturingProcessId";
		public const string BatchSize = "BatchSize";
		public const string ContainerClosureSystem = "ContainerClosureSystem";
		public const string DossierId = "DossierId";
		public const string MpDossierId = "MpDossierId";
		public const string ManufacturerName = "ManufacturerName";
		public const string Address = "Address";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string IsAdded = "IsAdded";
		public const string ManufacturerId = "ManufacturerId";
		public const string ManufacturingProcessName = "ManufacturingProcessName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="STORAGE_CONDITIONS")]
	public partial class StorageCondition
	{
		private Decimal _storageConditionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "STORAGE_CONDITION_ID", ColumnName ="STORAGE_CONDITION_ID", BaseColumnName ="STORAGE_CONDITION_ID", BaseTableName = "STORAGE_CONDITIONS" )]		public Decimal StorageConditionId 
		{ 
		    get { return _storageConditionId; } 
			set 
			{
			    _storageConditionId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "STORAGE_CONDITIONS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "STORAGE_CONDITIONS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "STORAGE_CONDITIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "STORAGE_CONDITIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "STORAGE_CONDITIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "STORAGE_CONDITIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class StorageConditionRepository : Repository<StorageCondition> 
	{
		public StorageConditionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public StorageCondition Get(string projectionName, System.Decimal storageConditionId)
		{
			return ((IRepository<StorageCondition>)this).Get(projectionName, storageConditionId, FetchMode.UseIdentityMap);
		}

		public StorageCondition Get(string projectionName, System.Decimal storageConditionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<StorageCondition>)this).Get(projectionName, storageConditionId, fetchMode);
		}

		public StorageCondition Get(Projection projection, System.Decimal storageConditionId)
		{
			return ((IRepository<StorageCondition>)this).Get(projection, storageConditionId, FetchMode.UseIdentityMap);
		}

		public StorageCondition Get(Projection projection, System.Decimal storageConditionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<StorageCondition>)this).Get(projection, storageConditionId, fetchMode);
		}

		public StorageCondition Get(string projectionName, System.Decimal storageConditionId, params string[] fields)
		{
			return ((IRepository<StorageCondition>)this).Get(projectionName, storageConditionId, fields);
		}

		public StorageCondition Get(Projection projection, System.Decimal storageConditionId, params string[] fields)
		{
			return ((IRepository<StorageCondition>)this).Get(projection, storageConditionId, fields);
		}

		public bool Delete(System.Decimal storageConditionId)
		{
			var entity = new StorageCondition { StorageConditionId = storageConditionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class StorageConditionFields
	{
		public const string StorageConditionId = "StorageConditionId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_MKTAGR")]
	public partial class DossierCountryMktagr
	{
		private Decimal _dossierCountryMktagrId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_MKTAGR_ID", ColumnName ="DOSSIER_COUNTRY_MKTAGR_ID", BaseColumnName ="DOSSIER_COUNTRY_MKTAGR_ID", BaseTableName = "DOSSIER_COUNTRY_MKTAGR" )]		public Decimal DossierCountryMktagrId 
		{ 
		    get { return _dossierCountryMktagrId; } 
			set 
			{
			    _dossierCountryMktagrId = value;
			}
        }

		private Decimal _marketingAgreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MARKETING_AGREEMENT_ID", BaseColumnName ="MARKETING_AGREEMENT_ID", BaseTableName = "DOSSIER_COUNTRY_MKTAGR" )]		public Decimal MarketingAgreementId 
		{ 
		    get { return _marketingAgreementId; } 
			set 
			{
			    _marketingAgreementId = value;
			}
        }

		private Decimal? _providerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PROVIDER_ID", BaseColumnName ="PROVIDER_ID", BaseTableName = "DOSSIER_COUNTRY_MKTAGR" )]		public Decimal? ProviderId 
		{ 
		    get { return _providerId; } 
			set 
			{
			    _providerId = value;
			}
        }

		private Decimal? _clientId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CLIENT_ID", BaseColumnName ="CLIENT_ID", BaseTableName = "DOSSIER_COUNTRY_MKTAGR" )]		public Decimal? ClientId 
		{ 
		    get { return _clientId; } 
			set 
			{
			    _clientId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_MKTAGR" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_MKTAGR" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_MKTAGR" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_MKTAGR" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_MKTAGR" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _marketingAgreementName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MARKETING_AGREEMENT_NAME" )]		public String MarketingAgreementName 
		{ 
		    get { return _marketingAgreementName; } 
			set 
			{
			    _marketingAgreementName = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _providerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PROVIDER_NAME" )]		public String ProviderName 
		{ 
		    get { return _providerName; } 
			set 
			{
			    _providerName = value;
			}
        }

		private String _clientName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CLIENT_NAME" )]		public String ClientName 
		{ 
		    get { return _clientName; } 
			set 
			{
			    _clientName = value;
			}
        }

		private String _providerAddress;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 0, ColumnName ="PROVIDER_ADDRESS" )]		public String ProviderAddress 
		{ 
		    get { return _providerAddress; } 
			set 
			{
			    _providerAddress = value;
			}
        }

		private String _clientAddress;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 0, ColumnName ="CLIENT_ADDRESS" )]		public String ClientAddress 
		{ 
		    get { return _clientAddress; } 
			set 
			{
			    _clientAddress = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }


	}

	public partial class DossierCountryMktagrRepository : Repository<DossierCountryMktagr> 
	{
		public DossierCountryMktagrRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryMktagr Get(string projectionName, System.Decimal dossierCountryMktagrId)
		{
			return ((IRepository<DossierCountryMktagr>)this).Get(projectionName, dossierCountryMktagrId, FetchMode.UseIdentityMap);
		}

		public DossierCountryMktagr Get(string projectionName, System.Decimal dossierCountryMktagrId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryMktagr>)this).Get(projectionName, dossierCountryMktagrId, fetchMode);
		}

		public DossierCountryMktagr Get(Projection projection, System.Decimal dossierCountryMktagrId)
		{
			return ((IRepository<DossierCountryMktagr>)this).Get(projection, dossierCountryMktagrId, FetchMode.UseIdentityMap);
		}

		public DossierCountryMktagr Get(Projection projection, System.Decimal dossierCountryMktagrId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryMktagr>)this).Get(projection, dossierCountryMktagrId, fetchMode);
		}

		public DossierCountryMktagr Get(string projectionName, System.Decimal dossierCountryMktagrId, params string[] fields)
		{
			return ((IRepository<DossierCountryMktagr>)this).Get(projectionName, dossierCountryMktagrId, fields);
		}

		public DossierCountryMktagr Get(Projection projection, System.Decimal dossierCountryMktagrId, params string[] fields)
		{
			return ((IRepository<DossierCountryMktagr>)this).Get(projection, dossierCountryMktagrId, fields);
		}

		public bool Delete(System.Decimal dossierCountryMktagrId)
		{
			var entity = new DossierCountryMktagr { DossierCountryMktagrId = dossierCountryMktagrId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryMktagrFields
	{
		public const string DossierCountryMktagrId = "DossierCountryMktagrId";
		public const string MarketingAgreementId = "MarketingAgreementId";
		public const string ProviderId = "ProviderId";
		public const string ClientId = "ClientId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierCountryId = "DossierCountryId";
		public const string MarketingAgreementName = "MarketingAgreementName";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string ProviderName = "ProviderName";
		public const string ClientName = "ClientName";
		public const string ProviderAddress = "ProviderAddress";
		public const string ClientAddress = "ClientAddress";
		public const string DossierId = "DossierId";
		public const string CountryId = "CountryId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DISPENSING_CLASSIFICATIONS")]
	public partial class DispensingClass
	{
		private Decimal _dispensingClassificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DISPENSING_CLASSIFICATION_ID", ColumnName ="DISPENSING_CLASSIFICATION_ID", BaseColumnName ="DISPENSING_CLASSIFICATION_ID", BaseTableName = "DISPENSING_CLASSIFICATIONS" )]		public Decimal DispensingClassificationId 
		{ 
		    get { return _dispensingClassificationId; } 
			set 
			{
			    _dispensingClassificationId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "DISPENSING_CLASSIFICATIONS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "DISPENSING_CLASSIFICATIONS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DISPENSING_CLASSIFICATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DISPENSING_CLASSIFICATIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DISPENSING_CLASSIFICATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DISPENSING_CLASSIFICATIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class DispensingClassRepository : Repository<DispensingClass> 
	{
		public DispensingClassRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DispensingClass Get(string projectionName, System.Decimal dispensingClassificationId)
		{
			return ((IRepository<DispensingClass>)this).Get(projectionName, dispensingClassificationId, FetchMode.UseIdentityMap);
		}

		public DispensingClass Get(string projectionName, System.Decimal dispensingClassificationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DispensingClass>)this).Get(projectionName, dispensingClassificationId, fetchMode);
		}

		public DispensingClass Get(Projection projection, System.Decimal dispensingClassificationId)
		{
			return ((IRepository<DispensingClass>)this).Get(projection, dispensingClassificationId, FetchMode.UseIdentityMap);
		}

		public DispensingClass Get(Projection projection, System.Decimal dispensingClassificationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DispensingClass>)this).Get(projection, dispensingClassificationId, fetchMode);
		}

		public DispensingClass Get(string projectionName, System.Decimal dispensingClassificationId, params string[] fields)
		{
			return ((IRepository<DispensingClass>)this).Get(projectionName, dispensingClassificationId, fields);
		}

		public DispensingClass Get(Projection projection, System.Decimal dispensingClassificationId, params string[] fields)
		{
			return ((IRepository<DispensingClass>)this).Get(projection, dispensingClassificationId, fields);
		}

		public bool Delete(System.Decimal dispensingClassificationId)
		{
			var entity = new DispensingClass { DispensingClassificationId = dispensingClassificationId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DispensingClassFields
	{
		public const string DispensingClassificationId = "DispensingClassificationId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DISPENSING_CLASS_DETAILS")]
	public partial class DispensingClassDetail
	{
		private Decimal _dispensingClassDetailId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DISPENSING_CLASS_DETAIL_ID", ColumnName ="DISPENSING_CLASS_DETAIL_ID", BaseColumnName ="DISPENSING_CLASS_DETAIL_ID", BaseTableName = "DISPENSING_CLASS_DETAILS" )]		public Decimal DispensingClassDetailId 
		{ 
		    get { return _dispensingClassDetailId; } 
			set 
			{
			    _dispensingClassDetailId = value;
			}
        }

		private Decimal _dispensingClassificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DISPENSING_CLASSIFICATION_ID", BaseColumnName ="DISPENSING_CLASSIFICATION_ID", BaseTableName = "DISPENSING_CLASS_DETAILS" )]		public Decimal DispensingClassificationId 
		{ 
		    get { return _dispensingClassificationId; } 
			set 
			{
			    _dispensingClassificationId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "DISPENSING_CLASS_DETAILS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "DISPENSING_CLASS_DETAILS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DISPENSING_CLASS_DETAILS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DISPENSING_CLASS_DETAILS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DISPENSING_CLASS_DETAILS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DISPENSING_CLASS_DETAILS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class DispensingClassDetailRepository : Repository<DispensingClassDetail> 
	{
		public DispensingClassDetailRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DispensingClassDetail Get(string projectionName, System.Decimal dispensingClassDetailId)
		{
			return ((IRepository<DispensingClassDetail>)this).Get(projectionName, dispensingClassDetailId, FetchMode.UseIdentityMap);
		}

		public DispensingClassDetail Get(string projectionName, System.Decimal dispensingClassDetailId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DispensingClassDetail>)this).Get(projectionName, dispensingClassDetailId, fetchMode);
		}

		public DispensingClassDetail Get(Projection projection, System.Decimal dispensingClassDetailId)
		{
			return ((IRepository<DispensingClassDetail>)this).Get(projection, dispensingClassDetailId, FetchMode.UseIdentityMap);
		}

		public DispensingClassDetail Get(Projection projection, System.Decimal dispensingClassDetailId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DispensingClassDetail>)this).Get(projection, dispensingClassDetailId, fetchMode);
		}

		public DispensingClassDetail Get(string projectionName, System.Decimal dispensingClassDetailId, params string[] fields)
		{
			return ((IRepository<DispensingClassDetail>)this).Get(projectionName, dispensingClassDetailId, fields);
		}

		public DispensingClassDetail Get(Projection projection, System.Decimal dispensingClassDetailId, params string[] fields)
		{
			return ((IRepository<DispensingClassDetail>)this).Get(projection, dispensingClassDetailId, fields);
		}

		public bool Delete(System.Decimal dispensingClassDetailId)
		{
			var entity = new DispensingClassDetail { DispensingClassDetailId = dispensingClassDetailId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DispensingClassDetailFields
	{
		public const string DispensingClassDetailId = "DispensingClassDetailId";
		public const string DispensingClassificationId = "DispensingClassificationId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MARKETING_AUTH_STATUSES")]
	public partial class MarketingAuthStatus
	{
		private Decimal _marketingAuthStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MARKETING_AUTH_STATUS_ID", ColumnName ="MARKETING_AUTH_STATUS_ID", BaseColumnName ="MARKETING_AUTH_STATUS_ID", BaseTableName = "MARKETING_AUTH_STATUSES" )]		public Decimal MarketingAuthStatusId 
		{ 
		    get { return _marketingAuthStatusId; } 
			set 
			{
			    _marketingAuthStatusId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MARKETING_AUTH_STATUSES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "MARKETING_AUTH_STATUSES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MARKETING_AUTH_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MARKETING_AUTH_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MARKETING_AUTH_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MARKETING_AUTH_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class MarketingAuthStatusRepository : Repository<MarketingAuthStatus> 
	{
		public MarketingAuthStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MarketingAuthStatus Get(string projectionName, System.Decimal marketingAuthStatusId)
		{
			return ((IRepository<MarketingAuthStatus>)this).Get(projectionName, marketingAuthStatusId, FetchMode.UseIdentityMap);
		}

		public MarketingAuthStatus Get(string projectionName, System.Decimal marketingAuthStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MarketingAuthStatus>)this).Get(projectionName, marketingAuthStatusId, fetchMode);
		}

		public MarketingAuthStatus Get(Projection projection, System.Decimal marketingAuthStatusId)
		{
			return ((IRepository<MarketingAuthStatus>)this).Get(projection, marketingAuthStatusId, FetchMode.UseIdentityMap);
		}

		public MarketingAuthStatus Get(Projection projection, System.Decimal marketingAuthStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MarketingAuthStatus>)this).Get(projection, marketingAuthStatusId, fetchMode);
		}

		public MarketingAuthStatus Get(string projectionName, System.Decimal marketingAuthStatusId, params string[] fields)
		{
			return ((IRepository<MarketingAuthStatus>)this).Get(projectionName, marketingAuthStatusId, fields);
		}

		public MarketingAuthStatus Get(Projection projection, System.Decimal marketingAuthStatusId, params string[] fields)
		{
			return ((IRepository<MarketingAuthStatus>)this).Get(projection, marketingAuthStatusId, fields);
		}

		public bool Delete(System.Decimal marketingAuthStatusId)
		{
			var entity = new MarketingAuthStatus { MarketingAuthStatusId = marketingAuthStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MarketingAuthStatusFields
	{
		public const string MarketingAuthStatusId = "MarketingAuthStatusId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_MKTHIST")]
	public partial class DossierCountryMkthist
	{
		private Decimal _dossierCountryMkthistId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_MKTHIST_ID", ColumnName ="DOSSIER_COUNTRY_MKTHIST_ID", BaseColumnName ="DOSSIER_COUNTRY_MKTHIST_ID", BaseTableName = "DOSSIER_COUNTRY_MKTHIST" )]		public Decimal DossierCountryMkthistId 
		{ 
		    get { return _dossierCountryMkthistId; } 
			set 
			{
			    _dossierCountryMkthistId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_MKTHIST" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private DateTime _stopDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="STOP_DATE", BaseColumnName ="STOP_DATE", BaseTableName = "DOSSIER_COUNTRY_MKTHIST" )]		public DateTime StopDate 
		{ 
		    get { return _stopDate; } 
			set 
			{
			    _stopDate = value;
			}
        }

		private DateTime? _startDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="START_DATE", BaseColumnName ="START_DATE", BaseTableName = "DOSSIER_COUNTRY_MKTHIST" )]		public DateTime? StartDate 
		{ 
		    get { return _startDate; } 
			set 
			{
			    _startDate = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_MKTHIST" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_MKTHIST" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_MKTHIST" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_MKTHIST" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isNaStartDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_START_DATE", BaseColumnName ="IS_NA_START_DATE", BaseTableName = "DOSSIER_COUNTRY_MKTHIST" )]		public String IsNaStartDate 
		{ 
		    get { return _isNaStartDate; } 
			set 
			{
			    _isNaStartDate = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }


	}

	public partial class DossierCountryMkthistRepository : Repository<DossierCountryMkthist> 
	{
		public DossierCountryMkthistRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryMkthist Get(string projectionName, System.Decimal dossierCountryMkthistId)
		{
			return ((IRepository<DossierCountryMkthist>)this).Get(projectionName, dossierCountryMkthistId, FetchMode.UseIdentityMap);
		}

		public DossierCountryMkthist Get(string projectionName, System.Decimal dossierCountryMkthistId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryMkthist>)this).Get(projectionName, dossierCountryMkthistId, fetchMode);
		}

		public DossierCountryMkthist Get(Projection projection, System.Decimal dossierCountryMkthistId)
		{
			return ((IRepository<DossierCountryMkthist>)this).Get(projection, dossierCountryMkthistId, FetchMode.UseIdentityMap);
		}

		public DossierCountryMkthist Get(Projection projection, System.Decimal dossierCountryMkthistId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryMkthist>)this).Get(projection, dossierCountryMkthistId, fetchMode);
		}

		public DossierCountryMkthist Get(string projectionName, System.Decimal dossierCountryMkthistId, params string[] fields)
		{
			return ((IRepository<DossierCountryMkthist>)this).Get(projectionName, dossierCountryMkthistId, fields);
		}

		public DossierCountryMkthist Get(Projection projection, System.Decimal dossierCountryMkthistId, params string[] fields)
		{
			return ((IRepository<DossierCountryMkthist>)this).Get(projection, dossierCountryMkthistId, fields);
		}

		public bool Delete(System.Decimal dossierCountryMkthistId)
		{
			var entity = new DossierCountryMkthist { DossierCountryMkthistId = dossierCountryMkthistId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryMkthistFields
	{
		public const string DossierCountryMkthistId = "DossierCountryMkthistId";
		public const string DossierCountryId = "DossierCountryId";
		public const string StopDate = "StopDate";
		public const string StartDate = "StartDate";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsNaStartDate = "IsNaStartDate";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string DossierId = "DossierId";
		public const string CountryId = "CountryId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_MKTNUMBERS")]
	public partial class DossierCountryMknumber
	{
		private Decimal _dossierCountryMktnumberId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_MKTNUMBER_ID", ColumnName ="DOSSIER_COUNTRY_MKTNUMBER_ID", BaseColumnName ="DOSSIER_COUNTRY_MKTNUMBER_ID", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public Decimal DossierCountryMktnumberId 
		{ 
		    get { return _dossierCountryMktnumberId; } 
			set 
			{
			    _dossierCountryMktnumberId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _mktAuthNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MKT_AUTH_NUMBER", BaseColumnName ="MKT_AUTH_NUMBER", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public String MktAuthNumber 
		{ 
		    get { return _mktAuthNumber; } 
			set 
			{
			    _mktAuthNumber = value;
			}
        }

		private String _evcode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="EVCODE", BaseColumnName ="EVCODE", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public String Evcode 
		{ 
		    get { return _evcode; } 
			set 
			{
			    _evcode = value;
			}
        }

		private String _status;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="STATUS", BaseColumnName ="STATUS", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public String Status 
		{ 
		    get { return _status; } 
			set 
			{
			    _status = value;
			}
        }

		private String _enrNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ENR_NUMBER", BaseColumnName ="ENR_NUMBER", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public String EnrNumber 
		{ 
		    get { return _enrNumber; } 
			set 
			{
			    _enrNumber = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _dossierCountryMpId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_COUNTRY_MP_ID", BaseColumnName ="DOSSIER_COUNTRY_MP_ID", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public Decimal? DossierCountryMpId 
		{ 
		    get { return _dossierCountryMpId; } 
			set 
			{
			    _dossierCountryMpId = value;
			}
        }

		private Decimal? _dossierCountryPresId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_COUNTRY_PRES_ID", BaseColumnName ="DOSSIER_COUNTRY_PRES_ID", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public Decimal? DossierCountryPresId 
		{ 
		    get { return _dossierCountryPresId; } 
			set 
			{
			    _dossierCountryPresId = value;
			}
        }

		private Decimal? _marketingAuthStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MARKETING_AUTH_STATUS_ID", BaseColumnName ="MARKETING_AUTH_STATUS_ID", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public Decimal? MarketingAuthStatusId 
		{ 
		    get { return _marketingAuthStatusId; } 
			set 
			{
			    _marketingAuthStatusId = value;
			}
        }

		private String _previousEvcode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PREVIOUS_EVCODE", BaseColumnName ="PREVIOUS_EVCODE", BaseTableName = "DOSSIER_COUNTRY_MKTNUMBERS" )]		public String PreviousEvcode 
		{ 
		    get { return _previousEvcode; } 
			set 
			{
			    _previousEvcode = value;
			}
        }

		private String _statusName;
		[DataMember]
		[SqlField(DbType.String, 10, ColumnName ="STATUS_NAME" )]		public String StatusName 
		{ 
		    get { return _statusName; } 
			set 
			{
			    _statusName = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 0, ColumnName ="DESCRIPTION" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private String _closureSystemName;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 0, ColumnName ="CLOSURE_SYSTEM_NAME" )]		public String ClosureSystemName 
		{ 
		    get { return _closureSystemName; } 
			set 
			{
			    _closureSystemName = value;
			}
        }

		private String _marketingAuthStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MARKETING_AUTH_STATUS_NAME" )]		public String MarketingAuthStatusName 
		{ 
		    get { return _marketingAuthStatusName; } 
			set 
			{
			    _marketingAuthStatusName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }


	}

	public partial class DossierCountryMknumberRepository : Repository<DossierCountryMknumber> 
	{
		public DossierCountryMknumberRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryMknumber Get(string projectionName, System.Decimal dossierCountryMktnumberId)
		{
			return ((IRepository<DossierCountryMknumber>)this).Get(projectionName, dossierCountryMktnumberId, FetchMode.UseIdentityMap);
		}

		public DossierCountryMknumber Get(string projectionName, System.Decimal dossierCountryMktnumberId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryMknumber>)this).Get(projectionName, dossierCountryMktnumberId, fetchMode);
		}

		public DossierCountryMknumber Get(Projection projection, System.Decimal dossierCountryMktnumberId)
		{
			return ((IRepository<DossierCountryMknumber>)this).Get(projection, dossierCountryMktnumberId, FetchMode.UseIdentityMap);
		}

		public DossierCountryMknumber Get(Projection projection, System.Decimal dossierCountryMktnumberId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryMknumber>)this).Get(projection, dossierCountryMktnumberId, fetchMode);
		}

		public DossierCountryMknumber Get(string projectionName, System.Decimal dossierCountryMktnumberId, params string[] fields)
		{
			return ((IRepository<DossierCountryMknumber>)this).Get(projectionName, dossierCountryMktnumberId, fields);
		}

		public DossierCountryMknumber Get(Projection projection, System.Decimal dossierCountryMktnumberId, params string[] fields)
		{
			return ((IRepository<DossierCountryMknumber>)this).Get(projection, dossierCountryMktnumberId, fields);
		}

		public bool Delete(System.Decimal dossierCountryMktnumberId)
		{
			var entity = new DossierCountryMknumber { DossierCountryMktnumberId = dossierCountryMktnumberId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryMknumberFields
	{
		public const string DossierCountryMktnumberId = "DossierCountryMktnumberId";
		public const string DossierCountryId = "DossierCountryId";
		public const string MktAuthNumber = "MktAuthNumber";
		public const string Evcode = "Evcode";
		public const string Status = "Status";
		public const string EnrNumber = "EnrNumber";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierCountryMpId = "DossierCountryMpId";
		public const string DossierCountryPresId = "DossierCountryPresId";
		public const string MarketingAuthStatusId = "MarketingAuthStatusId";
		public const string PreviousEvcode = "PreviousEvcode";
		public const string StatusName = "StatusName";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string Description = "Description";
		public const string ClosureSystemName = "ClosureSystemName";
		public const string MarketingAuthStatusName = "MarketingAuthStatusName";
		public const string DossierId = "DossierId";
		public const string CountryId = "CountryId";
		public const string TwoLettersCode = "TwoLettersCode";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="REGISTRATION_PROCESSES")]
	public partial class RegistrationProcess
	{
		private Decimal _registrationProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "REGISTRATION_PROCESS_ID", ColumnName ="REGISTRATION_PROCESS_ID", BaseColumnName ="REGISTRATION_PROCESS_ID", BaseTableName = "REGISTRATION_PROCESSES" )]		public Decimal RegistrationProcessId 
		{ 
		    get { return _registrationProcessId; } 
			set 
			{
			    _registrationProcessId = value;
			}
        }

		private String _isDossierAudited;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_AUDITED", BaseColumnName ="IS_DOSSIER_AUDITED", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsDossierAudited 
		{ 
		    get { return _isDossierAudited; } 
			set 
			{
			    _isDossierAudited = value;
			}
        }

		private String _isProjectConformity;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_PROJECT_CONFORMITY", BaseColumnName ="IS_PROJECT_CONFORMITY", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsProjectConformity 
		{ 
		    get { return _isProjectConformity; } 
			set 
			{
			    _isProjectConformity = value;
			}
        }

		private Decimal? _applicantId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="APPLICANT_ID", BaseColumnName ="APPLICANT_ID", BaseTableName = "REGISTRATION_PROCESSES" )]		public Decimal? ApplicantId 
		{ 
		    get { return _applicantId; } 
			set 
			{
			    _applicantId = value;
			}
        }

		private DateTime? _dispatchExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DISPATCH_EXPECTED_DATE", BaseColumnName ="DISPATCH_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? DispatchExpectedDate 
		{ 
		    get { return _dispatchExpectedDate; } 
			set 
			{
			    _dispatchExpectedDate = value;
			}
        }

		private DateTime? _submissionExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_EXPECTED_DATE", BaseColumnName ="SUBMISSION_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? SubmissionExpectedDate 
		{ 
		    get { return _submissionExpectedDate; } 
			set 
			{
			    _submissionExpectedDate = value;
			}
        }

		private DateTime? _submissionDeadlineDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DEADLINE_DATE", BaseColumnName ="SUBMISSION_DEADLINE_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? SubmissionDeadlineDate 
		{ 
		    get { return _submissionDeadlineDate; } 
			set 
			{
			    _submissionDeadlineDate = value;
			}
        }

		private DateTime? _submissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DATE", BaseColumnName ="SUBMISSION_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? SubmissionDate 
		{ 
		    get { return _submissionDate; } 
			set 
			{
			    _submissionDate = value;
			}
        }

		private DateTime? _opinionExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="OPINION_EXPECTED_DATE", BaseColumnName ="OPINION_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? OpinionExpectedDate 
		{ 
		    get { return _opinionExpectedDate; } 
			set 
			{
			    _opinionExpectedDate = value;
			}
        }

		private DateTime? _dossierValidationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DOSSIER_VALIDATION_DATE", BaseColumnName ="DOSSIER_VALIDATION_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? DossierValidationDate 
		{ 
		    get { return _dossierValidationDate; } 
			set 
			{
			    _dossierValidationDate = value;
			}
        }

		private String _isApplicationSubmitted;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_APPLICATION_SUBMITTED", BaseColumnName ="IS_APPLICATION_SUBMITTED", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsApplicationSubmitted 
		{ 
		    get { return _isApplicationSubmitted; } 
			set 
			{
			    _isApplicationSubmitted = value;
			}
        }

		private DateTime? _d0ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D0_EXPECTED_DATE", BaseColumnName ="D0_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D0ExpectedDate 
		{ 
		    get { return _d0ExpectedDate; } 
			set 
			{
			    _d0ExpectedDate = value;
			}
        }

		private DateTime? _d0RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D0_REAL_DATE", BaseColumnName ="D0_REAL_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D0RealDate 
		{ 
		    get { return _d0RealDate; } 
			set 
			{
			    _d0RealDate = value;
			}
        }

		private DateTime? _d10ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D10_EXPECTED_DATE", BaseColumnName ="D10_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D10ExpectedDate 
		{ 
		    get { return _d10ExpectedDate; } 
			set 
			{
			    _d10ExpectedDate = value;
			}
        }

		private DateTime? _d10RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D10_REAL_DATE", BaseColumnName ="D10_REAL_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D10RealDate 
		{ 
		    get { return _d10RealDate; } 
			set 
			{
			    _d10RealDate = value;
			}
        }

		private DateTime? _d25ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D25_EXPECTED_DATE", BaseColumnName ="D25_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D25ExpectedDate 
		{ 
		    get { return _d25ExpectedDate; } 
			set 
			{
			    _d25ExpectedDate = value;
			}
        }

		private DateTime? _d25RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D25_REAL_DATE", BaseColumnName ="D25_REAL_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D25RealDate 
		{ 
		    get { return _d25RealDate; } 
			set 
			{
			    _d25RealDate = value;
			}
        }

		private DateTime? _d35ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D35_EXPECTED_DATE", BaseColumnName ="D35_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D35ExpectedDate 
		{ 
		    get { return _d35ExpectedDate; } 
			set 
			{
			    _d35ExpectedDate = value;
			}
        }

		private DateTime? _d35RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D35_REAL_DATE", BaseColumnName ="D35_REAL_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D35RealDate 
		{ 
		    get { return _d35RealDate; } 
			set 
			{
			    _d35RealDate = value;
			}
        }

		private DateTime? _d55ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D55_EXPECTED_DATE", BaseColumnName ="D55_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D55ExpectedDate 
		{ 
		    get { return _d55ExpectedDate; } 
			set 
			{
			    _d55ExpectedDate = value;
			}
        }

		private DateTime? _d55RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D55_REAL_DATE", BaseColumnName ="D55_REAL_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D55RealDate 
		{ 
		    get { return _d55RealDate; } 
			set 
			{
			    _d55RealDate = value;
			}
        }

		private DateTime? _d60ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D60_EXPECTED_DATE", BaseColumnName ="D60_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D60ExpectedDate 
		{ 
		    get { return _d60ExpectedDate; } 
			set 
			{
			    _d60ExpectedDate = value;
			}
        }

		private DateTime? _d60RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D60_REAL_DATE", BaseColumnName ="D60_REAL_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? D60RealDate 
		{ 
		    get { return _d60RealDate; } 
			set 
			{
			    _d60RealDate = value;
			}
        }

		private String _finalOpinion;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="FINAL_OPINION", BaseColumnName ="FINAL_OPINION", BaseTableName = "REGISTRATION_PROCESSES" )]		public String FinalOpinion 
		{ 
		    get { return _finalOpinion; } 
			set 
			{
			    _finalOpinion = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "REGISTRATION_PROCESSES" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "REGISTRATION_PROCESSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "REGISTRATION_PROCESSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _dossierAuditedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DOSSIER_AUDITED_DATE", BaseColumnName ="DOSSIER_AUDITED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? DossierAuditedDate 
		{ 
		    get { return _dossierAuditedDate; } 
			set 
			{
			    _dossierAuditedDate = value;
			}
        }

		private DateTime? _finalFavourableDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FINAL_FAVOURABLE_DATE", BaseColumnName ="FINAL_FAVOURABLE_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? FinalFavourableDate 
		{ 
		    get { return _finalFavourableDate; } 
			set 
			{
			    _finalFavourableDate = value;
			}
        }

		private DateTime? _finalUnfavourableDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FINAL_UNFAVOURABLE_DATE", BaseColumnName ="FINAL_UNFAVOURABLE_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? FinalUnfavourableDate 
		{ 
		    get { return _finalUnfavourableDate; } 
			set 
			{
			    _finalUnfavourableDate = value;
			}
        }

		private String _isCompleteDispatchDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_COMPLETE_DISPATCH_DATE", BaseColumnName ="IS_COMPLETE_DISPATCH_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsCompleteDispatchDate 
		{ 
		    get { return _isCompleteDispatchDate; } 
			set 
			{
			    _isCompleteDispatchDate = value;
			}
        }

		private String _isCompleteSubmissionDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_COMPLETE_SUBMISSION_DATE", BaseColumnName ="IS_COMPLETE_SUBMISSION_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsCompleteSubmissionDate 
		{ 
		    get { return _isCompleteSubmissionDate; } 
			set 
			{
			    _isCompleteSubmissionDate = value;
			}
        }

		private String _dossierValidationComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="DOSSIER_VALIDATION_COMMENTS", BaseColumnName ="DOSSIER_VALIDATION_COMMENTS", BaseTableName = "REGISTRATION_PROCESSES" )]		public String DossierValidationComments 
		{ 
		    get { return _dossierValidationComments; } 
			set 
			{
			    _dossierValidationComments = value;
			}
        }

		private DateTime? _raefarInclusionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RAEFAR_INCLUSION_DATE", BaseColumnName ="RAEFAR_INCLUSION_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? RaefarInclusionDate 
		{ 
		    get { return _raefarInclusionDate; } 
			set 
			{
			    _raefarInclusionDate = value;
			}
        }

		private DateTime? _dossierRequestDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DOSSIER_REQUEST_DATE", BaseColumnName ="DOSSIER_REQUEST_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? DossierRequestDate 
		{ 
		    get { return _dossierRequestDate; } 
			set 
			{
			    _dossierRequestDate = value;
			}
        }

		private String _isNaAuditedDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_AUDITED_DATE", BaseColumnName ="IS_NA_AUDITED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaAuditedDate 
		{ 
		    get { return _isNaAuditedDate; } 
			set 
			{
			    _isNaAuditedDate = value;
			}
        }

		private String _isNaRequestDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REQUEST_DATE", BaseColumnName ="IS_NA_REQUEST_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaRequestDate 
		{ 
		    get { return _isNaRequestDate; } 
			set 
			{
			    _isNaRequestDate = value;
			}
        }

		private String _isNaDispatchExpectedDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DISPATCH_EXPECTED_DATE", BaseColumnName ="IS_NA_DISPATCH_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaDispatchExpectedDate 
		{ 
		    get { return _isNaDispatchExpectedDate; } 
			set 
			{
			    _isNaDispatchExpectedDate = value;
			}
        }

		private String _isNaDispatchClientDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DISPATCH_CLIENT_DATE", BaseColumnName ="IS_NA_DISPATCH_CLIENT_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaDispatchClientDate 
		{ 
		    get { return _isNaDispatchClientDate; } 
			set 
			{
			    _isNaDispatchClientDate = value;
			}
        }

		private String _isNaSubmissionExpectedDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUBMISSION_EXPECTED_DATE", BaseColumnName ="IS_NA_SUBMISSION_EXPECTED_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaSubmissionExpectedDate 
		{ 
		    get { return _isNaSubmissionExpectedDate; } 
			set 
			{
			    _isNaSubmissionExpectedDate = value;
			}
        }

		private String _isNaSubmissionDeadlineDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUBMISSION_DEADLINE_DATE", BaseColumnName ="IS_NA_SUBMISSION_DEADLINE_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaSubmissionDeadlineDate 
		{ 
		    get { return _isNaSubmissionDeadlineDate; } 
			set 
			{
			    _isNaSubmissionDeadlineDate = value;
			}
        }

		private String _isNaSubmissionDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUBMISSION_DATE", BaseColumnName ="IS_NA_SUBMISSION_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaSubmissionDate 
		{ 
		    get { return _isNaSubmissionDate; } 
			set 
			{
			    _isNaSubmissionDate = value;
			}
        }

		private String _isNaRaefarDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RAEFAR_DATE", BaseColumnName ="IS_NA_RAEFAR_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaRaefarDate 
		{ 
		    get { return _isNaRaefarDate; } 
			set 
			{
			    _isNaRaefarDate = value;
			}
        }

		private String _isNaValidationDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_VALIDATION_DATE", BaseColumnName ="IS_NA_VALIDATION_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaValidationDate 
		{ 
		    get { return _isNaValidationDate; } 
			set 
			{
			    _isNaValidationDate = value;
			}
        }

		private String _isNaExpectedFavourable;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_FAVOURABLE", BaseColumnName ="IS_NA_EXPECTED_FAVOURABLE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaExpectedFavourable 
		{ 
		    get { return _isNaExpectedFavourable; } 
			set 
			{
			    _isNaExpectedFavourable = value;
			}
        }

		private String _isNaFavourable;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_FAVOURABLE", BaseColumnName ="IS_NA_FAVOURABLE", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaFavourable 
		{ 
		    get { return _isNaFavourable; } 
			set 
			{
			    _isNaFavourable = value;
			}
        }

		private String _isNaExpected0;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED0", BaseColumnName ="IS_NA_EXPECTED0", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaExpected0 
		{ 
		    get { return _isNaExpected0; } 
			set 
			{
			    _isNaExpected0 = value;
			}
        }

		private String _isNaExpected10;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED10", BaseColumnName ="IS_NA_EXPECTED10", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaExpected10 
		{ 
		    get { return _isNaExpected10; } 
			set 
			{
			    _isNaExpected10 = value;
			}
        }

		private String _isNaExpected25;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED25", BaseColumnName ="IS_NA_EXPECTED25", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaExpected25 
		{ 
		    get { return _isNaExpected25; } 
			set 
			{
			    _isNaExpected25 = value;
			}
        }

		private String _isNaExpected35;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED35", BaseColumnName ="IS_NA_EXPECTED35", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaExpected35 
		{ 
		    get { return _isNaExpected35; } 
			set 
			{
			    _isNaExpected35 = value;
			}
        }

		private String _isNaExpected55;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED55", BaseColumnName ="IS_NA_EXPECTED55", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaExpected55 
		{ 
		    get { return _isNaExpected55; } 
			set 
			{
			    _isNaExpected55 = value;
			}
        }

		private String _isNaExpected60;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED60", BaseColumnName ="IS_NA_EXPECTED60", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaExpected60 
		{ 
		    get { return _isNaExpected60; } 
			set 
			{
			    _isNaExpected60 = value;
			}
        }

		private String _isNaReal0;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL0", BaseColumnName ="IS_NA_REAL0", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaReal0 
		{ 
		    get { return _isNaReal0; } 
			set 
			{
			    _isNaReal0 = value;
			}
        }

		private String _isNaReal10;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL10", BaseColumnName ="IS_NA_REAL10", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaReal10 
		{ 
		    get { return _isNaReal10; } 
			set 
			{
			    _isNaReal10 = value;
			}
        }

		private String _isNaReal25;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL25", BaseColumnName ="IS_NA_REAL25", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaReal25 
		{ 
		    get { return _isNaReal25; } 
			set 
			{
			    _isNaReal25 = value;
			}
        }

		private String _isNaReal35;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL35", BaseColumnName ="IS_NA_REAL35", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaReal35 
		{ 
		    get { return _isNaReal35; } 
			set 
			{
			    _isNaReal35 = value;
			}
        }

		private String _isNaReal55;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL55", BaseColumnName ="IS_NA_REAL55", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaReal55 
		{ 
		    get { return _isNaReal55; } 
			set 
			{
			    _isNaReal55 = value;
			}
        }

		private String _isNaReal60;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL60", BaseColumnName ="IS_NA_REAL60", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaReal60 
		{ 
		    get { return _isNaReal60; } 
			set 
			{
			    _isNaReal60 = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "REGISTRATION_PROCESSES" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private DateTime? _secondSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SECOND_SUBMISSION_DATE", BaseColumnName ="SECOND_SUBMISSION_DATE", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? SecondSubmissionDate 
		{ 
		    get { return _secondSubmissionDate; } 
			set 
			{
			    _secondSubmissionDate = value;
			}
        }

		private String _isNaSecondSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SECOND_SUBMISSION", BaseColumnName ="IS_NA_SECOND_SUBMISSION", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaSecondSubmission 
		{ 
		    get { return _isNaSecondSubmission; } 
			set 
			{
			    _isNaSecondSubmission = value;
			}
        }

		private DateTime? _day106;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DAY_106", BaseColumnName ="DAY_106", BaseTableName = "REGISTRATION_PROCESSES" )]		public DateTime? Day106 
		{ 
		    get { return _day106; } 
			set 
			{
			    _day106 = value;
			}
        }

		private String _isNaDay106;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DAY_106", BaseColumnName ="IS_NA_DAY_106", BaseTableName = "REGISTRATION_PROCESSES" )]		public String IsNaDay106 
		{ 
		    get { return _isNaDay106; } 
			set 
			{
			    _isNaDay106 = value;
			}
        }

		private String _applicantName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="APPLICANT_NAME" )]		public String ApplicantName 
		{ 
		    get { return _applicantName; } 
			set 
			{
			    _applicantName = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private Decimal? _submissionDateYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SUBMISSION_DATE_YEAR" )]		public Decimal? SubmissionDateYear 
		{ 
		    get { return _submissionDateYear; } 
			set 
			{
			    _submissionDateYear = value;
			}
        }

		private Decimal? _submissionDateMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SUBMISSION_DATE_MONTH" )]		public Decimal? SubmissionDateMonth 
		{ 
		    get { return _submissionDateMonth; } 
			set 
			{
			    _submissionDateMonth = value;
			}
        }


	}

	public partial class RegistrationProcessRepository : Repository<RegistrationProcess> 
	{
		public RegistrationProcessRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RegistrationProcess Get(string projectionName, System.Decimal registrationProcessId)
		{
			return ((IRepository<RegistrationProcess>)this).Get(projectionName, registrationProcessId, FetchMode.UseIdentityMap);
		}

		public RegistrationProcess Get(string projectionName, System.Decimal registrationProcessId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RegistrationProcess>)this).Get(projectionName, registrationProcessId, fetchMode);
		}

		public RegistrationProcess Get(Projection projection, System.Decimal registrationProcessId)
		{
			return ((IRepository<RegistrationProcess>)this).Get(projection, registrationProcessId, FetchMode.UseIdentityMap);
		}

		public RegistrationProcess Get(Projection projection, System.Decimal registrationProcessId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RegistrationProcess>)this).Get(projection, registrationProcessId, fetchMode);
		}

		public RegistrationProcess Get(string projectionName, System.Decimal registrationProcessId, params string[] fields)
		{
			return ((IRepository<RegistrationProcess>)this).Get(projectionName, registrationProcessId, fields);
		}

		public RegistrationProcess Get(Projection projection, System.Decimal registrationProcessId, params string[] fields)
		{
			return ((IRepository<RegistrationProcess>)this).Get(projection, registrationProcessId, fields);
		}

		public bool Delete(System.Decimal registrationProcessId)
		{
			var entity = new RegistrationProcess { RegistrationProcessId = registrationProcessId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RegistrationProcessFields
	{
		public const string RegistrationProcessId = "RegistrationProcessId";
		public const string IsDossierAudited = "IsDossierAudited";
		public const string IsProjectConformity = "IsProjectConformity";
		public const string ApplicantId = "ApplicantId";
		public const string DispatchExpectedDate = "DispatchExpectedDate";
		public const string SubmissionExpectedDate = "SubmissionExpectedDate";
		public const string SubmissionDeadlineDate = "SubmissionDeadlineDate";
		public const string SubmissionDate = "SubmissionDate";
		public const string OpinionExpectedDate = "OpinionExpectedDate";
		public const string DossierValidationDate = "DossierValidationDate";
		public const string IsApplicationSubmitted = "IsApplicationSubmitted";
		public const string D0ExpectedDate = "D0ExpectedDate";
		public const string D0RealDate = "D0RealDate";
		public const string D10ExpectedDate = "D10ExpectedDate";
		public const string D10RealDate = "D10RealDate";
		public const string D25ExpectedDate = "D25ExpectedDate";
		public const string D25RealDate = "D25RealDate";
		public const string D35ExpectedDate = "D35ExpectedDate";
		public const string D35RealDate = "D35RealDate";
		public const string D55ExpectedDate = "D55ExpectedDate";
		public const string D55RealDate = "D55RealDate";
		public const string D60ExpectedDate = "D60ExpectedDate";
		public const string D60RealDate = "D60RealDate";
		public const string FinalOpinion = "FinalOpinion";
		public const string DossierId = "DossierId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierAuditedDate = "DossierAuditedDate";
		public const string FinalFavourableDate = "FinalFavourableDate";
		public const string FinalUnfavourableDate = "FinalUnfavourableDate";
		public const string IsCompleteDispatchDate = "IsCompleteDispatchDate";
		public const string IsCompleteSubmissionDate = "IsCompleteSubmissionDate";
		public const string DossierValidationComments = "DossierValidationComments";
		public const string RaefarInclusionDate = "RaefarInclusionDate";
		public const string DossierRequestDate = "DossierRequestDate";
		public const string IsNaAuditedDate = "IsNaAuditedDate";
		public const string IsNaRequestDate = "IsNaRequestDate";
		public const string IsNaDispatchExpectedDate = "IsNaDispatchExpectedDate";
		public const string IsNaDispatchClientDate = "IsNaDispatchClientDate";
		public const string IsNaSubmissionExpectedDate = "IsNaSubmissionExpectedDate";
		public const string IsNaSubmissionDeadlineDate = "IsNaSubmissionDeadlineDate";
		public const string IsNaSubmissionDate = "IsNaSubmissionDate";
		public const string IsNaRaefarDate = "IsNaRaefarDate";
		public const string IsNaValidationDate = "IsNaValidationDate";
		public const string IsNaExpectedFavourable = "IsNaExpectedFavourable";
		public const string IsNaFavourable = "IsNaFavourable";
		public const string IsNaExpected0 = "IsNaExpected0";
		public const string IsNaExpected10 = "IsNaExpected10";
		public const string IsNaExpected25 = "IsNaExpected25";
		public const string IsNaExpected35 = "IsNaExpected35";
		public const string IsNaExpected55 = "IsNaExpected55";
		public const string IsNaExpected60 = "IsNaExpected60";
		public const string IsNaReal0 = "IsNaReal0";
		public const string IsNaReal10 = "IsNaReal10";
		public const string IsNaReal25 = "IsNaReal25";
		public const string IsNaReal35 = "IsNaReal35";
		public const string IsNaReal55 = "IsNaReal55";
		public const string IsNaReal60 = "IsNaReal60";
		public const string Comments = "Comments";
		public const string SecondSubmissionDate = "SecondSubmissionDate";
		public const string IsNaSecondSubmission = "IsNaSecondSubmission";
		public const string Day106 = "Day106";
		public const string IsNaDay106 = "IsNaDay106";
		public const string ApplicantName = "ApplicantName";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string SubmissionDateYear = "SubmissionDateYear";
		public const string SubmissionDateMonth = "SubmissionDateMonth";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RP_CHANGE_CONTROLS")]
	public partial class RpChangeControl
	{
		private Decimal _rpChangeControlId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RP_CHANGE_CONTROL_ID", ColumnName ="RP_CHANGE_CONTROL_ID", BaseColumnName ="RP_CHANGE_CONTROL_ID", BaseTableName = "RP_CHANGE_CONTROLS" )]		public Decimal RpChangeControlId 
		{ 
		    get { return _rpChangeControlId; } 
			set 
			{
			    _rpChangeControlId = value;
			}
        }

		private Decimal _registrationProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="REGISTRATION_PROCESS_ID", BaseColumnName ="REGISTRATION_PROCESS_ID", BaseTableName = "RP_CHANGE_CONTROLS" )]		public Decimal RegistrationProcessId 
		{ 
		    get { return _registrationProcessId; } 
			set 
			{
			    _registrationProcessId = value;
			}
        }

		private String _ccCode;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="CC_CODE", BaseColumnName ="CC_CODE", BaseTableName = "RP_CHANGE_CONTROLS" )]		public String CcCode 
		{ 
		    get { return _ccCode; } 
			set 
			{
			    _ccCode = value;
			}
        }

		private Decimal? _userId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="USER_ID", BaseColumnName ="USER_ID", BaseTableName = "RP_CHANGE_CONTROLS" )]		public Decimal? UserId 
		{ 
		    get { return _userId; } 
			set 
			{
			    _userId = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "RP_CHANGE_CONTROLS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RP_CHANGE_CONTROLS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RP_CHANGE_CONTROLS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RP_CHANGE_CONTROLS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RP_CHANGE_CONTROLS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _responsible;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="RESPONSIBLE", BaseColumnName ="RESPONSIBLE", BaseTableName = "RP_CHANGE_CONTROLS" )]		public String Responsible 
		{ 
		    get { return _responsible; } 
			set 
			{
			    _responsible = value;
			}
        }

		private String _creator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR" )]		public String Creator 
		{ 
		    get { return _creator; } 
			set 
			{
			    _creator = value;
			}
        }

		private String _modificator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR" )]		public String Modificator 
		{ 
		    get { return _modificator; } 
			set 
			{
			    _modificator = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }


	}

	public partial class RpChangeControlRepository : Repository<RpChangeControl> 
	{
		public RpChangeControlRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RpChangeControl Get(string projectionName, System.Decimal rpChangeControlId)
		{
			return ((IRepository<RpChangeControl>)this).Get(projectionName, rpChangeControlId, FetchMode.UseIdentityMap);
		}

		public RpChangeControl Get(string projectionName, System.Decimal rpChangeControlId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpChangeControl>)this).Get(projectionName, rpChangeControlId, fetchMode);
		}

		public RpChangeControl Get(Projection projection, System.Decimal rpChangeControlId)
		{
			return ((IRepository<RpChangeControl>)this).Get(projection, rpChangeControlId, FetchMode.UseIdentityMap);
		}

		public RpChangeControl Get(Projection projection, System.Decimal rpChangeControlId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpChangeControl>)this).Get(projection, rpChangeControlId, fetchMode);
		}

		public RpChangeControl Get(string projectionName, System.Decimal rpChangeControlId, params string[] fields)
		{
			return ((IRepository<RpChangeControl>)this).Get(projectionName, rpChangeControlId, fields);
		}

		public RpChangeControl Get(Projection projection, System.Decimal rpChangeControlId, params string[] fields)
		{
			return ((IRepository<RpChangeControl>)this).Get(projection, rpChangeControlId, fields);
		}

		public bool Delete(System.Decimal rpChangeControlId)
		{
			var entity = new RpChangeControl { RpChangeControlId = rpChangeControlId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RpChangeControlFields
	{
		public const string RpChangeControlId = "RpChangeControlId";
		public const string RegistrationProcessId = "RegistrationProcessId";
		public const string CcCode = "CcCode";
		public const string UserId = "UserId";
		public const string Comments = "Comments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string Responsible = "Responsible";
		public const string Creator = "Creator";
		public const string Modificator = "Modificator";
		public const string DossierId = "DossierId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RP_DISPATCH_DATES")]
	public partial class RpDispatchDate
	{
		private Decimal _rpDispatchDateId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RP_DISPATCH_DATE_ID", ColumnName ="RP_DISPATCH_DATE_ID", BaseColumnName ="RP_DISPATCH_DATE_ID", BaseTableName = "RP_DISPATCH_DATES" )]		public Decimal RpDispatchDateId 
		{ 
		    get { return _rpDispatchDateId; } 
			set 
			{
			    _rpDispatchDateId = value;
			}
        }

		private Decimal _registrationProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="REGISTRATION_PROCESS_ID", BaseColumnName ="REGISTRATION_PROCESS_ID", BaseTableName = "RP_DISPATCH_DATES" )]		public Decimal RegistrationProcessId 
		{ 
		    get { return _registrationProcessId; } 
			set 
			{
			    _registrationProcessId = value;
			}
        }

		private DateTime _clientDispatchDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="CLIENT_DISPATCH_DATE", BaseColumnName ="CLIENT_DISPATCH_DATE", BaseTableName = "RP_DISPATCH_DATES" )]		public DateTime ClientDispatchDate 
		{ 
		    get { return _clientDispatchDate; } 
			set 
			{
			    _clientDispatchDate = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RP_DISPATCH_DATES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RP_DISPATCH_DATES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RP_DISPATCH_DATES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RP_DISPATCH_DATES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class RpDispatchDateRepository : Repository<RpDispatchDate> 
	{
		public RpDispatchDateRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RpDispatchDate Get(string projectionName, System.Decimal rpDispatchDateId)
		{
			return ((IRepository<RpDispatchDate>)this).Get(projectionName, rpDispatchDateId, FetchMode.UseIdentityMap);
		}

		public RpDispatchDate Get(string projectionName, System.Decimal rpDispatchDateId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpDispatchDate>)this).Get(projectionName, rpDispatchDateId, fetchMode);
		}

		public RpDispatchDate Get(Projection projection, System.Decimal rpDispatchDateId)
		{
			return ((IRepository<RpDispatchDate>)this).Get(projection, rpDispatchDateId, FetchMode.UseIdentityMap);
		}

		public RpDispatchDate Get(Projection projection, System.Decimal rpDispatchDateId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpDispatchDate>)this).Get(projection, rpDispatchDateId, fetchMode);
		}

		public RpDispatchDate Get(string projectionName, System.Decimal rpDispatchDateId, params string[] fields)
		{
			return ((IRepository<RpDispatchDate>)this).Get(projectionName, rpDispatchDateId, fields);
		}

		public RpDispatchDate Get(Projection projection, System.Decimal rpDispatchDateId, params string[] fields)
		{
			return ((IRepository<RpDispatchDate>)this).Get(projection, rpDispatchDateId, fields);
		}

		public bool Delete(System.Decimal rpDispatchDateId)
		{
			var entity = new RpDispatchDate { RpDispatchDateId = rpDispatchDateId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RpDispatchDateFields
	{
		public const string RpDispatchDateId = "RpDispatchDateId";
		public const string RegistrationProcessId = "RegistrationProcessId";
		public const string ClientDispatchDate = "ClientDispatchDate";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RP_RESPONSABILITIES")]
	public partial class RpResponsability
	{
		private Decimal _rpResponsabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RP_RESPONSABILITY_ID", ColumnName ="RP_RESPONSABILITY_ID", BaseColumnName ="RP_RESPONSABILITY_ID", BaseTableName = "RP_RESPONSABILITIES" )]		public Decimal RpResponsabilityId 
		{ 
		    get { return _rpResponsabilityId; } 
			set 
			{
			    _rpResponsabilityId = value;
			}
        }

		private Decimal _registrationProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="REGISTRATION_PROCESS_ID", BaseColumnName ="REGISTRATION_PROCESS_ID", BaseTableName = "RP_RESPONSABILITIES" )]		public Decimal RegistrationProcessId 
		{ 
		    get { return _registrationProcessId; } 
			set 
			{
			    _registrationProcessId = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "RP_RESPONSABILITIES" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RP_RESPONSABILITIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RP_RESPONSABILITIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RP_RESPONSABILITIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RP_RESPONSABILITIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class RpResponsabilityRepository : Repository<RpResponsability> 
	{
		public RpResponsabilityRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RpResponsability Get(string projectionName, System.Decimal rpResponsabilityId)
		{
			return ((IRepository<RpResponsability>)this).Get(projectionName, rpResponsabilityId, FetchMode.UseIdentityMap);
		}

		public RpResponsability Get(string projectionName, System.Decimal rpResponsabilityId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpResponsability>)this).Get(projectionName, rpResponsabilityId, fetchMode);
		}

		public RpResponsability Get(Projection projection, System.Decimal rpResponsabilityId)
		{
			return ((IRepository<RpResponsability>)this).Get(projection, rpResponsabilityId, FetchMode.UseIdentityMap);
		}

		public RpResponsability Get(Projection projection, System.Decimal rpResponsabilityId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpResponsability>)this).Get(projection, rpResponsabilityId, fetchMode);
		}

		public RpResponsability Get(string projectionName, System.Decimal rpResponsabilityId, params string[] fields)
		{
			return ((IRepository<RpResponsability>)this).Get(projectionName, rpResponsabilityId, fields);
		}

		public RpResponsability Get(Projection projection, System.Decimal rpResponsabilityId, params string[] fields)
		{
			return ((IRepository<RpResponsability>)this).Get(projection, rpResponsabilityId, fields);
		}

		public bool Delete(System.Decimal rpResponsabilityId)
		{
			var entity = new RpResponsability { RpResponsabilityId = rpResponsabilityId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RpResponsabilityFields
	{
		public const string RpResponsabilityId = "RpResponsabilityId";
		public const string RegistrationProcessId = "RegistrationProcessId";
		public const string Comments = "Comments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RP_RESPONSABILITY_PERSONS")]
	public partial class RpResponsabilityPerson
	{
		private Decimal _rpResponsabilityPersonId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RP_RESPONSABILITY_PERSON_ID", ColumnName ="RP_RESPONSABILITY_PERSON_ID", BaseColumnName ="RP_RESPONSABILITY_PERSON_ID", BaseTableName = "RP_RESPONSABILITY_PERSONS" )]		public Decimal RpResponsabilityPersonId 
		{ 
		    get { return _rpResponsabilityPersonId; } 
			set 
			{
			    _rpResponsabilityPersonId = value;
			}
        }

		private Decimal _rpResponsabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="RP_RESPONSABILITY_ID", BaseColumnName ="RP_RESPONSABILITY_ID", BaseTableName = "RP_RESPONSABILITY_PERSONS" )]		public Decimal RpResponsabilityId 
		{ 
		    get { return _rpResponsabilityId; } 
			set 
			{
			    _rpResponsabilityId = value;
			}
        }

		private Decimal _userId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="USER_ID", BaseColumnName ="USER_ID", BaseTableName = "RP_RESPONSABILITY_PERSONS" )]		public Decimal UserId 
		{ 
		    get { return _userId; } 
			set 
			{
			    _userId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RP_RESPONSABILITY_PERSONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RP_RESPONSABILITY_PERSONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RP_RESPONSABILITY_PERSONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RP_RESPONSABILITY_PERSONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class RpResponsabilityPersonRepository : Repository<RpResponsabilityPerson> 
	{
		public RpResponsabilityPersonRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RpResponsabilityPerson Get(string projectionName, System.Decimal rpResponsabilityPersonId)
		{
			return ((IRepository<RpResponsabilityPerson>)this).Get(projectionName, rpResponsabilityPersonId, FetchMode.UseIdentityMap);
		}

		public RpResponsabilityPerson Get(string projectionName, System.Decimal rpResponsabilityPersonId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpResponsabilityPerson>)this).Get(projectionName, rpResponsabilityPersonId, fetchMode);
		}

		public RpResponsabilityPerson Get(Projection projection, System.Decimal rpResponsabilityPersonId)
		{
			return ((IRepository<RpResponsabilityPerson>)this).Get(projection, rpResponsabilityPersonId, FetchMode.UseIdentityMap);
		}

		public RpResponsabilityPerson Get(Projection projection, System.Decimal rpResponsabilityPersonId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpResponsabilityPerson>)this).Get(projection, rpResponsabilityPersonId, fetchMode);
		}

		public RpResponsabilityPerson Get(string projectionName, System.Decimal rpResponsabilityPersonId, params string[] fields)
		{
			return ((IRepository<RpResponsabilityPerson>)this).Get(projectionName, rpResponsabilityPersonId, fields);
		}

		public RpResponsabilityPerson Get(Projection projection, System.Decimal rpResponsabilityPersonId, params string[] fields)
		{
			return ((IRepository<RpResponsabilityPerson>)this).Get(projection, rpResponsabilityPersonId, fields);
		}

		public bool Delete(System.Decimal rpResponsabilityPersonId)
		{
			var entity = new RpResponsabilityPerson { RpResponsabilityPersonId = rpResponsabilityPersonId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RpResponsabilityPersonFields
	{
		public const string RpResponsabilityPersonId = "RpResponsabilityPersonId";
		public const string RpResponsabilityId = "RpResponsabilityId";
		public const string UserId = "UserId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RP_RESPONSABILITY_GROUPS")]
	public partial class RpResponsabilityGroup
	{
		private Decimal _rpResponsabilityGroupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RP_RESPONSABILITY_GROUP_ID", ColumnName ="RP_RESPONSABILITY_GROUP_ID", BaseColumnName ="RP_RESPONSABILITY_GROUP_ID", BaseTableName = "RP_RESPONSABILITY_GROUPS" )]		public Decimal RpResponsabilityGroupId 
		{ 
		    get { return _rpResponsabilityGroupId; } 
			set 
			{
			    _rpResponsabilityGroupId = value;
			}
        }

		private Decimal _rpResponsabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="RP_RESPONSABILITY_ID", BaseColumnName ="RP_RESPONSABILITY_ID", BaseTableName = "RP_RESPONSABILITY_GROUPS" )]		public Decimal RpResponsabilityId 
		{ 
		    get { return _rpResponsabilityId; } 
			set 
			{
			    _rpResponsabilityId = value;
			}
        }

		private Decimal _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="GROUP_ID", BaseColumnName ="GROUP_ID", BaseTableName = "RP_RESPONSABILITY_GROUPS" )]		public Decimal GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RP_RESPONSABILITY_GROUPS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RP_RESPONSABILITY_GROUPS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RP_RESPONSABILITY_GROUPS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RP_RESPONSABILITY_GROUPS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class RpResponsabilityGroupRepository : Repository<RpResponsabilityGroup> 
	{
		public RpResponsabilityGroupRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RpResponsabilityGroup Get(string projectionName, System.Decimal rpResponsabilityGroupId)
		{
			return ((IRepository<RpResponsabilityGroup>)this).Get(projectionName, rpResponsabilityGroupId, FetchMode.UseIdentityMap);
		}

		public RpResponsabilityGroup Get(string projectionName, System.Decimal rpResponsabilityGroupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpResponsabilityGroup>)this).Get(projectionName, rpResponsabilityGroupId, fetchMode);
		}

		public RpResponsabilityGroup Get(Projection projection, System.Decimal rpResponsabilityGroupId)
		{
			return ((IRepository<RpResponsabilityGroup>)this).Get(projection, rpResponsabilityGroupId, FetchMode.UseIdentityMap);
		}

		public RpResponsabilityGroup Get(Projection projection, System.Decimal rpResponsabilityGroupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpResponsabilityGroup>)this).Get(projection, rpResponsabilityGroupId, fetchMode);
		}

		public RpResponsabilityGroup Get(string projectionName, System.Decimal rpResponsabilityGroupId, params string[] fields)
		{
			return ((IRepository<RpResponsabilityGroup>)this).Get(projectionName, rpResponsabilityGroupId, fields);
		}

		public RpResponsabilityGroup Get(Projection projection, System.Decimal rpResponsabilityGroupId, params string[] fields)
		{
			return ((IRepository<RpResponsabilityGroup>)this).Get(projection, rpResponsabilityGroupId, fields);
		}

		public bool Delete(System.Decimal rpResponsabilityGroupId)
		{
			var entity = new RpResponsabilityGroup { RpResponsabilityGroupId = rpResponsabilityGroupId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RpResponsabilityGroupFields
	{
		public const string RpResponsabilityGroupId = "RpResponsabilityGroupId";
		public const string RpResponsabilityId = "RpResponsabilityId";
		public const string GroupId = "GroupId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RP_DEFICIENCIES")]
	public partial class RpDeficiency
	{
		private Decimal _rpDeficiencyId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RP_DEFICIENCY_ID", ColumnName ="RP_DEFICIENCY_ID", BaseColumnName ="RP_DEFICIENCY_ID", BaseTableName = "RP_DEFICIENCIES" )]		public Decimal RpDeficiencyId 
		{ 
		    get { return _rpDeficiencyId; } 
			set 
			{
			    _rpDeficiencyId = value;
			}
        }

		private Decimal _registrationProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="REGISTRATION_PROCESS_ID", BaseColumnName ="REGISTRATION_PROCESS_ID", BaseTableName = "RP_DEFICIENCIES" )]		public Decimal RegistrationProcessId 
		{ 
		    get { return _registrationProcessId; } 
			set 
			{
			    _registrationProcessId = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "RP_DEFICIENCIES" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RP_DEFICIENCIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RP_DEFICIENCIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _responseDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RESPONSE_DATE", BaseColumnName ="RESPONSE_DATE", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ResponseDate 
		{ 
		    get { return _responseDate; } 
			set 
			{
			    _responseDate = value;
			}
        }

		private DateTime? _receivingExpectedDate70;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEIVING_EXPECTED_DATE70", BaseColumnName ="RECEIVING_EXPECTED_DATE70", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceivingExpectedDate70 
		{ 
		    get { return _receivingExpectedDate70; } 
			set 
			{
			    _receivingExpectedDate70 = value;
			}
        }

		private DateTime? _receivingExpectedDate100;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEIVING_EXPECTED_DATE100", BaseColumnName ="RECEIVING_EXPECTED_DATE100", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceivingExpectedDate100 
		{ 
		    get { return _receivingExpectedDate100; } 
			set 
			{
			    _receivingExpectedDate100 = value;
			}
        }

		private DateTime? _receivingExpectedDate105;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEIVING_EXPECTED_DATE105", BaseColumnName ="RECEIVING_EXPECTED_DATE105", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceivingExpectedDate105 
		{ 
		    get { return _receivingExpectedDate105; } 
			set 
			{
			    _receivingExpectedDate105 = value;
			}
        }

		private DateTime? _receptionDate70;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE70", BaseColumnName ="RECEPTION_DATE70", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceptionDate70 
		{ 
		    get { return _receptionDate70; } 
			set 
			{
			    _receptionDate70 = value;
			}
        }

		private DateTime? _receptionDate100;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE100", BaseColumnName ="RECEPTION_DATE100", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceptionDate100 
		{ 
		    get { return _receptionDate100; } 
			set 
			{
			    _receptionDate100 = value;
			}
        }

		private DateTime? _receptionDate105;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE105", BaseColumnName ="RECEPTION_DATE105", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceptionDate105 
		{ 
		    get { return _receptionDate105; } 
			set 
			{
			    _receptionDate105 = value;
			}
        }

		private DateTime? _receivingExpectedDate120;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEIVING_EXPECTED_DATE120", BaseColumnName ="RECEIVING_EXPECTED_DATE120", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceivingExpectedDate120 
		{ 
		    get { return _receivingExpectedDate120; } 
			set 
			{
			    _receivingExpectedDate120 = value;
			}
        }

		private DateTime? _receivingExpectedDate145;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEIVING_EXPECTED_DATE145", BaseColumnName ="RECEIVING_EXPECTED_DATE145", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceivingExpectedDate145 
		{ 
		    get { return _receivingExpectedDate145; } 
			set 
			{
			    _receivingExpectedDate145 = value;
			}
        }

		private DateTime? _receptionDate120;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE120", BaseColumnName ="RECEPTION_DATE120", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceptionDate120 
		{ 
		    get { return _receptionDate120; } 
			set 
			{
			    _receptionDate120 = value;
			}
        }

		private DateTime? _receptionDate145;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE145", BaseColumnName ="RECEPTION_DATE145", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceptionDate145 
		{ 
		    get { return _receptionDate145; } 
			set 
			{
			    _receptionDate145 = value;
			}
        }

		private DateTime? _receivingExpectedDate180;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEIVING_EXPECTED_DATE180", BaseColumnName ="RECEIVING_EXPECTED_DATE180", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceivingExpectedDate180 
		{ 
		    get { return _receivingExpectedDate180; } 
			set 
			{
			    _receivingExpectedDate180 = value;
			}
        }

		private DateTime? _receivingExpectedDate195;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEIVING_EXPECTED_DATE195", BaseColumnName ="RECEIVING_EXPECTED_DATE195", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceivingExpectedDate195 
		{ 
		    get { return _receivingExpectedDate195; } 
			set 
			{
			    _receivingExpectedDate195 = value;
			}
        }

		private DateTime? _receptionDate180;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE180", BaseColumnName ="RECEPTION_DATE180", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceptionDate180 
		{ 
		    get { return _receptionDate180; } 
			set 
			{
			    _receptionDate180 = value;
			}
        }

		private DateTime? _receptionDate195;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE195", BaseColumnName ="RECEPTION_DATE195", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceptionDate195 
		{ 
		    get { return _receptionDate195; } 
			set 
			{
			    _receptionDate195 = value;
			}
        }

		private DateTime? _receptionDate195more;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE195MORE", BaseColumnName ="RECEPTION_DATE195MORE", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceptionDate195more 
		{ 
		    get { return _receptionDate195more; } 
			set 
			{
			    _receptionDate195more = value;
			}
        }

		private DateTime? _receivingExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEIVING_EXPECTED_DATE", BaseColumnName ="RECEIVING_EXPECTED_DATE", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceivingExpectedDate 
		{ 
		    get { return _receivingExpectedDate; } 
			set 
			{
			    _receivingExpectedDate = value;
			}
        }

		private DateTime? _receptionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE", BaseColumnName ="RECEPTION_DATE", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ReceptionDate 
		{ 
		    get { return _receptionDate; } 
			set 
			{
			    _receptionDate = value;
			}
        }

		private DateTime? _responsesDeadlineDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RESPONSES_DEADLINE_DATE", BaseColumnName ="RESPONSES_DEADLINE_DATE", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ResponsesDeadlineDate 
		{ 
		    get { return _responsesDeadlineDate; } 
			set 
			{
			    _responsesDeadlineDate = value;
			}
        }

		private DateTime? _responsesExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RESPONSES_EXPECTED_DATE", BaseColumnName ="RESPONSES_EXPECTED_DATE", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ResponsesExpectedDate 
		{ 
		    get { return _responsesExpectedDate; } 
			set 
			{
			    _responsesExpectedDate = value;
			}
        }

		private DateTime? _responsesDeliveryDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RESPONSES_DELIVERY_DATE", BaseColumnName ="RESPONSES_DELIVERY_DATE", BaseTableName = "RP_DEFICIENCIES" )]		public DateTime? ResponsesDeliveryDate 
		{ 
		    get { return _responsesDeliveryDate; } 
			set 
			{
			    _responsesDeliveryDate = value;
			}
        }

		private String _isNaReceiving70;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEIVING70", BaseColumnName ="IS_NA_RECEIVING70", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReceiving70 
		{ 
		    get { return _isNaReceiving70; } 
			set 
			{
			    _isNaReceiving70 = value;
			}
        }

		private String _isNaReceiving100;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEIVING100", BaseColumnName ="IS_NA_RECEIVING100", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReceiving100 
		{ 
		    get { return _isNaReceiving100; } 
			set 
			{
			    _isNaReceiving100 = value;
			}
        }

		private String _isNaReceiving105;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEIVING105", BaseColumnName ="IS_NA_RECEIVING105", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReceiving105 
		{ 
		    get { return _isNaReceiving105; } 
			set 
			{
			    _isNaReceiving105 = value;
			}
        }

		private String _isNaReception70;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPTION70", BaseColumnName ="IS_NA_RECEPTION70", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReception70 
		{ 
		    get { return _isNaReception70; } 
			set 
			{
			    _isNaReception70 = value;
			}
        }

		private String _isNaRecepction100;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPCTION100", BaseColumnName ="IS_NA_RECEPCTION100", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaRecepction100 
		{ 
		    get { return _isNaRecepction100; } 
			set 
			{
			    _isNaRecepction100 = value;
			}
        }

		private String _isNaReception105;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPTION105", BaseColumnName ="IS_NA_RECEPTION105", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReception105 
		{ 
		    get { return _isNaReception105; } 
			set 
			{
			    _isNaReception105 = value;
			}
        }

		private String _isNaReceiving120;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEIVING120", BaseColumnName ="IS_NA_RECEIVING120", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReceiving120 
		{ 
		    get { return _isNaReceiving120; } 
			set 
			{
			    _isNaReceiving120 = value;
			}
        }

		private String _isNaReceiving145;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEIVING145", BaseColumnName ="IS_NA_RECEIVING145", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReceiving145 
		{ 
		    get { return _isNaReceiving145; } 
			set 
			{
			    _isNaReceiving145 = value;
			}
        }

		private String _isNaReception120;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPTION120", BaseColumnName ="IS_NA_RECEPTION120", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReception120 
		{ 
		    get { return _isNaReception120; } 
			set 
			{
			    _isNaReception120 = value;
			}
        }

		private String _isNaReception145;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPTION145", BaseColumnName ="IS_NA_RECEPTION145", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReception145 
		{ 
		    get { return _isNaReception145; } 
			set 
			{
			    _isNaReception145 = value;
			}
        }

		private String _isNaReceiving180;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEIVING180", BaseColumnName ="IS_NA_RECEIVING180", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReceiving180 
		{ 
		    get { return _isNaReceiving180; } 
			set 
			{
			    _isNaReceiving180 = value;
			}
        }

		private String _isNaReceiving195;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEIVING195", BaseColumnName ="IS_NA_RECEIVING195", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReceiving195 
		{ 
		    get { return _isNaReceiving195; } 
			set 
			{
			    _isNaReceiving195 = value;
			}
        }

		private String _isNaReception180;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPTION180", BaseColumnName ="IS_NA_RECEPTION180", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReception180 
		{ 
		    get { return _isNaReception180; } 
			set 
			{
			    _isNaReception180 = value;
			}
        }

		private String _isNaReception195;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPTION195", BaseColumnName ="IS_NA_RECEPTION195", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReception195 
		{ 
		    get { return _isNaReception195; } 
			set 
			{
			    _isNaReception195 = value;
			}
        }

		private String _isNaReception195more;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPTION195MORE", BaseColumnName ="IS_NA_RECEPTION195MORE", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReception195more 
		{ 
		    get { return _isNaReception195more; } 
			set 
			{
			    _isNaReception195more = value;
			}
        }

		private String _isNaReceivingExpected;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEIVING_EXPECTED", BaseColumnName ="IS_NA_RECEIVING_EXPECTED", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReceivingExpected 
		{ 
		    get { return _isNaReceivingExpected; } 
			set 
			{
			    _isNaReceivingExpected = value;
			}
        }

		private String _isNaReception;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPTION", BaseColumnName ="IS_NA_RECEPTION", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaReception 
		{ 
		    get { return _isNaReception; } 
			set 
			{
			    _isNaReception = value;
			}
        }

		private String _isNaResponsesDeadline;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RESPONSES_DEADLINE", BaseColumnName ="IS_NA_RESPONSES_DEADLINE", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaResponsesDeadline 
		{ 
		    get { return _isNaResponsesDeadline; } 
			set 
			{
			    _isNaResponsesDeadline = value;
			}
        }

		private String _isNaResponsesExpected;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RESPONSES_EXPECTED", BaseColumnName ="IS_NA_RESPONSES_EXPECTED", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaResponsesExpected 
		{ 
		    get { return _isNaResponsesExpected; } 
			set 
			{
			    _isNaResponsesExpected = value;
			}
        }

		private String _isNaResponsesDelivery;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RESPONSES_DELIVERY", BaseColumnName ="IS_NA_RESPONSES_DELIVERY", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaResponsesDelivery 
		{ 
		    get { return _isNaResponsesDelivery; } 
			set 
			{
			    _isNaResponsesDelivery = value;
			}
        }

		private String _isNaResponsesDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RESPONSES_DATE", BaseColumnName ="IS_NA_RESPONSES_DATE", BaseTableName = "RP_DEFICIENCIES" )]		public String IsNaResponsesDate 
		{ 
		    get { return _isNaResponsesDate; } 
			set 
			{
			    _isNaResponsesDate = value;
			}
        }


	}

	public partial class RpDeficiencyRepository : Repository<RpDeficiency> 
	{
		public RpDeficiencyRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RpDeficiency Get(string projectionName, System.Decimal rpDeficiencyId)
		{
			return ((IRepository<RpDeficiency>)this).Get(projectionName, rpDeficiencyId, FetchMode.UseIdentityMap);
		}

		public RpDeficiency Get(string projectionName, System.Decimal rpDeficiencyId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpDeficiency>)this).Get(projectionName, rpDeficiencyId, fetchMode);
		}

		public RpDeficiency Get(Projection projection, System.Decimal rpDeficiencyId)
		{
			return ((IRepository<RpDeficiency>)this).Get(projection, rpDeficiencyId, FetchMode.UseIdentityMap);
		}

		public RpDeficiency Get(Projection projection, System.Decimal rpDeficiencyId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpDeficiency>)this).Get(projection, rpDeficiencyId, fetchMode);
		}

		public RpDeficiency Get(string projectionName, System.Decimal rpDeficiencyId, params string[] fields)
		{
			return ((IRepository<RpDeficiency>)this).Get(projectionName, rpDeficiencyId, fields);
		}

		public RpDeficiency Get(Projection projection, System.Decimal rpDeficiencyId, params string[] fields)
		{
			return ((IRepository<RpDeficiency>)this).Get(projection, rpDeficiencyId, fields);
		}

		public bool Delete(System.Decimal rpDeficiencyId)
		{
			var entity = new RpDeficiency { RpDeficiencyId = rpDeficiencyId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RpDeficiencyFields
	{
		public const string RpDeficiencyId = "RpDeficiencyId";
		public const string RegistrationProcessId = "RegistrationProcessId";
		public const string Comments = "Comments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ResponseDate = "ResponseDate";
		public const string ReceivingExpectedDate70 = "ReceivingExpectedDate70";
		public const string ReceivingExpectedDate100 = "ReceivingExpectedDate100";
		public const string ReceivingExpectedDate105 = "ReceivingExpectedDate105";
		public const string ReceptionDate70 = "ReceptionDate70";
		public const string ReceptionDate100 = "ReceptionDate100";
		public const string ReceptionDate105 = "ReceptionDate105";
		public const string ReceivingExpectedDate120 = "ReceivingExpectedDate120";
		public const string ReceivingExpectedDate145 = "ReceivingExpectedDate145";
		public const string ReceptionDate120 = "ReceptionDate120";
		public const string ReceptionDate145 = "ReceptionDate145";
		public const string ReceivingExpectedDate180 = "ReceivingExpectedDate180";
		public const string ReceivingExpectedDate195 = "ReceivingExpectedDate195";
		public const string ReceptionDate180 = "ReceptionDate180";
		public const string ReceptionDate195 = "ReceptionDate195";
		public const string ReceptionDate195more = "ReceptionDate195more";
		public const string ReceivingExpectedDate = "ReceivingExpectedDate";
		public const string ReceptionDate = "ReceptionDate";
		public const string ResponsesDeadlineDate = "ResponsesDeadlineDate";
		public const string ResponsesExpectedDate = "ResponsesExpectedDate";
		public const string ResponsesDeliveryDate = "ResponsesDeliveryDate";
		public const string IsNaReceiving70 = "IsNaReceiving70";
		public const string IsNaReceiving100 = "IsNaReceiving100";
		public const string IsNaReceiving105 = "IsNaReceiving105";
		public const string IsNaReception70 = "IsNaReception70";
		public const string IsNaRecepction100 = "IsNaRecepction100";
		public const string IsNaReception105 = "IsNaReception105";
		public const string IsNaReceiving120 = "IsNaReceiving120";
		public const string IsNaReceiving145 = "IsNaReceiving145";
		public const string IsNaReception120 = "IsNaReception120";
		public const string IsNaReception145 = "IsNaReception145";
		public const string IsNaReceiving180 = "IsNaReceiving180";
		public const string IsNaReceiving195 = "IsNaReceiving195";
		public const string IsNaReception180 = "IsNaReception180";
		public const string IsNaReception195 = "IsNaReception195";
		public const string IsNaReception195more = "IsNaReception195more";
		public const string IsNaReceivingExpected = "IsNaReceivingExpected";
		public const string IsNaReception = "IsNaReception";
		public const string IsNaResponsesDeadline = "IsNaResponsesDeadline";
		public const string IsNaResponsesExpected = "IsNaResponsesExpected";
		public const string IsNaResponsesDelivery = "IsNaResponsesDelivery";
		public const string IsNaResponsesDate = "IsNaResponsesDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DEFICIENCY_TYPES")]
	public partial class DeficiencyType
	{
		private Decimal _deficiencyTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DEFICIENCY_TYPE_ID", ColumnName ="DEFICIENCY_TYPE_ID", BaseColumnName ="DEFICIENCY_TYPE_ID", BaseTableName = "DEFICIENCY_TYPES" )]		public Decimal DeficiencyTypeId 
		{ 
		    get { return _deficiencyTypeId; } 
			set 
			{
			    _deficiencyTypeId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "DEFICIENCY_TYPES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "DEFICIENCY_TYPES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DEFICIENCY_TYPES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DEFICIENCY_TYPES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DEFICIENCY_TYPES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DEFICIENCY_TYPES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class DeficiencyTypeRepository : Repository<DeficiencyType> 
	{
		public DeficiencyTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DeficiencyType Get(string projectionName, System.Decimal deficiencyTypeId)
		{
			return ((IRepository<DeficiencyType>)this).Get(projectionName, deficiencyTypeId, FetchMode.UseIdentityMap);
		}

		public DeficiencyType Get(string projectionName, System.Decimal deficiencyTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DeficiencyType>)this).Get(projectionName, deficiencyTypeId, fetchMode);
		}

		public DeficiencyType Get(Projection projection, System.Decimal deficiencyTypeId)
		{
			return ((IRepository<DeficiencyType>)this).Get(projection, deficiencyTypeId, FetchMode.UseIdentityMap);
		}

		public DeficiencyType Get(Projection projection, System.Decimal deficiencyTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DeficiencyType>)this).Get(projection, deficiencyTypeId, fetchMode);
		}

		public DeficiencyType Get(string projectionName, System.Decimal deficiencyTypeId, params string[] fields)
		{
			return ((IRepository<DeficiencyType>)this).Get(projectionName, deficiencyTypeId, fields);
		}

		public DeficiencyType Get(Projection projection, System.Decimal deficiencyTypeId, params string[] fields)
		{
			return ((IRepository<DeficiencyType>)this).Get(projection, deficiencyTypeId, fields);
		}

		public bool Delete(System.Decimal deficiencyTypeId)
		{
			var entity = new DeficiencyType { DeficiencyTypeId = deficiencyTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DeficiencyTypeFields
	{
		public const string DeficiencyTypeId = "DeficiencyTypeId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RP_DEFICIENCY_DATES")]
	public partial class RpDeficiencyDate
	{
		private Decimal _rpDeficiencyDateId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RP_DEFICIENCY_DATE_ID", ColumnName ="RP_DEFICIENCY_DATE_ID", BaseColumnName ="RP_DEFICIENCY_DATE_ID", BaseTableName = "RP_DEFICIENCY_DATES" )]		public Decimal RpDeficiencyDateId 
		{ 
		    get { return _rpDeficiencyDateId; } 
			set 
			{
			    _rpDeficiencyDateId = value;
			}
        }

		private Decimal _rpDeficiencyId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="RP_DEFICIENCY_ID", BaseColumnName ="RP_DEFICIENCY_ID", BaseTableName = "RP_DEFICIENCY_DATES" )]		public Decimal RpDeficiencyId 
		{ 
		    get { return _rpDeficiencyId; } 
			set 
			{
			    _rpDeficiencyId = value;
			}
        }

		private DateTime? _receivingExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEIVING_EXPECTED_DATE", BaseColumnName ="RECEIVING_EXPECTED_DATE", BaseTableName = "RP_DEFICIENCY_DATES" )]		public DateTime? ReceivingExpectedDate 
		{ 
		    get { return _receivingExpectedDate; } 
			set 
			{
			    _receivingExpectedDate = value;
			}
        }

		private DateTime? _receptionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE", BaseColumnName ="RECEPTION_DATE", BaseTableName = "RP_DEFICIENCY_DATES" )]		public DateTime? ReceptionDate 
		{ 
		    get { return _receptionDate; } 
			set 
			{
			    _receptionDate = value;
			}
        }

		private DateTime? _responsesDeadlineDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RESPONSES_DEADLINE_DATE", BaseColumnName ="RESPONSES_DEADLINE_DATE", BaseTableName = "RP_DEFICIENCY_DATES" )]		public DateTime? ResponsesDeadlineDate 
		{ 
		    get { return _responsesDeadlineDate; } 
			set 
			{
			    _responsesDeadlineDate = value;
			}
        }

		private DateTime? _responsesExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RESPONSES_EXPECTED_DATE", BaseColumnName ="RESPONSES_EXPECTED_DATE", BaseTableName = "RP_DEFICIENCY_DATES" )]		public DateTime? ResponsesExpectedDate 
		{ 
		    get { return _responsesExpectedDate; } 
			set 
			{
			    _responsesExpectedDate = value;
			}
        }

		private DateTime? _responsesDeliveryDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RESPONSES_DELIVERY_DATE", BaseColumnName ="RESPONSES_DELIVERY_DATE", BaseTableName = "RP_DEFICIENCY_DATES" )]		public DateTime? ResponsesDeliveryDate 
		{ 
		    get { return _responsesDeliveryDate; } 
			set 
			{
			    _responsesDeliveryDate = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RP_DEFICIENCY_DATES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RP_DEFICIENCY_DATES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RP_DEFICIENCY_DATES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RP_DEFICIENCY_DATES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class RpDeficiencyDateRepository : Repository<RpDeficiencyDate> 
	{
		public RpDeficiencyDateRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RpDeficiencyDate Get(string projectionName, System.Decimal rpDeficiencyDateId)
		{
			return ((IRepository<RpDeficiencyDate>)this).Get(projectionName, rpDeficiencyDateId, FetchMode.UseIdentityMap);
		}

		public RpDeficiencyDate Get(string projectionName, System.Decimal rpDeficiencyDateId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpDeficiencyDate>)this).Get(projectionName, rpDeficiencyDateId, fetchMode);
		}

		public RpDeficiencyDate Get(Projection projection, System.Decimal rpDeficiencyDateId)
		{
			return ((IRepository<RpDeficiencyDate>)this).Get(projection, rpDeficiencyDateId, FetchMode.UseIdentityMap);
		}

		public RpDeficiencyDate Get(Projection projection, System.Decimal rpDeficiencyDateId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpDeficiencyDate>)this).Get(projection, rpDeficiencyDateId, fetchMode);
		}

		public RpDeficiencyDate Get(string projectionName, System.Decimal rpDeficiencyDateId, params string[] fields)
		{
			return ((IRepository<RpDeficiencyDate>)this).Get(projectionName, rpDeficiencyDateId, fields);
		}

		public RpDeficiencyDate Get(Projection projection, System.Decimal rpDeficiencyDateId, params string[] fields)
		{
			return ((IRepository<RpDeficiencyDate>)this).Get(projection, rpDeficiencyDateId, fields);
		}

		public bool Delete(System.Decimal rpDeficiencyDateId)
		{
			var entity = new RpDeficiencyDate { RpDeficiencyDateId = rpDeficiencyDateId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RpDeficiencyDateFields
	{
		public const string RpDeficiencyDateId = "RpDeficiencyDateId";
		public const string RpDeficiencyId = "RpDeficiencyId";
		public const string ReceivingExpectedDate = "ReceivingExpectedDate";
		public const string ReceptionDate = "ReceptionDate";
		public const string ResponsesDeadlineDate = "ResponsesDeadlineDate";
		public const string ResponsesExpectedDate = "ResponsesExpectedDate";
		public const string ResponsesDeliveryDate = "ResponsesDeliveryDate";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MATERIALS")]
	public partial class Material
	{
		private Decimal _materialId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MATERIAL_ID", ColumnName ="MATERIAL_ID", BaseColumnName ="MATERIAL_ID", BaseTableName = "MATERIALS" )]		public Decimal MaterialId 
		{ 
		    get { return _materialId; } 
			set 
			{
			    _materialId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MATERIALS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MATERIALS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MATERIALS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MATERIALS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MATERIALS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class MaterialRepository : Repository<Material> 
	{
		public MaterialRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Material Get(string projectionName, System.Decimal materialId)
		{
			return ((IRepository<Material>)this).Get(projectionName, materialId, FetchMode.UseIdentityMap);
		}

		public Material Get(string projectionName, System.Decimal materialId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Material>)this).Get(projectionName, materialId, fetchMode);
		}

		public Material Get(Projection projection, System.Decimal materialId)
		{
			return ((IRepository<Material>)this).Get(projection, materialId, FetchMode.UseIdentityMap);
		}

		public Material Get(Projection projection, System.Decimal materialId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Material>)this).Get(projection, materialId, fetchMode);
		}

		public Material Get(string projectionName, System.Decimal materialId, params string[] fields)
		{
			return ((IRepository<Material>)this).Get(projectionName, materialId, fields);
		}

		public Material Get(Projection projection, System.Decimal materialId, params string[] fields)
		{
			return ((IRepository<Material>)this).Get(projection, materialId, fields);
		}

		public bool Delete(System.Decimal materialId)
		{
			var entity = new Material { MaterialId = materialId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MaterialFields
	{
		public const string MaterialId = "MaterialId";
		public const string Name = "Name";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_MP_CLO_SYSTEMS")]
	public partial class DossierMpCloSystem
	{
		private Decimal _dossierMpCloSystemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_MP_CLO_SYSTEM_ID", ColumnName ="DOSSIER_MP_CLO_SYSTEM_ID", BaseColumnName ="DOSSIER_MP_CLO_SYSTEM_ID", BaseTableName = "DOSSIER_MP_CLO_SYSTEMS" )]		public Decimal DossierMpCloSystemId 
		{ 
		    get { return _dossierMpCloSystemId; } 
			set 
			{
			    _dossierMpCloSystemId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "DOSSIER_MP_CLO_SYSTEMS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_MP_CLO_SYSTEMS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_MP_CLO_SYSTEMS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_MP_CLO_SYSTEMS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_MP_CLO_SYSTEMS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_DOSSIER_ID", BaseColumnName ="MP_DOSSIER_ID", BaseTableName = "DOSSIER_MP_CLO_SYSTEMS" )]		public Decimal MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }

		private String _cratorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CRATOR_NAME" )]		public String CratorName 
		{ 
		    get { return _cratorName; } 
			set 
			{
			    _cratorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }


	}

	public partial class DossierMpCloSystemRepository : Repository<DossierMpCloSystem> 
	{
		public DossierMpCloSystemRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierMpCloSystem Get(string projectionName, System.Decimal dossierMpCloSystemId)
		{
			return ((IRepository<DossierMpCloSystem>)this).Get(projectionName, dossierMpCloSystemId, FetchMode.UseIdentityMap);
		}

		public DossierMpCloSystem Get(string projectionName, System.Decimal dossierMpCloSystemId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpCloSystem>)this).Get(projectionName, dossierMpCloSystemId, fetchMode);
		}

		public DossierMpCloSystem Get(Projection projection, System.Decimal dossierMpCloSystemId)
		{
			return ((IRepository<DossierMpCloSystem>)this).Get(projection, dossierMpCloSystemId, FetchMode.UseIdentityMap);
		}

		public DossierMpCloSystem Get(Projection projection, System.Decimal dossierMpCloSystemId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpCloSystem>)this).Get(projection, dossierMpCloSystemId, fetchMode);
		}

		public DossierMpCloSystem Get(string projectionName, System.Decimal dossierMpCloSystemId, params string[] fields)
		{
			return ((IRepository<DossierMpCloSystem>)this).Get(projectionName, dossierMpCloSystemId, fields);
		}

		public DossierMpCloSystem Get(Projection projection, System.Decimal dossierMpCloSystemId, params string[] fields)
		{
			return ((IRepository<DossierMpCloSystem>)this).Get(projection, dossierMpCloSystemId, fields);
		}

		public bool Delete(System.Decimal dossierMpCloSystemId)
		{
			var entity = new DossierMpCloSystem { DossierMpCloSystemId = dossierMpCloSystemId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierMpCloSystemFields
	{
		public const string DossierMpCloSystemId = "DossierMpCloSystemId";
		public const string Name = "Name";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string MpDossierId = "MpDossierId";
		public const string CratorName = "CratorName";
		public const string ModificatorName = "ModificatorName";
		public const string DossierId = "DossierId";
		public const string MedicinalProductId = "MedicinalProductId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_MP_CLOSYS_MATERIALS")]
	public partial class DossierMpCloSysMaterial
	{
		private Decimal _dossierMpClosysMaterialId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_MP_CLOSYS_MATERIAL_ID", ColumnName ="DOSSIER_MP_CLOSYS_MATERIAL_ID", BaseColumnName ="DOSSIER_MP_CLOSYS_MATERIAL_ID", BaseTableName = "DOSSIER_MP_CLOSYS_MATERIALS" )]		public Decimal DossierMpClosysMaterialId 
		{ 
		    get { return _dossierMpClosysMaterialId; } 
			set 
			{
			    _dossierMpClosysMaterialId = value;
			}
        }

		private Decimal _dossierMpCloSystemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_MP_CLO_SYSTEM_ID", BaseColumnName ="DOSSIER_MP_CLO_SYSTEM_ID", BaseTableName = "DOSSIER_MP_CLOSYS_MATERIALS" )]		public Decimal DossierMpCloSystemId 
		{ 
		    get { return _dossierMpCloSystemId; } 
			set 
			{
			    _dossierMpCloSystemId = value;
			}
        }

		private Decimal _materialId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MATERIAL_ID", BaseColumnName ="MATERIAL_ID", BaseTableName = "DOSSIER_MP_CLOSYS_MATERIALS" )]		public Decimal MaterialId 
		{ 
		    get { return _materialId; } 
			set 
			{
			    _materialId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_MP_CLOSYS_MATERIALS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_MP_CLOSYS_MATERIALS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_MP_CLOSYS_MATERIALS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_MP_CLOSYS_MATERIALS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class DossierMpCloSysMaterialRepository : Repository<DossierMpCloSysMaterial> 
	{
		public DossierMpCloSysMaterialRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierMpCloSysMaterial Get(string projectionName, System.Decimal dossierMpClosysMaterialId)
		{
			return ((IRepository<DossierMpCloSysMaterial>)this).Get(projectionName, dossierMpClosysMaterialId, FetchMode.UseIdentityMap);
		}

		public DossierMpCloSysMaterial Get(string projectionName, System.Decimal dossierMpClosysMaterialId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpCloSysMaterial>)this).Get(projectionName, dossierMpClosysMaterialId, fetchMode);
		}

		public DossierMpCloSysMaterial Get(Projection projection, System.Decimal dossierMpClosysMaterialId)
		{
			return ((IRepository<DossierMpCloSysMaterial>)this).Get(projection, dossierMpClosysMaterialId, FetchMode.UseIdentityMap);
		}

		public DossierMpCloSysMaterial Get(Projection projection, System.Decimal dossierMpClosysMaterialId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpCloSysMaterial>)this).Get(projection, dossierMpClosysMaterialId, fetchMode);
		}

		public DossierMpCloSysMaterial Get(string projectionName, System.Decimal dossierMpClosysMaterialId, params string[] fields)
		{
			return ((IRepository<DossierMpCloSysMaterial>)this).Get(projectionName, dossierMpClosysMaterialId, fields);
		}

		public DossierMpCloSysMaterial Get(Projection projection, System.Decimal dossierMpClosysMaterialId, params string[] fields)
		{
			return ((IRepository<DossierMpCloSysMaterial>)this).Get(projection, dossierMpClosysMaterialId, fields);
		}

		public bool Delete(System.Decimal dossierMpClosysMaterialId)
		{
			var entity = new DossierMpCloSysMaterial { DossierMpClosysMaterialId = dossierMpClosysMaterialId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierMpCloSysMaterialFields
	{
		public const string DossierMpClosysMaterialId = "DossierMpClosysMaterialId";
		public const string DossierMpCloSystemId = "DossierMpCloSystemId";
		public const string MaterialId = "MaterialId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_MPS")]
	public partial class DossierCountryMp
	{
		private Decimal _dossierCountryMpId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_MP_ID", ColumnName ="DOSSIER_COUNTRY_MP_ID", BaseColumnName ="DOSSIER_COUNTRY_MP_ID", BaseTableName = "DOSSIER_COUNTRY_MPS" )]		public Decimal DossierCountryMpId 
		{ 
		    get { return _dossierCountryMpId; } 
			set 
			{
			    _dossierCountryMpId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_MPS" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private Decimal _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_DOSSIER_ID", BaseColumnName ="MP_DOSSIER_ID", BaseTableName = "DOSSIER_COUNTRY_MPS" )]		public Decimal MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_MPS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_MPS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_MPS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_MPS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _medicinalProductName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="MEDICINAL_PRODUCT_NAME" )]		public String MedicinalProductName 
		{ 
		    get { return _medicinalProductName; } 
			set 
			{
			    _medicinalProductName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }


	}

	public partial class DossierCountryMpRepository : Repository<DossierCountryMp> 
	{
		public DossierCountryMpRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryMp Get(string projectionName, System.Decimal dossierCountryMpId)
		{
			return ((IRepository<DossierCountryMp>)this).Get(projectionName, dossierCountryMpId, FetchMode.UseIdentityMap);
		}

		public DossierCountryMp Get(string projectionName, System.Decimal dossierCountryMpId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryMp>)this).Get(projectionName, dossierCountryMpId, fetchMode);
		}

		public DossierCountryMp Get(Projection projection, System.Decimal dossierCountryMpId)
		{
			return ((IRepository<DossierCountryMp>)this).Get(projection, dossierCountryMpId, FetchMode.UseIdentityMap);
		}

		public DossierCountryMp Get(Projection projection, System.Decimal dossierCountryMpId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryMp>)this).Get(projection, dossierCountryMpId, fetchMode);
		}

		public DossierCountryMp Get(string projectionName, System.Decimal dossierCountryMpId, params string[] fields)
		{
			return ((IRepository<DossierCountryMp>)this).Get(projectionName, dossierCountryMpId, fields);
		}

		public DossierCountryMp Get(Projection projection, System.Decimal dossierCountryMpId, params string[] fields)
		{
			return ((IRepository<DossierCountryMp>)this).Get(projection, dossierCountryMpId, fields);
		}

		public bool Delete(System.Decimal dossierCountryMpId)
		{
			var entity = new DossierCountryMp { DossierCountryMpId = dossierCountryMpId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryMpFields
	{
		public const string DossierCountryMpId = "DossierCountryMpId";
		public const string DossierCountryId = "DossierCountryId";
		public const string MpDossierId = "MpDossierId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string MedicinalProductName = "MedicinalProductName";
		public const string DossierId = "DossierId";
		public const string MedicinalProductId = "MedicinalProductId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_PSIZES")]
	public partial class DossierCountryPsize
	{
		private Decimal _dossierCountryPsizeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_PSIZE_ID", ColumnName ="DOSSIER_COUNTRY_PSIZE_ID", BaseColumnName ="DOSSIER_COUNTRY_PSIZE_ID", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public Decimal DossierCountryPsizeId 
		{ 
		    get { return _dossierCountryPsizeId; } 
			set 
			{
			    _dossierCountryPsizeId = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _atReleaseShelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="AT_RELEASE_SHELF_LIFE", BaseColumnName ="AT_RELEASE_SHELF_LIFE", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public Decimal? AtReleaseShelfLife 
		{ 
		    get { return _atReleaseShelfLife; } 
			set 
			{
			    _atReleaseShelfLife = value;
			}
        }

		private String _atReleaseMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="AT_RELEASE_MEASUREMENT", BaseColumnName ="AT_RELEASE_MEASUREMENT", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String AtReleaseMeasurement 
		{ 
		    get { return _atReleaseMeasurement; } 
			set 
			{
			    _atReleaseMeasurement = value;
			}
        }

		private String _atReleaseStorageConditions;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="AT_RELEASE_STORAGE_CONDITIONS", BaseColumnName ="AT_RELEASE_STORAGE_CONDITIONS", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String AtReleaseStorageConditions 
		{ 
		    get { return _atReleaseStorageConditions; } 
			set 
			{
			    _atReleaseStorageConditions = value;
			}
        }

		private Decimal? _openingShelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OPENING_SHELF_LIFE", BaseColumnName ="OPENING_SHELF_LIFE", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public Decimal? OpeningShelfLife 
		{ 
		    get { return _openingShelfLife; } 
			set 
			{
			    _openingShelfLife = value;
			}
        }

		private String _openingMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="OPENING_MEASUREMENT", BaseColumnName ="OPENING_MEASUREMENT", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String OpeningMeasurement 
		{ 
		    get { return _openingMeasurement; } 
			set 
			{
			    _openingMeasurement = value;
			}
        }

		private String _openingStorageConditions;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="OPENING_STORAGE_CONDITIONS", BaseColumnName ="OPENING_STORAGE_CONDITIONS", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String OpeningStorageConditions 
		{ 
		    get { return _openingStorageConditions; } 
			set 
			{
			    _openingStorageConditions = value;
			}
        }

		private Decimal? _reconsShelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RECONS_SHELF_LIFE", BaseColumnName ="RECONS_SHELF_LIFE", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public Decimal? ReconsShelfLife 
		{ 
		    get { return _reconsShelfLife; } 
			set 
			{
			    _reconsShelfLife = value;
			}
        }

		private String _reconsMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="RECONS_MEASUREMENT", BaseColumnName ="RECONS_MEASUREMENT", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String ReconsMeasurement 
		{ 
		    get { return _reconsMeasurement; } 
			set 
			{
			    _reconsMeasurement = value;
			}
        }

		private String _reconsStorageConditions;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="RECONS_STORAGE_CONDITIONS", BaseColumnName ="RECONS_STORAGE_CONDITIONS", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String ReconsStorageConditions 
		{ 
		    get { return _reconsStorageConditions; } 
			set 
			{
			    _reconsStorageConditions = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _dossierMpCloSystemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_MP_CLO_SYSTEM_ID", BaseColumnName ="DOSSIER_MP_CLO_SYSTEM_ID", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public Decimal DossierMpCloSystemId 
		{ 
		    get { return _dossierMpCloSystemId; } 
			set 
			{
			    _dossierMpCloSystemId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _atReleaseStorageNames;
		[DataMember]
		[SqlField(DbType.String, 1024, ColumnName ="AT_RELEASE_STORAGE_NAMES", BaseColumnName ="AT_RELEASE_STORAGE_NAMES", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String AtReleaseStorageNames 
		{ 
		    get { return _atReleaseStorageNames; } 
			set 
			{
			    _atReleaseStorageNames = value;
			}
        }

		private String _hasAtRelease;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_AT_RELEASE", BaseColumnName ="HAS_AT_RELEASE", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String HasAtRelease 
		{ 
		    get { return _hasAtRelease; } 
			set 
			{
			    _hasAtRelease = value;
			}
        }

		private String _hasOpening;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_OPENING", BaseColumnName ="HAS_OPENING", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String HasOpening 
		{ 
		    get { return _hasOpening; } 
			set 
			{
			    _hasOpening = value;
			}
        }

		private String _hasRecons;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_RECONS", BaseColumnName ="HAS_RECONS", BaseTableName = "DOSSIER_COUNTRY_PSIZES" )]		public String HasRecons 
		{ 
		    get { return _hasRecons; } 
			set 
			{
			    _hasRecons = value;
			}
        }


	}

	public partial class DossierCountryPsizeRepository : Repository<DossierCountryPsize> 
	{
		public DossierCountryPsizeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryPsize Get(string projectionName, System.Decimal dossierCountryPsizeId)
		{
			return ((IRepository<DossierCountryPsize>)this).Get(projectionName, dossierCountryPsizeId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPsize Get(string projectionName, System.Decimal dossierCountryPsizeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPsize>)this).Get(projectionName, dossierCountryPsizeId, fetchMode);
		}

		public DossierCountryPsize Get(Projection projection, System.Decimal dossierCountryPsizeId)
		{
			return ((IRepository<DossierCountryPsize>)this).Get(projection, dossierCountryPsizeId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPsize Get(Projection projection, System.Decimal dossierCountryPsizeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPsize>)this).Get(projection, dossierCountryPsizeId, fetchMode);
		}

		public DossierCountryPsize Get(string projectionName, System.Decimal dossierCountryPsizeId, params string[] fields)
		{
			return ((IRepository<DossierCountryPsize>)this).Get(projectionName, dossierCountryPsizeId, fields);
		}

		public DossierCountryPsize Get(Projection projection, System.Decimal dossierCountryPsizeId, params string[] fields)
		{
			return ((IRepository<DossierCountryPsize>)this).Get(projection, dossierCountryPsizeId, fields);
		}

		public bool Delete(System.Decimal dossierCountryPsizeId)
		{
			var entity = new DossierCountryPsize { DossierCountryPsizeId = dossierCountryPsizeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryPsizeFields
	{
		public const string DossierCountryPsizeId = "DossierCountryPsizeId";
		public const string Description = "Description";
		public const string AtReleaseShelfLife = "AtReleaseShelfLife";
		public const string AtReleaseMeasurement = "AtReleaseMeasurement";
		public const string AtReleaseStorageConditions = "AtReleaseStorageConditions";
		public const string OpeningShelfLife = "OpeningShelfLife";
		public const string OpeningMeasurement = "OpeningMeasurement";
		public const string OpeningStorageConditions = "OpeningStorageConditions";
		public const string ReconsShelfLife = "ReconsShelfLife";
		public const string ReconsMeasurement = "ReconsMeasurement";
		public const string ReconsStorageConditions = "ReconsStorageConditions";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierMpCloSystemId = "DossierMpCloSystemId";
		public const string DossierCountryId = "DossierCountryId";
		public const string AtReleaseStorageNames = "AtReleaseStorageNames";
		public const string HasAtRelease = "HasAtRelease";
		public const string HasOpening = "HasOpening";
		public const string HasRecons = "HasRecons";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="RP_DEFICIENCY_TYPES")]
	public partial class RpDeficiencyType
	{
		private Decimal _rpDeficiencyTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "RP_DEFICIENCY_TYPE_ID", ColumnName ="RP_DEFICIENCY_TYPE_ID", BaseColumnName ="RP_DEFICIENCY_TYPE_ID", BaseTableName = "RP_DEFICIENCY_TYPES" )]		public Decimal RpDeficiencyTypeId 
		{ 
		    get { return _rpDeficiencyTypeId; } 
			set 
			{
			    _rpDeficiencyTypeId = value;
			}
        }

		private Decimal _rpDeficiencyId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="RP_DEFICIENCY_ID", BaseColumnName ="RP_DEFICIENCY_ID", BaseTableName = "RP_DEFICIENCY_TYPES" )]		public Decimal RpDeficiencyId 
		{ 
		    get { return _rpDeficiencyId; } 
			set 
			{
			    _rpDeficiencyId = value;
			}
        }

		private Decimal _deficiencyTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DEFICIENCY_TYPE_ID", BaseColumnName ="DEFICIENCY_TYPE_ID", BaseTableName = "RP_DEFICIENCY_TYPES" )]		public Decimal DeficiencyTypeId 
		{ 
		    get { return _deficiencyTypeId; } 
			set 
			{
			    _deficiencyTypeId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "RP_DEFICIENCY_TYPES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "RP_DEFICIENCY_TYPES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "RP_DEFICIENCY_TYPES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "RP_DEFICIENCY_TYPES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class RpDeficiencyTypeRepository : Repository<RpDeficiencyType> 
	{
		public RpDeficiencyTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public RpDeficiencyType Get(string projectionName, System.Decimal rpDeficiencyTypeId)
		{
			return ((IRepository<RpDeficiencyType>)this).Get(projectionName, rpDeficiencyTypeId, FetchMode.UseIdentityMap);
		}

		public RpDeficiencyType Get(string projectionName, System.Decimal rpDeficiencyTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpDeficiencyType>)this).Get(projectionName, rpDeficiencyTypeId, fetchMode);
		}

		public RpDeficiencyType Get(Projection projection, System.Decimal rpDeficiencyTypeId)
		{
			return ((IRepository<RpDeficiencyType>)this).Get(projection, rpDeficiencyTypeId, FetchMode.UseIdentityMap);
		}

		public RpDeficiencyType Get(Projection projection, System.Decimal rpDeficiencyTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<RpDeficiencyType>)this).Get(projection, rpDeficiencyTypeId, fetchMode);
		}

		public RpDeficiencyType Get(string projectionName, System.Decimal rpDeficiencyTypeId, params string[] fields)
		{
			return ((IRepository<RpDeficiencyType>)this).Get(projectionName, rpDeficiencyTypeId, fields);
		}

		public RpDeficiencyType Get(Projection projection, System.Decimal rpDeficiencyTypeId, params string[] fields)
		{
			return ((IRepository<RpDeficiencyType>)this).Get(projection, rpDeficiencyTypeId, fields);
		}

		public bool Delete(System.Decimal rpDeficiencyTypeId)
		{
			var entity = new RpDeficiencyType { RpDeficiencyTypeId = rpDeficiencyTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class RpDeficiencyTypeFields
	{
		public const string RpDeficiencyTypeId = "RpDeficiencyTypeId";
		public const string RpDeficiencyId = "RpDeficiencyId";
		public const string DeficiencyTypeId = "DeficiencyTypeId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_RPS")]
	public partial class DossierCountryRp
	{
		private Decimal _dossierCountryRpId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_RP_ID", ColumnName ="DOSSIER_COUNTRY_RP_ID", BaseColumnName ="DOSSIER_COUNTRY_RP_ID", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public Decimal DossierCountryRpId 
		{ 
		    get { return _dossierCountryRpId; } 
			set 
			{
			    _dossierCountryRpId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private Decimal _registrationProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="REGISTRATION_PROCESS_ID", BaseColumnName ="REGISTRATION_PROCESS_ID", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public Decimal RegistrationProcessId 
		{ 
		    get { return _registrationProcessId; } 
			set 
			{
			    _registrationProcessId = value;
			}
        }

		private DateTime? _approvalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="APPROVAL_DATE", BaseColumnName ="APPROVAL_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public DateTime? ApprovalDate 
		{ 
		    get { return _approvalDate; } 
			set 
			{
			    _approvalDate = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private Decimal? _taxValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TAX_VALUE", BaseColumnName ="TAX_VALUE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public Decimal? TaxValue 
		{ 
		    get { return _taxValue; } 
			set 
			{
			    _taxValue = value;
			}
        }

		private String _isNormonPayer;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NORMON_PAYER", BaseColumnName ="IS_NORMON_PAYER", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNormonPayer 
		{ 
		    get { return _isNormonPayer; } 
			set 
			{
			    _isNormonPayer = value;
			}
        }

		private String _taxComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="TAX_COMMENTS", BaseColumnName ="TAX_COMMENTS", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String TaxComments 
		{ 
		    get { return _taxComments; } 
			set 
			{
			    _taxComments = value;
			}
        }

		private DateTime? _dismissalApplicationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DISMISSAL_APPLICATION_DATE", BaseColumnName ="DISMISSAL_APPLICATION_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public DateTime? DismissalApplicationDate 
		{ 
		    get { return _dismissalApplicationDate; } 
			set 
			{
			    _dismissalApplicationDate = value;
			}
        }

		private DateTime? _dismissalGrantDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DISMISSAL_GRANT_DATE", BaseColumnName ="DISMISSAL_GRANT_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public DateTime? DismissalGrantDate 
		{ 
		    get { return _dismissalGrantDate; } 
			set 
			{
			    _dismissalGrantDate = value;
			}
        }

		private Decimal? _currencyId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CURRENCY_ID", BaseColumnName ="CURRENCY_ID", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public Decimal? CurrencyId 
		{ 
		    get { return _currencyId; } 
			set 
			{
			    _currencyId = value;
			}
        }

		private String _isNaProvisionalNumbers;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_PROVISIONAL_NUMBERS", BaseColumnName ="IS_NA_PROVISIONAL_NUMBERS", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNaProvisionalNumbers 
		{ 
		    get { return _isNaProvisionalNumbers; } 
			set 
			{
			    _isNaProvisionalNumbers = value;
			}
        }

		private String _isNaNationalTranslations;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_NATIONAL_TRANSLATIONS", BaseColumnName ="IS_NA_NATIONAL_TRANSLATIONS", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNaNationalTranslations 
		{ 
		    get { return _isNaNationalTranslations; } 
			set 
			{
			    _isNaNationalTranslations = value;
			}
        }

		private String _decisionType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="DECISION_TYPE", BaseColumnName ="DECISION_TYPE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String DecisionType 
		{ 
		    get { return _decisionType; } 
			set 
			{
			    _decisionType = value;
			}
        }

		private DateTime? _refusalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REFUSAL_DATE", BaseColumnName ="REFUSAL_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public DateTime? RefusalDate 
		{ 
		    get { return _refusalDate; } 
			set 
			{
			    _refusalDate = value;
			}
        }

		private String _isNaDecision;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DECISION", BaseColumnName ="IS_NA_DECISION", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNaDecision 
		{ 
		    get { return _isNaDecision; } 
			set 
			{
			    _isNaDecision = value;
			}
        }

		private String _isNaNationalFee;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_NATIONAL_FEE", BaseColumnName ="IS_NA_NATIONAL_FEE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNaNationalFee 
		{ 
		    get { return _isNaNationalFee; } 
			set 
			{
			    _isNaNationalFee = value;
			}
        }

		private String _isUnknownAmount;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_UNKNOWN_AMOUNT", BaseColumnName ="IS_UNKNOWN_AMOUNT", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsUnknownAmount 
		{ 
		    get { return _isUnknownAmount; } 
			set 
			{
			    _isUnknownAmount = value;
			}
        }

		private String _isNaApprovalDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_APPROVAL_DATE", BaseColumnName ="IS_NA_APPROVAL_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNaApprovalDate 
		{ 
		    get { return _isNaApprovalDate; } 
			set 
			{
			    _isNaApprovalDate = value;
			}
        }

		private String _isNaRefusalDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REFUSAL_DATE", BaseColumnName ="IS_NA_REFUSAL_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNaRefusalDate 
		{ 
		    get { return _isNaRefusalDate; } 
			set 
			{
			    _isNaRefusalDate = value;
			}
        }

		private String _isNaDismissalAppDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DISMISSAL_APP_DATE", BaseColumnName ="IS_NA_DISMISSAL_APP_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNaDismissalAppDate 
		{ 
		    get { return _isNaDismissalAppDate; } 
			set 
			{
			    _isNaDismissalAppDate = value;
			}
        }

		private String _isNaDismissalGrantDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DISMISSAL_GRANT_DATE", BaseColumnName ="IS_NA_DISMISSAL_GRANT_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNaDismissalGrantDate 
		{ 
		    get { return _isNaDismissalGrantDate; } 
			set 
			{
			    _isNaDismissalGrantDate = value;
			}
        }

		private String _isNaRenewalDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RENEWAL_DATE", BaseColumnName ="IS_NA_RENEWAL_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public String IsNaRenewalDate 
		{ 
		    get { return _isNaRenewalDate; } 
			set 
			{
			    _isNaRenewalDate = value;
			}
        }

		private DateTime? _renewalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_DATE", BaseColumnName ="RENEWAL_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS" )]		public DateTime? RenewalDate 
		{ 
		    get { return _renewalDate; } 
			set 
			{
			    _renewalDate = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal? _approvalDateYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="APPROVAL_DATE_YEAR" )]		public Decimal? ApprovalDateYear 
		{ 
		    get { return _approvalDateYear; } 
			set 
			{
			    _approvalDateYear = value;
			}
        }

		private Decimal? _approvalDateMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="APPROVAL_DATE_MONTH" )]		public Decimal? ApprovalDateMonth 
		{ 
		    get { return _approvalDateMonth; } 
			set 
			{
			    _approvalDateMonth = value;
			}
        }

		private Decimal? _refusalDateYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="REFUSAL_DATE_YEAR" )]		public Decimal? RefusalDateYear 
		{ 
		    get { return _refusalDateYear; } 
			set 
			{
			    _refusalDateYear = value;
			}
        }

		private Decimal? _refusalDateMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="REFUSAL_DATE_MONTH" )]		public Decimal? RefusalDateMonth 
		{ 
		    get { return _refusalDateMonth; } 
			set 
			{
			    _refusalDateMonth = value;
			}
        }

		private Decimal? _dismissalDateYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DISMISSAL_DATE_YEAR" )]		public Decimal? DismissalDateYear 
		{ 
		    get { return _dismissalDateYear; } 
			set 
			{
			    _dismissalDateYear = value;
			}
        }

		private Decimal? _dismissalDateMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DISMISSAL_DATE_MONTH" )]		public Decimal? DismissalDateMonth 
		{ 
		    get { return _dismissalDateMonth; } 
			set 
			{
			    _dismissalDateMonth = value;
			}
        }

		private String _currencyName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CURRENCY_NAME" )]		public String CurrencyName 
		{ 
		    get { return _currencyName; } 
			set 
			{
			    _currencyName = value;
			}
        }

		private Decimal? _dismissalGrantYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DISMISSAL_GRANT_YEAR" )]		public Decimal? DismissalGrantYear 
		{ 
		    get { return _dismissalGrantYear; } 
			set 
			{
			    _dismissalGrantYear = value;
			}
        }

		private Decimal? _dismissalGrantMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DISMISSAL_GRANT_MONTH" )]		public Decimal? DismissalGrantMonth 
		{ 
		    get { return _dismissalGrantMonth; } 
			set 
			{
			    _dismissalGrantMonth = value;
			}
        }


	}

	public partial class DossierCountryRpRepository : Repository<DossierCountryRp> 
	{
		public DossierCountryRpRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryRp Get(string projectionName, System.Decimal dossierCountryRpId)
		{
			return ((IRepository<DossierCountryRp>)this).Get(projectionName, dossierCountryRpId, FetchMode.UseIdentityMap);
		}

		public DossierCountryRp Get(string projectionName, System.Decimal dossierCountryRpId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryRp>)this).Get(projectionName, dossierCountryRpId, fetchMode);
		}

		public DossierCountryRp Get(Projection projection, System.Decimal dossierCountryRpId)
		{
			return ((IRepository<DossierCountryRp>)this).Get(projection, dossierCountryRpId, FetchMode.UseIdentityMap);
		}

		public DossierCountryRp Get(Projection projection, System.Decimal dossierCountryRpId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryRp>)this).Get(projection, dossierCountryRpId, fetchMode);
		}

		public DossierCountryRp Get(string projectionName, System.Decimal dossierCountryRpId, params string[] fields)
		{
			return ((IRepository<DossierCountryRp>)this).Get(projectionName, dossierCountryRpId, fields);
		}

		public DossierCountryRp Get(Projection projection, System.Decimal dossierCountryRpId, params string[] fields)
		{
			return ((IRepository<DossierCountryRp>)this).Get(projection, dossierCountryRpId, fields);
		}

		public bool Delete(System.Decimal dossierCountryRpId)
		{
			var entity = new DossierCountryRp { DossierCountryRpId = dossierCountryRpId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryRpFields
	{
		public const string DossierCountryRpId = "DossierCountryRpId";
		public const string DossierCountryId = "DossierCountryId";
		public const string RegistrationProcessId = "RegistrationProcessId";
		public const string ApprovalDate = "ApprovalDate";
		public const string Comments = "Comments";
		public const string TaxValue = "TaxValue";
		public const string IsNormonPayer = "IsNormonPayer";
		public const string TaxComments = "TaxComments";
		public const string DismissalApplicationDate = "DismissalApplicationDate";
		public const string DismissalGrantDate = "DismissalGrantDate";
		public const string CurrencyId = "CurrencyId";
		public const string IsNaProvisionalNumbers = "IsNaProvisionalNumbers";
		public const string IsNaNationalTranslations = "IsNaNationalTranslations";
		public const string DecisionType = "DecisionType";
		public const string RefusalDate = "RefusalDate";
		public const string IsNaDecision = "IsNaDecision";
		public const string IsNaNationalFee = "IsNaNationalFee";
		public const string IsUnknownAmount = "IsUnknownAmount";
		public const string IsNaApprovalDate = "IsNaApprovalDate";
		public const string IsNaRefusalDate = "IsNaRefusalDate";
		public const string IsNaDismissalAppDate = "IsNaDismissalAppDate";
		public const string IsNaDismissalGrantDate = "IsNaDismissalGrantDate";
		public const string IsNaRenewalDate = "IsNaRenewalDate";
		public const string RenewalDate = "RenewalDate";
		public const string DossierId = "DossierId";
		public const string ApprovalDateYear = "ApprovalDateYear";
		public const string ApprovalDateMonth = "ApprovalDateMonth";
		public const string RefusalDateYear = "RefusalDateYear";
		public const string RefusalDateMonth = "RefusalDateMonth";
		public const string DismissalDateYear = "DismissalDateYear";
		public const string DismissalDateMonth = "DismissalDateMonth";
		public const string CurrencyName = "CurrencyName";
		public const string DismissalGrantYear = "DismissalGrantYear";
		public const string DismissalGrantMonth = "DismissalGrantMonth";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_RPS_DATES")]
	public partial class DossierCountryRpDate
	{
		private Decimal _dossierCountryRpsDateId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_RPS_DATE_ID", ColumnName ="DOSSIER_COUNTRY_RPS_DATE_ID", BaseColumnName ="DOSSIER_COUNTRY_RPS_DATE_ID", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public Decimal DossierCountryRpsDateId 
		{ 
		    get { return _dossierCountryRpsDateId; } 
			set 
			{
			    _dossierCountryRpsDateId = value;
			}
        }

		private DateTime? _nationalSubmission;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="NATIONAL_SUBMISSION", BaseColumnName ="NATIONAL_SUBMISSION", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public DateTime? NationalSubmission 
		{ 
		    get { return _nationalSubmission; } 
			set 
			{
			    _nationalSubmission = value;
			}
        }

		private DateTime? _finalNationalSubmission;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FINAL_NATIONAL_SUBMISSION", BaseColumnName ="FINAL_NATIONAL_SUBMISSION", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public DateTime? FinalNationalSubmission 
		{ 
		    get { return _finalNationalSubmission; } 
			set 
			{
			    _finalNationalSubmission = value;
			}
        }

		private DateTime? _nationalAuthorityComments;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="NATIONAL_AUTHORITY_COMMENTS", BaseColumnName ="NATIONAL_AUTHORITY_COMMENTS", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public DateTime? NationalAuthorityComments 
		{ 
		    get { return _nationalAuthorityComments; } 
			set 
			{
			    _nationalAuthorityComments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _dossierCountryRpId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_COUNTRY_RP_ID", BaseColumnName ="DOSSIER_COUNTRY_RP_ID", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public Decimal? DossierCountryRpId 
		{ 
		    get { return _dossierCountryRpId; } 
			set 
			{
			    _dossierCountryRpId = value;
			}
        }

		private Decimal? _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public Decimal? DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _isNaDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DATE", BaseColumnName ="IS_NA_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public String IsNaDate 
		{ 
		    get { return _isNaDate; } 
			set 
			{
			    _isNaDate = value;
			}
        }

		private DateTime? _reminderDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REMINDER_DATE", BaseColumnName ="REMINDER_DATE", BaseTableName = "DOSSIER_COUNTRY_RPS_DATES" )]		public DateTime? ReminderDate 
		{ 
		    get { return _reminderDate; } 
			set 
			{
			    _reminderDate = value;
			}
        }

		private DateTime? _mockupDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MOCKUP_DATE" )]		public DateTime? MockupDate 
		{ 
		    get { return _mockupDate; } 
			set 
			{
			    _mockupDate = value;
			}
        }

		private String _mockupText;
		[DataMember]
		[SqlField(DbType.String, 63, ColumnName ="MOCKUP_TEXT" )]		public String MockupText 
		{ 
		    get { return _mockupText; } 
			set 
			{
			    _mockupText = value;
			}
        }


	}

	public partial class DossierCountryRpDateRepository : Repository<DossierCountryRpDate> 
	{
		public DossierCountryRpDateRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryRpDate Get(string projectionName, System.Decimal dossierCountryRpsDateId)
		{
			return ((IRepository<DossierCountryRpDate>)this).Get(projectionName, dossierCountryRpsDateId, FetchMode.UseIdentityMap);
		}

		public DossierCountryRpDate Get(string projectionName, System.Decimal dossierCountryRpsDateId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryRpDate>)this).Get(projectionName, dossierCountryRpsDateId, fetchMode);
		}

		public DossierCountryRpDate Get(Projection projection, System.Decimal dossierCountryRpsDateId)
		{
			return ((IRepository<DossierCountryRpDate>)this).Get(projection, dossierCountryRpsDateId, FetchMode.UseIdentityMap);
		}

		public DossierCountryRpDate Get(Projection projection, System.Decimal dossierCountryRpsDateId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryRpDate>)this).Get(projection, dossierCountryRpsDateId, fetchMode);
		}

		public DossierCountryRpDate Get(string projectionName, System.Decimal dossierCountryRpsDateId, params string[] fields)
		{
			return ((IRepository<DossierCountryRpDate>)this).Get(projectionName, dossierCountryRpsDateId, fields);
		}

		public DossierCountryRpDate Get(Projection projection, System.Decimal dossierCountryRpsDateId, params string[] fields)
		{
			return ((IRepository<DossierCountryRpDate>)this).Get(projection, dossierCountryRpsDateId, fields);
		}

		public bool Delete(System.Decimal dossierCountryRpsDateId)
		{
			var entity = new DossierCountryRpDate { DossierCountryRpsDateId = dossierCountryRpsDateId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryRpDateFields
	{
		public const string DossierCountryRpsDateId = "DossierCountryRpsDateId";
		public const string NationalSubmission = "NationalSubmission";
		public const string FinalNationalSubmission = "FinalNationalSubmission";
		public const string NationalAuthorityComments = "NationalAuthorityComments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierCountryRpId = "DossierCountryRpId";
		public const string DossierCountryId = "DossierCountryId";
		public const string IsNaDate = "IsNaDate";
		public const string ReminderDate = "ReminderDate";
		public const string MockupDate = "MockupDate";
		public const string MockupText = "MockupText";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="BIOEQUIVALENCE_REPORT_TYPES")]
	public partial class BioeqReportType
	{
		private Decimal _bioequivalenceReportTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "BIOEQUIVALENCE_REPORT_TYPE_ID", ColumnName ="BIOEQUIVALENCE_REPORT_TYPE_ID", BaseColumnName ="BIOEQUIVALENCE_REPORT_TYPE_ID", BaseTableName = "BIOEQUIVALENCE_REPORT_TYPES" )]		public Decimal BioequivalenceReportTypeId 
		{ 
		    get { return _bioequivalenceReportTypeId; } 
			set 
			{
			    _bioequivalenceReportTypeId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "BIOEQUIVALENCE_REPORT_TYPES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "BIOEQUIVALENCE_REPORT_TYPES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "BIOEQUIVALENCE_REPORT_TYPES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "BIOEQUIVALENCE_REPORT_TYPES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "BIOEQUIVALENCE_REPORT_TYPES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "BIOEQUIVALENCE_REPORT_TYPES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }


	}

	public partial class BioeqReportTypeRepository : Repository<BioeqReportType> 
	{
		public BioeqReportTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public BioeqReportType Get(string projectionName, System.Decimal bioequivalenceReportTypeId)
		{
			return ((IRepository<BioeqReportType>)this).Get(projectionName, bioequivalenceReportTypeId, FetchMode.UseIdentityMap);
		}

		public BioeqReportType Get(string projectionName, System.Decimal bioequivalenceReportTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<BioeqReportType>)this).Get(projectionName, bioequivalenceReportTypeId, fetchMode);
		}

		public BioeqReportType Get(Projection projection, System.Decimal bioequivalenceReportTypeId)
		{
			return ((IRepository<BioeqReportType>)this).Get(projection, bioequivalenceReportTypeId, FetchMode.UseIdentityMap);
		}

		public BioeqReportType Get(Projection projection, System.Decimal bioequivalenceReportTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<BioeqReportType>)this).Get(projection, bioequivalenceReportTypeId, fetchMode);
		}

		public BioeqReportType Get(string projectionName, System.Decimal bioequivalenceReportTypeId, params string[] fields)
		{
			return ((IRepository<BioeqReportType>)this).Get(projectionName, bioequivalenceReportTypeId, fields);
		}

		public BioeqReportType Get(Projection projection, System.Decimal bioequivalenceReportTypeId, params string[] fields)
		{
			return ((IRepository<BioeqReportType>)this).Get(projection, bioequivalenceReportTypeId, fields);
		}

		public bool Delete(System.Decimal bioequivalenceReportTypeId)
		{
			var entity = new BioeqReportType { BioequivalenceReportTypeId = bioequivalenceReportTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class BioeqReportTypeFields
	{
		public const string BioequivalenceReportTypeId = "BioequivalenceReportTypeId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_RP_MKNUMBERS")]
	public partial class DossierCountryRpMknumber
	{
		private Decimal _dossierCountryRpMknumberId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_RP_MKNUMBER_ID", ColumnName ="DOSSIER_COUNTRY_RP_MKNUMBER_ID", BaseColumnName ="DOSSIER_COUNTRY_RP_MKNUMBER_ID", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public Decimal DossierCountryRpMknumberId 
		{ 
		    get { return _dossierCountryRpMknumberId; } 
			set 
			{
			    _dossierCountryRpMknumberId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private Decimal _registrationProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="REGISTRATION_PROCESS_ID", BaseColumnName ="REGISTRATION_PROCESS_ID", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public Decimal RegistrationProcessId 
		{ 
		    get { return _registrationProcessId; } 
			set 
			{
			    _registrationProcessId = value;
			}
        }

		private Decimal _dossierCountryRpId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_RP_ID", BaseColumnName ="DOSSIER_COUNTRY_RP_ID", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public Decimal DossierCountryRpId 
		{ 
		    get { return _dossierCountryRpId; } 
			set 
			{
			    _dossierCountryRpId = value;
			}
        }

		private String _mktNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MKT_NUMBER", BaseColumnName ="MKT_NUMBER", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public String MktNumber 
		{ 
		    get { return _mktNumber; } 
			set 
			{
			    _mktNumber = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_RP_MKNUMBERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class DossierCountryRpMknumberRepository : Repository<DossierCountryRpMknumber> 
	{
		public DossierCountryRpMknumberRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryRpMknumber Get(string projectionName, System.Decimal dossierCountryRpMknumberId)
		{
			return ((IRepository<DossierCountryRpMknumber>)this).Get(projectionName, dossierCountryRpMknumberId, FetchMode.UseIdentityMap);
		}

		public DossierCountryRpMknumber Get(string projectionName, System.Decimal dossierCountryRpMknumberId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryRpMknumber>)this).Get(projectionName, dossierCountryRpMknumberId, fetchMode);
		}

		public DossierCountryRpMknumber Get(Projection projection, System.Decimal dossierCountryRpMknumberId)
		{
			return ((IRepository<DossierCountryRpMknumber>)this).Get(projection, dossierCountryRpMknumberId, FetchMode.UseIdentityMap);
		}

		public DossierCountryRpMknumber Get(Projection projection, System.Decimal dossierCountryRpMknumberId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryRpMknumber>)this).Get(projection, dossierCountryRpMknumberId, fetchMode);
		}

		public DossierCountryRpMknumber Get(string projectionName, System.Decimal dossierCountryRpMknumberId, params string[] fields)
		{
			return ((IRepository<DossierCountryRpMknumber>)this).Get(projectionName, dossierCountryRpMknumberId, fields);
		}

		public DossierCountryRpMknumber Get(Projection projection, System.Decimal dossierCountryRpMknumberId, params string[] fields)
		{
			return ((IRepository<DossierCountryRpMknumber>)this).Get(projection, dossierCountryRpMknumberId, fields);
		}

		public bool Delete(System.Decimal dossierCountryRpMknumberId)
		{
			var entity = new DossierCountryRpMknumber { DossierCountryRpMknumberId = dossierCountryRpMknumberId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryRpMknumberFields
	{
		public const string DossierCountryRpMknumberId = "DossierCountryRpMknumberId";
		public const string DossierCountryId = "DossierCountryId";
		public const string RegistrationProcessId = "RegistrationProcessId";
		public const string DossierCountryRpId = "DossierCountryRpId";
		public const string MktNumber = "MktNumber";
		public const string Comments = "Comments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_MP_MANUF_TIMES")]
	public partial class DossierMpManufTime
	{
		private Decimal _dossierMpManufTimeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_MP_MANUF_TIME_ID", ColumnName ="DOSSIER_MP_MANUF_TIME_ID", BaseColumnName ="DOSSIER_MP_MANUF_TIME_ID", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public Decimal DossierMpManufTimeId 
		{ 
		    get { return _dossierMpManufTimeId; } 
			set 
			{
			    _dossierMpManufTimeId = value;
			}
        }

		private Decimal _dossierMpManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_MP_MANUFACTURER_ID", BaseColumnName ="DOSSIER_MP_MANUFACTURER_ID", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public Decimal DossierMpManufacturerId 
		{ 
		    get { return _dossierMpManufacturerId; } 
			set 
			{
			    _dossierMpManufacturerId = value;
			}
        }

		private String _analyticResultsIncluded;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ANALYTIC_RESULTS_INCLUDED", BaseColumnName ="ANALYTIC_RESULTS_INCLUDED", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public String AnalyticResultsIncluded 
		{ 
		    get { return _analyticResultsIncluded; } 
			set 
			{
			    _analyticResultsIncluded = value;
			}
        }

		private String _isAnalyticResultsIncluded;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ANALYTIC_RESULTS_INCLUDED", BaseColumnName ="IS_ANALYTIC_RESULTS_INCLUDED", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public String IsAnalyticResultsIncluded 
		{ 
		    get { return _isAnalyticResultsIncluded; } 
			set 
			{
			    _isAnalyticResultsIncluded = value;
			}
        }

		private Decimal? _holdingTimeValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="HOLDING_TIME_VALUE", BaseColumnName ="HOLDING_TIME_VALUE", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public Decimal? HoldingTimeValue 
		{ 
		    get { return _holdingTimeValue; } 
			set 
			{
			    _holdingTimeValue = value;
			}
        }

		private String _holdingTimeIncluded;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HOLDING_TIME_INCLUDED", BaseColumnName ="HOLDING_TIME_INCLUDED", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public String HoldingTimeIncluded 
		{ 
		    get { return _holdingTimeIncluded; } 
			set 
			{
			    _holdingTimeIncluded = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_DOSSIER_ID", BaseColumnName ="MP_DOSSIER_ID", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public Decimal MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }

		private String _holdingTimeType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HOLDING_TIME_TYPE", BaseColumnName ="HOLDING_TIME_TYPE", BaseTableName = "DOSSIER_MP_MANUF_TIMES" )]		public String HoldingTimeType 
		{ 
		    get { return _holdingTimeType; } 
			set 
			{
			    _holdingTimeType = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }


	}

	public partial class DossierMpManufTimeRepository : Repository<DossierMpManufTime> 
	{
		public DossierMpManufTimeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierMpManufTime Get(string projectionName, System.Decimal dossierMpManufTimeId)
		{
			return ((IRepository<DossierMpManufTime>)this).Get(projectionName, dossierMpManufTimeId, FetchMode.UseIdentityMap);
		}

		public DossierMpManufTime Get(string projectionName, System.Decimal dossierMpManufTimeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpManufTime>)this).Get(projectionName, dossierMpManufTimeId, fetchMode);
		}

		public DossierMpManufTime Get(Projection projection, System.Decimal dossierMpManufTimeId)
		{
			return ((IRepository<DossierMpManufTime>)this).Get(projection, dossierMpManufTimeId, FetchMode.UseIdentityMap);
		}

		public DossierMpManufTime Get(Projection projection, System.Decimal dossierMpManufTimeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpManufTime>)this).Get(projection, dossierMpManufTimeId, fetchMode);
		}

		public DossierMpManufTime Get(string projectionName, System.Decimal dossierMpManufTimeId, params string[] fields)
		{
			return ((IRepository<DossierMpManufTime>)this).Get(projectionName, dossierMpManufTimeId, fields);
		}

		public DossierMpManufTime Get(Projection projection, System.Decimal dossierMpManufTimeId, params string[] fields)
		{
			return ((IRepository<DossierMpManufTime>)this).Get(projection, dossierMpManufTimeId, fields);
		}

		public bool Delete(System.Decimal dossierMpManufTimeId)
		{
			var entity = new DossierMpManufTime { DossierMpManufTimeId = dossierMpManufTimeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierMpManufTimeFields
	{
		public const string DossierMpManufTimeId = "DossierMpManufTimeId";
		public const string DossierMpManufacturerId = "DossierMpManufacturerId";
		public const string AnalyticResultsIncluded = "AnalyticResultsIncluded";
		public const string IsAnalyticResultsIncluded = "IsAnalyticResultsIncluded";
		public const string HoldingTimeValue = "HoldingTimeValue";
		public const string HoldingTimeIncluded = "HoldingTimeIncluded";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string MpDossierId = "MpDossierId";
		public const string HoldingTimeType = "HoldingTimeType";
		public const string DossierId = "DossierId";
		public const string MedicinalProductId = "MedicinalProductId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIERS_AUDIT")]
	public partial class DossiersAudit
	{
		private Decimal _dossierIdAudit;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_ID_AUDIT", ColumnName ="DOSSIER_ID_AUDIT", BaseColumnName ="DOSSIER_ID_AUDIT", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal DossierIdAudit 
		{ 
		    get { return _dossierIdAudit; } 
			set 
			{
			    _dossierIdAudit = value;
			}
        }

		private Decimal? _changedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CHANGED_BY", BaseColumnName ="CHANGED_BY", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal? ChangedBy 
		{ 
		    get { return _changedBy; } 
			set 
			{
			    _changedBy = value;
			}
        }

		private DateTime? _changed;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CHANGED", BaseColumnName ="CHANGED", BaseTableName = "DOSSIERS_AUDIT" )]		public DateTime? Changed 
		{ 
		    get { return _changed; } 
			set 
			{
			    _changed = value;
			}
        }

		private String _changeType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CHANGE_TYPE", BaseColumnName ="CHANGE_TYPE", BaseTableName = "DOSSIERS_AUDIT" )]		public String ChangeType 
		{ 
		    get { return _changeType; } 
			set 
			{
			    _changeType = value;
			}
        }

		private String _rossCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ROSS_CODE", BaseColumnName ="ROSS_CODE", BaseTableName = "DOSSIERS_AUDIT" )]		public String RossCode 
		{ 
		    get { return _rossCode; } 
			set 
			{
			    _rossCode = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIERS_AUDIT" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIERS_AUDIT" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _dossierStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_STATUS_ID", BaseColumnName ="DOSSIER_STATUS_ID", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal? DossierStatusId 
		{ 
		    get { return _dossierStatusId; } 
			set 
			{
			    _dossierStatusId = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="PRODUCT_NAME", BaseColumnName ="PRODUCT_NAME", BaseTableName = "DOSSIERS_AUDIT" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _initialDossierFormat;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="INITIAL_DOSSIER_FORMAT", BaseColumnName ="INITIAL_DOSSIER_FORMAT", BaseTableName = "DOSSIERS_AUDIT" )]		public String InitialDossierFormat 
		{ 
		    get { return _initialDossierFormat; } 
			set 
			{
			    _initialDossierFormat = value;
			}
        }

		private String _isDossierCopy;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_COPY", BaseColumnName ="IS_DOSSIER_COPY", BaseTableName = "DOSSIERS_AUDIT" )]		public String IsDossierCopy 
		{ 
		    get { return _isDossierCopy; } 
			set 
			{
			    _isDossierCopy = value;
			}
        }

		private String _isDossierCopyType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_COPY_TYPE", BaseColumnName ="IS_DOSSIER_COPY_TYPE", BaseTableName = "DOSSIERS_AUDIT" )]		public String IsDossierCopyType 
		{ 
		    get { return _isDossierCopyType; } 
			set 
			{
			    _isDossierCopyType = value;
			}
        }

		private String _futureClient;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FUTURE_CLIENT", BaseColumnName ="FUTURE_CLIENT", BaseTableName = "DOSSIERS_AUDIT" )]		public String FutureClient 
		{ 
		    get { return _futureClient; } 
			set 
			{
			    _futureClient = value;
			}
        }

		private String _isDuplicatedFastTrack;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DUPLICATED_FAST_TRACK", BaseColumnName ="IS_DUPLICATED_FAST_TRACK", BaseTableName = "DOSSIERS_AUDIT" )]		public String IsDuplicatedFastTrack 
		{ 
		    get { return _isDuplicatedFastTrack; } 
			set 
			{
			    _isDuplicatedFastTrack = value;
			}
        }

		private DateTime? _fastTrackDeadLine;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FAST_TRACK_DEAD_LINE", BaseColumnName ="FAST_TRACK_DEAD_LINE", BaseTableName = "DOSSIERS_AUDIT" )]		public DateTime? FastTrackDeadLine 
		{ 
		    get { return _fastTrackDeadLine; } 
			set 
			{
			    _fastTrackDeadLine = value;
			}
        }

		private Decimal? _mktAuthProdedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MKT_AUTH_PRODEDURE_ID", BaseColumnName ="MKT_AUTH_PRODEDURE_ID", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal? MktAuthProdedureId 
		{ 
		    get { return _mktAuthProdedureId; } 
			set 
			{
			    _mktAuthProdedureId = value;
			}
        }

		private String _isDossierExtApplication;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_EXT_APPLICATION", BaseColumnName ="IS_DOSSIER_EXT_APPLICATION", BaseTableName = "DOSSIERS_AUDIT" )]		public String IsDossierExtApplication 
		{ 
		    get { return _isDossierExtApplication; } 
			set 
			{
			    _isDossierExtApplication = value;
			}
        }

		private Decimal? _legalBasisId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LEGAL_BASIS_ID", BaseColumnName ="LEGAL_BASIS_ID", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal? LegalBasisId 
		{ 
		    get { return _legalBasisId; } 
			set 
			{
			    _legalBasisId = value;
			}
        }

		private String _medicinalProductBe;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MEDICINAL_PRODUCT_BE", BaseColumnName ="MEDICINAL_PRODUCT_BE", BaseTableName = "DOSSIERS_AUDIT" )]		public String MedicinalProductBe 
		{ 
		    get { return _medicinalProductBe; } 
			set 
			{
			    _medicinalProductBe = value;
			}
        }

		private String _isBeReport;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_BE_REPORT", BaseColumnName ="IS_BE_REPORT", BaseTableName = "DOSSIERS_AUDIT" )]		public String IsBeReport 
		{ 
		    get { return _isBeReport; } 
			set 
			{
			    _isBeReport = value;
			}
        }

		private Decimal? _beReportType;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="BE_REPORT_TYPE", BaseColumnName ="BE_REPORT_TYPE", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal? BeReportType 
		{ 
		    get { return _beReportType; } 
			set 
			{
			    _beReportType = value;
			}
        }

		private Decimal _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="GROUP_ID", BaseColumnName ="GROUP_ID", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private Decimal _responsibleId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="RESPONSIBLE_ID", BaseColumnName ="RESPONSIBLE_ID", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal ResponsibleId 
		{ 
		    get { return _responsibleId; } 
			set 
			{
			    _responsibleId = value;
			}
        }

		private String _pharmaceuticalFormId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PHARMACEUTICAL_FORM_ID", BaseColumnName ="PHARMACEUTICAL_FORM_ID", BaseTableName = "DOSSIERS_AUDIT" )]		public String PharmaceuticalFormId 
		{ 
		    get { return _pharmaceuticalFormId; } 
			set 
			{
			    _pharmaceuticalFormId = value;
			}
        }

		private String _adminPharmaceuticalFormId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ADMIN_PHARMACEUTICAL_FORM_ID", BaseColumnName ="ADMIN_PHARMACEUTICAL_FORM_ID", BaseTableName = "DOSSIERS_AUDIT" )]		public String AdminPharmaceuticalFormId 
		{ 
		    get { return _adminPharmaceuticalFormId; } 
			set 
			{
			    _adminPharmaceuticalFormId = value;
			}
        }

		private String _referenceMedicinalProduct;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="REFERENCE_MEDICINAL_PRODUCT", BaseColumnName ="REFERENCE_MEDICINAL_PRODUCT", BaseTableName = "DOSSIERS_AUDIT" )]		public String ReferenceMedicinalProduct 
		{ 
		    get { return _referenceMedicinalProduct; } 
			set 
			{
			    _referenceMedicinalProduct = value;
			}
        }

		private Decimal? _dossierSubStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_SUB_STATUS_ID", BaseColumnName ="DOSSIER_SUB_STATUS_ID", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal? DossierSubStatusId 
		{ 
		    get { return _dossierSubStatusId; } 
			set 
			{
			    _dossierSubStatusId = value;
			}
        }

		private Decimal? _dossierRelationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_RELATION_ID", BaseColumnName ="DOSSIER_RELATION_ID", BaseTableName = "DOSSIERS_AUDIT" )]		public Decimal? DossierRelationId 
		{ 
		    get { return _dossierRelationId; } 
			set 
			{
			    _dossierRelationId = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private String _changedByName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CHANGED_BY_NAME" )]		public String ChangedByName 
		{ 
		    get { return _changedByName; } 
			set 
			{
			    _changedByName = value;
			}
        }

		private String _itemDescription;
		[DataMember]
		[SqlField(DbType.String, 1026, ColumnName ="ITEM_DESCRIPTION" )]		public String ItemDescription 
		{ 
		    get { return _itemDescription; } 
			set 
			{
			    _itemDescription = value;
			}
        }

		private String _pharmaceuticalForm;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PHARMACEUTICAL_FORM" )]		public String PharmaceuticalForm 
		{ 
		    get { return _pharmaceuticalForm; } 
			set 
			{
			    _pharmaceuticalForm = value;
			}
        }

		private String _adminPharmaceuticalForm;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="ADMIN_PHARMACEUTICAL_FORM" )]		public String AdminPharmaceuticalForm 
		{ 
		    get { return _adminPharmaceuticalForm; } 
			set 
			{
			    _adminPharmaceuticalForm = value;
			}
        }

		private String _authorisationProcedureValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="AUTHORISATION_PROCEDURE_VALUE" )]		public String AuthorisationProcedureValue 
		{ 
		    get { return _authorisationProcedureValue; } 
			set 
			{
			    _authorisationProcedureValue = value;
			}
        }

		private String _creator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR" )]		public String Creator 
		{ 
		    get { return _creator; } 
			set 
			{
			    _creator = value;
			}
        }

		private String _modificator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR" )]		public String Modificator 
		{ 
		    get { return _modificator; } 
			set 
			{
			    _modificator = value;
			}
        }

		private String _statusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS_NAME" )]		public String StatusName 
		{ 
		    get { return _statusName; } 
			set 
			{
			    _statusName = value;
			}
        }

		private String _legaBasisValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="LEGA_BASIS_VALUE" )]		public String LegaBasisValue 
		{ 
		    get { return _legaBasisValue; } 
			set 
			{
			    _legaBasisValue = value;
			}
        }

		private String _groupName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUP_NAME" )]		public String GroupName 
		{ 
		    get { return _groupName; } 
			set 
			{
			    _groupName = value;
			}
        }

		private String _responsibleName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="RESPONSIBLE_NAME" )]		public String ResponsibleName 
		{ 
		    get { return _responsibleName; } 
			set 
			{
			    _responsibleName = value;
			}
        }

		private String _dossierSubStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DOSSIER_SUB_STATUS_NAME" )]		public String DossierSubStatusName 
		{ 
		    get { return _dossierSubStatusName; } 
			set 
			{
			    _dossierSubStatusName = value;
			}
        }

		private String _relationProductName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="RELATION_PRODUCT_NAME" )]		public String RelationProductName 
		{ 
		    get { return _relationProductName; } 
			set 
			{
			    _relationProductName = value;
			}
        }


	}

	public partial class DossiersAuditRepository : Repository<DossiersAudit> 
	{
		public DossiersAuditRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossiersAudit Get(string projectionName, System.Decimal dossierIdAudit)
		{
			return ((IRepository<DossiersAudit>)this).Get(projectionName, dossierIdAudit, FetchMode.UseIdentityMap);
		}

		public DossiersAudit Get(string projectionName, System.Decimal dossierIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossiersAudit>)this).Get(projectionName, dossierIdAudit, fetchMode);
		}

		public DossiersAudit Get(Projection projection, System.Decimal dossierIdAudit)
		{
			return ((IRepository<DossiersAudit>)this).Get(projection, dossierIdAudit, FetchMode.UseIdentityMap);
		}

		public DossiersAudit Get(Projection projection, System.Decimal dossierIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossiersAudit>)this).Get(projection, dossierIdAudit, fetchMode);
		}

		public DossiersAudit Get(string projectionName, System.Decimal dossierIdAudit, params string[] fields)
		{
			return ((IRepository<DossiersAudit>)this).Get(projectionName, dossierIdAudit, fields);
		}

		public DossiersAudit Get(Projection projection, System.Decimal dossierIdAudit, params string[] fields)
		{
			return ((IRepository<DossiersAudit>)this).Get(projection, dossierIdAudit, fields);
		}

		public bool Delete(System.Decimal dossierIdAudit)
		{
			var entity = new DossiersAudit { DossierIdAudit = dossierIdAudit };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossiersAuditFields
	{
		public const string DossierIdAudit = "DossierIdAudit";
		public const string ChangedBy = "ChangedBy";
		public const string Changed = "Changed";
		public const string ChangeType = "ChangeType";
		public const string RossCode = "RossCode";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string DossierStatusId = "DossierStatusId";
		public const string ProductName = "ProductName";
		public const string InitialDossierFormat = "InitialDossierFormat";
		public const string IsDossierCopy = "IsDossierCopy";
		public const string IsDossierCopyType = "IsDossierCopyType";
		public const string FutureClient = "FutureClient";
		public const string IsDuplicatedFastTrack = "IsDuplicatedFastTrack";
		public const string FastTrackDeadLine = "FastTrackDeadLine";
		public const string MktAuthProdedureId = "MktAuthProdedureId";
		public const string IsDossierExtApplication = "IsDossierExtApplication";
		public const string LegalBasisId = "LegalBasisId";
		public const string MedicinalProductBe = "MedicinalProductBe";
		public const string IsBeReport = "IsBeReport";
		public const string BeReportType = "BeReportType";
		public const string GroupId = "GroupId";
		public const string ResponsibleId = "ResponsibleId";
		public const string PharmaceuticalFormId = "PharmaceuticalFormId";
		public const string AdminPharmaceuticalFormId = "AdminPharmaceuticalFormId";
		public const string ReferenceMedicinalProduct = "ReferenceMedicinalProduct";
		public const string DossierSubStatusId = "DossierSubStatusId";
		public const string DossierRelationId = "DossierRelationId";
		public const string ItemId = "ItemId";
		public const string ChangedByName = "ChangedByName";
		public const string ItemDescription = "ItemDescription";
		public const string PharmaceuticalForm = "PharmaceuticalForm";
		public const string AdminPharmaceuticalForm = "AdminPharmaceuticalForm";
		public const string AuthorisationProcedureValue = "AuthorisationProcedureValue";
		public const string Creator = "Creator";
		public const string Modificator = "Modificator";
		public const string StatusName = "StatusName";
		public const string LegaBasisValue = "LegaBasisValue";
		public const string GroupName = "GroupName";
		public const string ResponsibleName = "ResponsibleName";
		public const string DossierSubStatusName = "DossierSubStatusName";
		public const string RelationProductName = "RelationProductName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDICINAL_PRODUCTS_AUDIT")]
	public partial class MedicinalProductsAudit
	{
		private Decimal _medicinalProductIdAudit;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MEDICINAL_PRODUCT_ID_AUDIT", ColumnName ="MEDICINAL_PRODUCT_ID_AUDIT", BaseColumnName ="MEDICINAL_PRODUCT_ID_AUDIT", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public Decimal MedicinalProductIdAudit 
		{ 
		    get { return _medicinalProductIdAudit; } 
			set 
			{
			    _medicinalProductIdAudit = value;
			}
        }

		private Decimal? _changedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CHANGED_BY", BaseColumnName ="CHANGED_BY", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public Decimal? ChangedBy 
		{ 
		    get { return _changedBy; } 
			set 
			{
			    _changedBy = value;
			}
        }

		private DateTime? _changed;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CHANGED", BaseColumnName ="CHANGED", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public DateTime? Changed 
		{ 
		    get { return _changed; } 
			set 
			{
			    _changed = value;
			}
        }

		private String _changeType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CHANGE_TYPE", BaseColumnName ="CHANGE_TYPE", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public String ChangeType 
		{ 
		    get { return _changeType; } 
			set 
			{
			    _changeType = value;
			}
        }

		private String _medicinalProductName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MEDICINAL_PRODUCT_NAME", BaseColumnName ="MEDICINAL_PRODUCT_NAME", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public String MedicinalProductName 
		{ 
		    get { return _medicinalProductName; } 
			set 
			{
			    _medicinalProductName = value;
			}
        }

		private String _rossCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ROSS_CODE", BaseColumnName ="ROSS_CODE", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public String RossCode 
		{ 
		    get { return _rossCode; } 
			set 
			{
			    _rossCode = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _pharmaceuticalForm;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PHARMACEUTICAL_FORM", BaseColumnName ="PHARMACEUTICAL_FORM", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public String PharmaceuticalForm 
		{ 
		    get { return _pharmaceuticalForm; } 
			set 
			{
			    _pharmaceuticalForm = value;
			}
        }

		private Decimal? _developmentTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DEVELOPMENT_TYPE_ID", BaseColumnName ="DEVELOPMENT_TYPE_ID", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public Decimal? DevelopmentTypeId 
		{ 
		    get { return _developmentTypeId; } 
			set 
			{
			    _developmentTypeId = value;
			}
        }

		private Decimal? _mpStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MP_STATUS_ID", BaseColumnName ="MP_STATUS_ID", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public Decimal? MpStatusId 
		{ 
		    get { return _mpStatusId; } 
			set 
			{
			    _mpStatusId = value;
			}
        }

		private String _typeOfProcess;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="TYPE_OF_PROCESS", BaseColumnName ="TYPE_OF_PROCESS", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public String TypeOfProcess 
		{ 
		    get { return _typeOfProcess; } 
			set 
			{
			    _typeOfProcess = value;
			}
        }

		private Decimal? _statusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="STATUS_ID", BaseColumnName ="STATUS_ID", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public Decimal? StatusId 
		{ 
		    get { return _statusId; } 
			set 
			{
			    _statusId = value;
			}
        }

		private Decimal? _subStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SUB_STATUS_ID", BaseColumnName ="SUB_STATUS_ID", BaseTableName = "MEDICINAL_PRODUCTS_AUDIT" )]		public Decimal? SubStatusId 
		{ 
		    get { return _subStatusId; } 
			set 
			{
			    _subStatusId = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private String _changedByName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CHANGED_BY_NAME" )]		public String ChangedByName 
		{ 
		    get { return _changedByName; } 
			set 
			{
			    _changedByName = value;
			}
        }

		private String _itemDescription;
		[DataMember]
		[SqlField(DbType.String, 513, ColumnName ="ITEM_DESCRIPTION" )]		public String ItemDescription 
		{ 
		    get { return _itemDescription; } 
			set 
			{
			    _itemDescription = value;
			}
        }

		private String _creator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR" )]		public String Creator 
		{ 
		    get { return _creator; } 
			set 
			{
			    _creator = value;
			}
        }

		private String _modificator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR" )]		public String Modificator 
		{ 
		    get { return _modificator; } 
			set 
			{
			    _modificator = value;
			}
        }

		private String _mpStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MP_STATUS_NAME" )]		public String MpStatusName 
		{ 
		    get { return _mpStatusName; } 
			set 
			{
			    _mpStatusName = value;
			}
        }

		private String _developmentTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DEVELOPMENT_TYPE_NAME" )]		public String DevelopmentTypeName 
		{ 
		    get { return _developmentTypeName; } 
			set 
			{
			    _developmentTypeName = value;
			}
        }

		private String _pharmaceuticalDoseFormValue;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PHARMACEUTICAL_DOSE_FORM_VALUE" )]		public String PharmaceuticalDoseFormValue 
		{ 
		    get { return _pharmaceuticalDoseFormValue; } 
			set 
			{
			    _pharmaceuticalDoseFormValue = value;
			}
        }

		private String _statusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS_NAME" )]		public String StatusName 
		{ 
		    get { return _statusName; } 
			set 
			{
			    _statusName = value;
			}
        }

		private String _subStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SUB_STATUS_NAME" )]		public String SubStatusName 
		{ 
		    get { return _subStatusName; } 
			set 
			{
			    _subStatusName = value;
			}
        }


	}

	public partial class MedicinalProductsAuditRepository : Repository<MedicinalProductsAudit> 
	{
		public MedicinalProductsAuditRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedicinalProductsAudit Get(string projectionName, System.Decimal medicinalProductIdAudit)
		{
			return ((IRepository<MedicinalProductsAudit>)this).Get(projectionName, medicinalProductIdAudit, FetchMode.UseIdentityMap);
		}

		public MedicinalProductsAudit Get(string projectionName, System.Decimal medicinalProductIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedicinalProductsAudit>)this).Get(projectionName, medicinalProductIdAudit, fetchMode);
		}

		public MedicinalProductsAudit Get(Projection projection, System.Decimal medicinalProductIdAudit)
		{
			return ((IRepository<MedicinalProductsAudit>)this).Get(projection, medicinalProductIdAudit, FetchMode.UseIdentityMap);
		}

		public MedicinalProductsAudit Get(Projection projection, System.Decimal medicinalProductIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedicinalProductsAudit>)this).Get(projection, medicinalProductIdAudit, fetchMode);
		}

		public MedicinalProductsAudit Get(string projectionName, System.Decimal medicinalProductIdAudit, params string[] fields)
		{
			return ((IRepository<MedicinalProductsAudit>)this).Get(projectionName, medicinalProductIdAudit, fields);
		}

		public MedicinalProductsAudit Get(Projection projection, System.Decimal medicinalProductIdAudit, params string[] fields)
		{
			return ((IRepository<MedicinalProductsAudit>)this).Get(projection, medicinalProductIdAudit, fields);
		}

		public bool Delete(System.Decimal medicinalProductIdAudit)
		{
			var entity = new MedicinalProductsAudit { MedicinalProductIdAudit = medicinalProductIdAudit };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MedicinalProductsAuditFields
	{
		public const string MedicinalProductIdAudit = "MedicinalProductIdAudit";
		public const string ChangedBy = "ChangedBy";
		public const string Changed = "Changed";
		public const string ChangeType = "ChangeType";
		public const string MedicinalProductName = "MedicinalProductName";
		public const string RossCode = "RossCode";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string PharmaceuticalForm = "PharmaceuticalForm";
		public const string DevelopmentTypeId = "DevelopmentTypeId";
		public const string MpStatusId = "MpStatusId";
		public const string TypeOfProcess = "TypeOfProcess";
		public const string StatusId = "StatusId";
		public const string SubStatusId = "SubStatusId";
		public const string ItemId = "ItemId";
		public const string ChangedByName = "ChangedByName";
		public const string ItemDescription = "ItemDescription";
		public const string Creator = "Creator";
		public const string Modificator = "Modificator";
		public const string MpStatusName = "MpStatusName";
		public const string DevelopmentTypeName = "DevelopmentTypeName";
		public const string PharmaceuticalDoseFormValue = "PharmaceuticalDoseFormValue";
		public const string StatusName = "StatusName";
		public const string SubStatusName = "SubStatusName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="BIOEQ_REPORT_TYPES_AUDIT")]
	public partial class BioeqReportTypesAudit
	{
		private Decimal _bioeqReportTypeIdAudit;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "BIOEQ_REPORT_TYPE_ID_AUDIT", ColumnName ="BIOEQ_REPORT_TYPE_ID_AUDIT", BaseColumnName ="BIOEQ_REPORT_TYPE_ID_AUDIT", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public Decimal BioeqReportTypeIdAudit 
		{ 
		    get { return _bioeqReportTypeIdAudit; } 
			set 
			{
			    _bioeqReportTypeIdAudit = value;
			}
        }

		private Decimal? _changedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CHANGED_BY", BaseColumnName ="CHANGED_BY", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public Decimal? ChangedBy 
		{ 
		    get { return _changedBy; } 
			set 
			{
			    _changedBy = value;
			}
        }

		private DateTime? _changed;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CHANGED", BaseColumnName ="CHANGED", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public DateTime? Changed 
		{ 
		    get { return _changed; } 
			set 
			{
			    _changed = value;
			}
        }

		private String _changeType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CHANGE_TYPE", BaseColumnName ="CHANGE_TYPE", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public String ChangeType 
		{ 
		    get { return _changeType; } 
			set 
			{
			    _changeType = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "BIOEQ_REPORT_TYPES_AUDIT" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private String _changedByName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CHANGED_BY_NAME" )]		public String ChangedByName 
		{ 
		    get { return _changedByName; } 
			set 
			{
			    _changedByName = value;
			}
        }

		private String _itemDescription;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ITEM_DESCRIPTION" )]		public String ItemDescription 
		{ 
		    get { return _itemDescription; } 
			set 
			{
			    _itemDescription = value;
			}
        }

		private String _creator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR" )]		public String Creator 
		{ 
		    get { return _creator; } 
			set 
			{
			    _creator = value;
			}
        }

		private String _modificator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR" )]		public String Modificator 
		{ 
		    get { return _modificator; } 
			set 
			{
			    _modificator = value;
			}
        }


	}

	public partial class BioeqReportTypesAuditRepository : Repository<BioeqReportTypesAudit> 
	{
		public BioeqReportTypesAuditRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public BioeqReportTypesAudit Get(string projectionName, System.Decimal bioeqReportTypeIdAudit)
		{
			return ((IRepository<BioeqReportTypesAudit>)this).Get(projectionName, bioeqReportTypeIdAudit, FetchMode.UseIdentityMap);
		}

		public BioeqReportTypesAudit Get(string projectionName, System.Decimal bioeqReportTypeIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<BioeqReportTypesAudit>)this).Get(projectionName, bioeqReportTypeIdAudit, fetchMode);
		}

		public BioeqReportTypesAudit Get(Projection projection, System.Decimal bioeqReportTypeIdAudit)
		{
			return ((IRepository<BioeqReportTypesAudit>)this).Get(projection, bioeqReportTypeIdAudit, FetchMode.UseIdentityMap);
		}

		public BioeqReportTypesAudit Get(Projection projection, System.Decimal bioeqReportTypeIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<BioeqReportTypesAudit>)this).Get(projection, bioeqReportTypeIdAudit, fetchMode);
		}

		public BioeqReportTypesAudit Get(string projectionName, System.Decimal bioeqReportTypeIdAudit, params string[] fields)
		{
			return ((IRepository<BioeqReportTypesAudit>)this).Get(projectionName, bioeqReportTypeIdAudit, fields);
		}

		public BioeqReportTypesAudit Get(Projection projection, System.Decimal bioeqReportTypeIdAudit, params string[] fields)
		{
			return ((IRepository<BioeqReportTypesAudit>)this).Get(projection, bioeqReportTypeIdAudit, fields);
		}

		public bool Delete(System.Decimal bioeqReportTypeIdAudit)
		{
			var entity = new BioeqReportTypesAudit { BioeqReportTypeIdAudit = bioeqReportTypeIdAudit };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class BioeqReportTypesAuditFields
	{
		public const string BioeqReportTypeIdAudit = "BioeqReportTypeIdAudit";
		public const string ChangedBy = "ChangedBy";
		public const string Changed = "Changed";
		public const string ChangeType = "ChangeType";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ItemId = "ItemId";
		public const string ChangedByName = "ChangedByName";
		public const string ItemDescription = "ItemDescription";
		public const string Creator = "Creator";
		public const string Modificator = "Modificator";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="ACTIVE_SUBSTANCEDMFCEPS_AUDIT")]
	public partial class ActivSubcedmfcepsAudit
	{
		private Decimal _dmfcepVersionIdAudit;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DMFCEP_VERSION_ID_AUDIT", ColumnName ="DMFCEP_VERSION_ID_AUDIT", BaseColumnName ="DMFCEP_VERSION_ID_AUDIT", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public Decimal DmfcepVersionIdAudit 
		{ 
		    get { return _dmfcepVersionIdAudit; } 
			set 
			{
			    _dmfcepVersionIdAudit = value;
			}
        }

		private DateTime? _versionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VERSION_DATE", BaseColumnName ="VERSION_DATE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public DateTime? VersionDate 
		{ 
		    get { return _versionDate; } 
			set 
			{
			    _versionDate = value;
			}
        }

		private Decimal? _changedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CHANGED_BY", BaseColumnName ="CHANGED_BY", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public Decimal? ChangedBy 
		{ 
		    get { return _changedBy; } 
			set 
			{
			    _changedBy = value;
			}
        }

		private DateTime? _changed;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CHANGED", BaseColumnName ="CHANGED", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public DateTime? Changed 
		{ 
		    get { return _changed; } 
			set 
			{
			    _changed = value;
			}
        }

		private String _changeType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CHANGE_TYPE", BaseColumnName ="CHANGE_TYPE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public String ChangeType 
		{ 
		    get { return _changeType; } 
			set 
			{
			    _changeType = value;
			}
        }

		private Decimal? _apiManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="API_MANUFACTURER_ID", BaseColumnName ="API_MANUFACTURER_ID", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public Decimal? ApiManufacturerId 
		{ 
		    get { return _apiManufacturerId; } 
			set 
			{
			    _apiManufacturerId = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private Decimal? _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ACTIVE_SUBSTANCE_ID", BaseColumnName ="ACTIVE_SUBSTANCE_ID", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public Decimal? ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MANUFACTURER_NAME", BaseColumnName ="MANUFACTURER_NAME", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _dmfcepType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="DMFCEP_TYPE", BaseColumnName ="DMFCEP_TYPE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public String DmfcepType 
		{ 
		    get { return _dmfcepType; } 
			set 
			{
			    _dmfcepType = value;
			}
        }

		private String _version;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION", BaseColumnName ="VERSION", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public String Version 
		{ 
		    get { return _version; } 
			set 
			{
			    _version = value;
			}
        }

		private String _isCompleteVersionDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_COMPLETE_VERSION_DATE", BaseColumnName ="IS_COMPLETE_VERSION_DATE", BaseTableName = "ACTIVE_SUBSTANCEDMFCEPS_AUDIT" )]		public String IsCompleteVersionDate 
		{ 
		    get { return _isCompleteVersionDate; } 
			set 
			{
			    _isCompleteVersionDate = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private String _changedByName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CHANGED_BY_NAME" )]		public String ChangedByName 
		{ 
		    get { return _changedByName; } 
			set 
			{
			    _changedByName = value;
			}
        }

		private String _itemDescription;
		[DataMember]
		[SqlField(DbType.String, 1666, ProviderType=119, ColumnName ="ITEM_DESCRIPTION" )]		public String ItemDescription 
		{ 
		    get { return _itemDescription; } 
			set 
			{
			    _itemDescription = value;
			}
        }

		private String _creator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR" )]		public String Creator 
		{ 
		    get { return _creator; } 
			set 
			{
			    _creator = value;
			}
        }

		private String _modificator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR" )]		public String Modificator 
		{ 
		    get { return _modificator; } 
			set 
			{
			    _modificator = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }


	}

	public partial class ActivSubcedmfcepsAuditRepository : Repository<ActivSubcedmfcepsAudit> 
	{
		public ActivSubcedmfcepsAuditRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ActivSubcedmfcepsAudit Get(string projectionName, System.Decimal dmfcepVersionIdAudit)
		{
			return ((IRepository<ActivSubcedmfcepsAudit>)this).Get(projectionName, dmfcepVersionIdAudit, FetchMode.UseIdentityMap);
		}

		public ActivSubcedmfcepsAudit Get(string projectionName, System.Decimal dmfcepVersionIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ActivSubcedmfcepsAudit>)this).Get(projectionName, dmfcepVersionIdAudit, fetchMode);
		}

		public ActivSubcedmfcepsAudit Get(Projection projection, System.Decimal dmfcepVersionIdAudit)
		{
			return ((IRepository<ActivSubcedmfcepsAudit>)this).Get(projection, dmfcepVersionIdAudit, FetchMode.UseIdentityMap);
		}

		public ActivSubcedmfcepsAudit Get(Projection projection, System.Decimal dmfcepVersionIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ActivSubcedmfcepsAudit>)this).Get(projection, dmfcepVersionIdAudit, fetchMode);
		}

		public ActivSubcedmfcepsAudit Get(string projectionName, System.Decimal dmfcepVersionIdAudit, params string[] fields)
		{
			return ((IRepository<ActivSubcedmfcepsAudit>)this).Get(projectionName, dmfcepVersionIdAudit, fields);
		}

		public ActivSubcedmfcepsAudit Get(Projection projection, System.Decimal dmfcepVersionIdAudit, params string[] fields)
		{
			return ((IRepository<ActivSubcedmfcepsAudit>)this).Get(projection, dmfcepVersionIdAudit, fields);
		}

		public bool Delete(System.Decimal dmfcepVersionIdAudit)
		{
			var entity = new ActivSubcedmfcepsAudit { DmfcepVersionIdAudit = dmfcepVersionIdAudit };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ActivSubcedmfcepsAuditFields
	{
		public const string DmfcepVersionIdAudit = "DmfcepVersionIdAudit";
		public const string VersionDate = "VersionDate";
		public const string ChangedBy = "ChangedBy";
		public const string Changed = "Changed";
		public const string ChangeType = "ChangeType";
		public const string ApiManufacturerId = "ApiManufacturerId";
		public const string Comments = "Comments";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string ManufacturerName = "ManufacturerName";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DmfcepType = "DmfcepType";
		public const string Version = "Version";
		public const string IsCompleteVersionDate = "IsCompleteVersionDate";
		public const string ItemId = "ItemId";
		public const string ChangedByName = "ChangedByName";
		public const string ItemDescription = "ItemDescription";
		public const string Creator = "Creator";
		public const string Modificator = "Modificator";
		public const string SubstanceName = "SubstanceName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="ACTIVE_SUBSTANCES_AUDIT")]
	public partial class ActiveSubstancesAudit
	{
		private Decimal _activeSubstanceIdAudit;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "ACTIVE_SUBSTANCE_ID_AUDIT", ColumnName ="ACTIVE_SUBSTANCE_ID_AUDIT", BaseColumnName ="ACTIVE_SUBSTANCE_ID_AUDIT", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public Decimal ActiveSubstanceIdAudit 
		{ 
		    get { return _activeSubstanceIdAudit; } 
			set 
			{
			    _activeSubstanceIdAudit = value;
			}
        }

		private Decimal? _changedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CHANGED_BY", BaseColumnName ="CHANGED_BY", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public Decimal? ChangedBy 
		{ 
		    get { return _changedBy; } 
			set 
			{
			    _changedBy = value;
			}
        }

		private DateTime? _changed;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CHANGED", BaseColumnName ="CHANGED", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public DateTime? Changed 
		{ 
		    get { return _changed; } 
			set 
			{
			    _changed = value;
			}
        }

		private String _changeType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CHANGE_TYPE", BaseColumnName ="CHANGE_TYPE", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public String ChangeType 
		{ 
		    get { return _changeType; } 
			set 
			{
			    _changeType = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _isSalt;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_SALT", BaseColumnName ="IS_SALT", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public String IsSalt 
		{ 
		    get { return _isSalt; } 
			set 
			{
			    _isSalt = value;
			}
        }

		private String _activeSubstanceComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ACTIVE_SUBSTANCE_COMMENTS", BaseColumnName ="ACTIVE_SUBSTANCE_COMMENTS", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public String ActiveSubstanceComments 
		{ 
		    get { return _activeSubstanceComments; } 
			set 
			{
			    _activeSubstanceComments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isEudravigilanceSubstance;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_EUDRAVIGILANCE_SUBSTANCE", BaseColumnName ="IS_EUDRAVIGILANCE_SUBSTANCE", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public String IsEudravigilanceSubstance 
		{ 
		    get { return _isEudravigilanceSubstance; } 
			set 
			{
			    _isEudravigilanceSubstance = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="SUBSTANCE_NAME", BaseColumnName ="SUBSTANCE_NAME", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _xevmpdCodeSubstance;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE_SUBSTANCE", BaseColumnName ="XEVMPD_CODE_SUBSTANCE", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public String XevmpdCodeSubstance 
		{ 
		    get { return _xevmpdCodeSubstance; } 
			set 
			{
			    _xevmpdCodeSubstance = value;
			}
        }

		private String _otherSubstanceName;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="OTHER_SUBSTANCE_NAME", BaseColumnName ="OTHER_SUBSTANCE_NAME", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public String OtherSubstanceName 
		{ 
		    get { return _otherSubstanceName; } 
			set 
			{
			    _otherSubstanceName = value;
			}
        }

		private Decimal? _apiStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="API_STATUS_ID", BaseColumnName ="API_STATUS_ID", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public Decimal? ApiStatusId 
		{ 
		    get { return _apiStatusId; } 
			set 
			{
			    _apiStatusId = value;
			}
        }

		private Decimal? _apiSubstatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="API_SUBSTATUS_ID", BaseColumnName ="API_SUBSTATUS_ID", BaseTableName = "ACTIVE_SUBSTANCES_AUDIT" )]		public Decimal? ApiSubstatusId 
		{ 
		    get { return _apiSubstatusId; } 
			set 
			{
			    _apiSubstatusId = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private String _changedByName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CHANGED_BY_NAME" )]		public String ChangedByName 
		{ 
		    get { return _changedByName; } 
			set 
			{
			    _changedByName = value;
			}
        }

		private String _creator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR" )]		public String Creator 
		{ 
		    get { return _creator; } 
			set 
			{
			    _creator = value;
			}
        }

		private String _modificator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR" )]		public String Modificator 
		{ 
		    get { return _modificator; } 
			set 
			{
			    _modificator = value;
			}
        }

		private String _activeSubstanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="ACTIVE_SUBSTANCE_NAME" )]		public String ActiveSubstanceName 
		{ 
		    get { return _activeSubstanceName; } 
			set 
			{
			    _activeSubstanceName = value;
			}
        }

		private String _apiStatusDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="API_STATUS_DESCRIPTION" )]		public String ApiStatusDescription 
		{ 
		    get { return _apiStatusDescription; } 
			set 
			{
			    _apiStatusDescription = value;
			}
        }

		private String _apiSubstatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="API_SUBSTATUS_NAME" )]		public String ApiSubstatusName 
		{ 
		    get { return _apiSubstatusName; } 
			set 
			{
			    _apiSubstatusName = value;
			}
        }


	}

	public partial class ActiveSubstancesAuditRepository : Repository<ActiveSubstancesAudit> 
	{
		public ActiveSubstancesAuditRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ActiveSubstancesAudit Get(string projectionName, System.Decimal activeSubstanceIdAudit)
		{
			return ((IRepository<ActiveSubstancesAudit>)this).Get(projectionName, activeSubstanceIdAudit, FetchMode.UseIdentityMap);
		}

		public ActiveSubstancesAudit Get(string projectionName, System.Decimal activeSubstanceIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ActiveSubstancesAudit>)this).Get(projectionName, activeSubstanceIdAudit, fetchMode);
		}

		public ActiveSubstancesAudit Get(Projection projection, System.Decimal activeSubstanceIdAudit)
		{
			return ((IRepository<ActiveSubstancesAudit>)this).Get(projection, activeSubstanceIdAudit, FetchMode.UseIdentityMap);
		}

		public ActiveSubstancesAudit Get(Projection projection, System.Decimal activeSubstanceIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ActiveSubstancesAudit>)this).Get(projection, activeSubstanceIdAudit, fetchMode);
		}

		public ActiveSubstancesAudit Get(string projectionName, System.Decimal activeSubstanceIdAudit, params string[] fields)
		{
			return ((IRepository<ActiveSubstancesAudit>)this).Get(projectionName, activeSubstanceIdAudit, fields);
		}

		public ActiveSubstancesAudit Get(Projection projection, System.Decimal activeSubstanceIdAudit, params string[] fields)
		{
			return ((IRepository<ActiveSubstancesAudit>)this).Get(projection, activeSubstanceIdAudit, fields);
		}

		public bool Delete(System.Decimal activeSubstanceIdAudit)
		{
			var entity = new ActiveSubstancesAudit { ActiveSubstanceIdAudit = activeSubstanceIdAudit };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ActiveSubstancesAuditFields
	{
		public const string ActiveSubstanceIdAudit = "ActiveSubstanceIdAudit";
		public const string ChangedBy = "ChangedBy";
		public const string Changed = "Changed";
		public const string ChangeType = "ChangeType";
		public const string XevmpdCode = "XevmpdCode";
		public const string IsSalt = "IsSalt";
		public const string ActiveSubstanceComments = "ActiveSubstanceComments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsEudravigilanceSubstance = "IsEudravigilanceSubstance";
		public const string SubstanceName = "SubstanceName";
		public const string XevmpdCodeSubstance = "XevmpdCodeSubstance";
		public const string OtherSubstanceName = "OtherSubstanceName";
		public const string ApiStatusId = "ApiStatusId";
		public const string ApiSubstatusId = "ApiSubstatusId";
		public const string ItemId = "ItemId";
		public const string ChangedByName = "ChangedByName";
		public const string Creator = "Creator";
		public const string Modificator = "Modificator";
		public const string ActiveSubstanceName = "ActiveSubstanceName";
		public const string ApiStatusDescription = "ApiStatusDescription";
		public const string ApiSubstatusName = "ApiSubstatusName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="AMOUNT_VALUE_TYPES_AUDIT")]
	public partial class AmountValueTypesAudit
	{
		private Decimal _amountValueIdAudit;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "AMOUNT_VALUE_ID_AUDIT", ColumnName ="AMOUNT_VALUE_ID_AUDIT", BaseColumnName ="AMOUNT_VALUE_ID_AUDIT", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public Decimal AmountValueIdAudit 
		{ 
		    get { return _amountValueIdAudit; } 
			set 
			{
			    _amountValueIdAudit = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private Decimal? _changedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CHANGED_BY", BaseColumnName ="CHANGED_BY", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public Decimal? ChangedBy 
		{ 
		    get { return _changedBy; } 
			set 
			{
			    _changedBy = value;
			}
        }

		private DateTime? _changed;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CHANGED", BaseColumnName ="CHANGED", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public DateTime? Changed 
		{ 
		    get { return _changed; } 
			set 
			{
			    _changed = value;
			}
        }

		private String _changeType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CHANGE_TYPE", BaseColumnName ="CHANGE_TYPE", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public String ChangeType 
		{ 
		    get { return _changeType; } 
			set 
			{
			    _changeType = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "AMOUNT_VALUE_TYPES_AUDIT" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private String _changedByName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CHANGED_BY_NAME" )]		public String ChangedByName 
		{ 
		    get { return _changedByName; } 
			set 
			{
			    _changedByName = value;
			}
        }

		private String _itemDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ITEM_DESCRIPTION" )]		public String ItemDescription 
		{ 
		    get { return _itemDescription; } 
			set 
			{
			    _itemDescription = value;
			}
        }

		private String _creator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR" )]		public String Creator 
		{ 
		    get { return _creator; } 
			set 
			{
			    _creator = value;
			}
        }

		private String _modificator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR" )]		public String Modificator 
		{ 
		    get { return _modificator; } 
			set 
			{
			    _modificator = value;
			}
        }


	}

	public partial class AmountValueTypesAuditRepository : Repository<AmountValueTypesAudit> 
	{
		public AmountValueTypesAuditRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AmountValueTypesAudit Get(string projectionName, System.Decimal amountValueIdAudit)
		{
			return ((IRepository<AmountValueTypesAudit>)this).Get(projectionName, amountValueIdAudit, FetchMode.UseIdentityMap);
		}

		public AmountValueTypesAudit Get(string projectionName, System.Decimal amountValueIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AmountValueTypesAudit>)this).Get(projectionName, amountValueIdAudit, fetchMode);
		}

		public AmountValueTypesAudit Get(Projection projection, System.Decimal amountValueIdAudit)
		{
			return ((IRepository<AmountValueTypesAudit>)this).Get(projection, amountValueIdAudit, FetchMode.UseIdentityMap);
		}

		public AmountValueTypesAudit Get(Projection projection, System.Decimal amountValueIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AmountValueTypesAudit>)this).Get(projection, amountValueIdAudit, fetchMode);
		}

		public AmountValueTypesAudit Get(string projectionName, System.Decimal amountValueIdAudit, params string[] fields)
		{
			return ((IRepository<AmountValueTypesAudit>)this).Get(projectionName, amountValueIdAudit, fields);
		}

		public AmountValueTypesAudit Get(Projection projection, System.Decimal amountValueIdAudit, params string[] fields)
		{
			return ((IRepository<AmountValueTypesAudit>)this).Get(projection, amountValueIdAudit, fields);
		}

		public bool Delete(System.Decimal amountValueIdAudit)
		{
			var entity = new AmountValueTypesAudit { AmountValueIdAudit = amountValueIdAudit };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AmountValueTypesAuditFields
	{
		public const string AmountValueIdAudit = "AmountValueIdAudit";
		public const string Name = "Name";
		public const string ChangedBy = "ChangedBy";
		public const string Changed = "Changed";
		public const string ChangeType = "ChangeType";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsActive = "IsActive";
		public const string ItemId = "ItemId";
		public const string ChangedByName = "ChangedByName";
		public const string ItemDescription = "ItemDescription";
		public const string Creator = "Creator";
		public const string Modificator = "Modificator";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="API_MANUFACTURERS_AUDIT")]
	public partial class ApiManufacturersAudit
	{
		private Decimal _apiManufacturerIdAudit;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "API_MANUFACTURER_ID_AUDIT", ColumnName ="API_MANUFACTURER_ID_AUDIT", BaseColumnName ="API_MANUFACTURER_ID_AUDIT", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public Decimal ApiManufacturerIdAudit 
		{ 
		    get { return _apiManufacturerIdAudit; } 
			set 
			{
			    _apiManufacturerIdAudit = value;
			}
        }

		private Decimal? _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ACTIVE_SUBSTANCE_ID", BaseColumnName ="ACTIVE_SUBSTANCE_ID", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public Decimal? ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private Decimal _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_ID", BaseColumnName ="MANUFACTURER_ID", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public Decimal ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private Decimal? _changedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CHANGED_BY", BaseColumnName ="CHANGED_BY", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public Decimal? ChangedBy 
		{ 
		    get { return _changedBy; } 
			set 
			{
			    _changedBy = value;
			}
        }

		private DateTime? _changed;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CHANGED", BaseColumnName ="CHANGED", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public DateTime? Changed 
		{ 
		    get { return _changed; } 
			set 
			{
			    _changed = value;
			}
        }

		private String _changeType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CHANGE_TYPE", BaseColumnName ="CHANGE_TYPE", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public String ChangeType 
		{ 
		    get { return _changeType; } 
			set 
			{
			    _changeType = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "API_MANUFACTURERS_AUDIT" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private String _changedByName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CHANGED_BY_NAME" )]		public String ChangedByName 
		{ 
		    get { return _changedByName; } 
			set 
			{
			    _changedByName = value;
			}
        }

		private String _itemDescription;
		[DataMember]
		[SqlField(DbType.String, 513, ColumnName ="ITEM_DESCRIPTION" )]		public String ItemDescription 
		{ 
		    get { return _itemDescription; } 
			set 
			{
			    _itemDescription = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _creator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR" )]		public String Creator 
		{ 
		    get { return _creator; } 
			set 
			{
			    _creator = value;
			}
        }

		private String _modificator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR" )]		public String Modificator 
		{ 
		    get { return _modificator; } 
			set 
			{
			    _modificator = value;
			}
        }


	}

	public partial class ApiManufacturersAuditRepository : Repository<ApiManufacturersAudit> 
	{
		public ApiManufacturersAuditRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ApiManufacturersAudit Get(string projectionName, System.Decimal apiManufacturerIdAudit)
		{
			return ((IRepository<ApiManufacturersAudit>)this).Get(projectionName, apiManufacturerIdAudit, FetchMode.UseIdentityMap);
		}

		public ApiManufacturersAudit Get(string projectionName, System.Decimal apiManufacturerIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiManufacturersAudit>)this).Get(projectionName, apiManufacturerIdAudit, fetchMode);
		}

		public ApiManufacturersAudit Get(Projection projection, System.Decimal apiManufacturerIdAudit)
		{
			return ((IRepository<ApiManufacturersAudit>)this).Get(projection, apiManufacturerIdAudit, FetchMode.UseIdentityMap);
		}

		public ApiManufacturersAudit Get(Projection projection, System.Decimal apiManufacturerIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiManufacturersAudit>)this).Get(projection, apiManufacturerIdAudit, fetchMode);
		}

		public ApiManufacturersAudit Get(string projectionName, System.Decimal apiManufacturerIdAudit, params string[] fields)
		{
			return ((IRepository<ApiManufacturersAudit>)this).Get(projectionName, apiManufacturerIdAudit, fields);
		}

		public ApiManufacturersAudit Get(Projection projection, System.Decimal apiManufacturerIdAudit, params string[] fields)
		{
			return ((IRepository<ApiManufacturersAudit>)this).Get(projection, apiManufacturerIdAudit, fields);
		}

		public bool Delete(System.Decimal apiManufacturerIdAudit)
		{
			var entity = new ApiManufacturersAudit { ApiManufacturerIdAudit = apiManufacturerIdAudit };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ApiManufacturersAuditFields
	{
		public const string ApiManufacturerIdAudit = "ApiManufacturerIdAudit";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string ManufacturerId = "ManufacturerId";
		public const string ChangedBy = "ChangedBy";
		public const string Changed = "Changed";
		public const string ChangeType = "ChangeType";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ItemId = "ItemId";
		public const string ChangedByName = "ChangedByName";
		public const string ItemDescription = "ItemDescription";
		public const string SubstanceName = "SubstanceName";
		public const string ManufacturerName = "ManufacturerName";
		public const string Creator = "Creator";
		public const string Modificator = "Modificator";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_MP_DMFCEPS")]
	public partial class DossierMpDmfcep
	{
		private Decimal _dossierMpDmfcepId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_MP_DMFCEP_ID", ColumnName ="DOSSIER_MP_DMFCEP_ID", BaseColumnName ="DOSSIER_MP_DMFCEP_ID", BaseTableName = "DOSSIER_MP_DMFCEPS" )]		public Decimal DossierMpDmfcepId 
		{ 
		    get { return _dossierMpDmfcepId; } 
			set 
			{
			    _dossierMpDmfcepId = value;
			}
        }

		private Decimal _dmfcepVersionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DMFCEP_VERSION_ID", BaseColumnName ="DMFCEP_VERSION_ID", BaseTableName = "DOSSIER_MP_DMFCEPS" )]		public Decimal DmfcepVersionId 
		{ 
		    get { return _dmfcepVersionId; } 
			set 
			{
			    _dmfcepVersionId = value;
			}
        }

		private String _isInForce;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_IN_FORCE", BaseColumnName ="IS_IN_FORCE", BaseTableName = "DOSSIER_MP_DMFCEPS" )]		public String IsInForce 
		{ 
		    get { return _isInForce; } 
			set 
			{
			    _isInForce = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_MP_DMFCEPS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_MP_DMFCEPS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_MP_DMFCEPS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_MP_DMFCEPS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MP_DOSSIER_ID", BaseColumnName ="MP_DOSSIER_ID", BaseTableName = "DOSSIER_MP_DMFCEPS" )]		public Decimal? MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private Decimal _apiManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="API_MANUFACTURER_ID" )]		public Decimal ApiManufacturerId 
		{ 
		    get { return _apiManufacturerId; } 
			set 
			{
			    _apiManufacturerId = value;
			}
        }

		private String _dmfcepType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="DMFCEP_TYPE" )]		public String DmfcepType 
		{ 
		    get { return _dmfcepType; } 
			set 
			{
			    _dmfcepType = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _version;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION" )]		public String Version 
		{ 
		    get { return _version; } 
			set 
			{
			    _version = value;
			}
        }

		private DateTime? _versionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VERSION_DATE" )]		public DateTime? VersionDate 
		{ 
		    get { return _versionDate; } 
			set 
			{
			    _versionDate = value;
			}
        }

		private String _isAdded;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="IS_ADDED" )]		public String IsAdded 
		{ 
		    get { return _isAdded; } 
			set 
			{
			    _isAdded = value;
			}
        }

		private Decimal? _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_ID" )]		public Decimal? DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }


	}

	public partial class DossierMpDmfcepRepository : Repository<DossierMpDmfcep> 
	{
		public DossierMpDmfcepRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierMpDmfcep Get(string projectionName, System.Decimal dossierMpDmfcepId)
		{
			return ((IRepository<DossierMpDmfcep>)this).Get(projectionName, dossierMpDmfcepId, FetchMode.UseIdentityMap);
		}

		public DossierMpDmfcep Get(string projectionName, System.Decimal dossierMpDmfcepId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpDmfcep>)this).Get(projectionName, dossierMpDmfcepId, fetchMode);
		}

		public DossierMpDmfcep Get(Projection projection, System.Decimal dossierMpDmfcepId)
		{
			return ((IRepository<DossierMpDmfcep>)this).Get(projection, dossierMpDmfcepId, FetchMode.UseIdentityMap);
		}

		public DossierMpDmfcep Get(Projection projection, System.Decimal dossierMpDmfcepId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpDmfcep>)this).Get(projection, dossierMpDmfcepId, fetchMode);
		}

		public DossierMpDmfcep Get(string projectionName, System.Decimal dossierMpDmfcepId, params string[] fields)
		{
			return ((IRepository<DossierMpDmfcep>)this).Get(projectionName, dossierMpDmfcepId, fields);
		}

		public DossierMpDmfcep Get(Projection projection, System.Decimal dossierMpDmfcepId, params string[] fields)
		{
			return ((IRepository<DossierMpDmfcep>)this).Get(projection, dossierMpDmfcepId, fields);
		}

		public bool Delete(System.Decimal dossierMpDmfcepId)
		{
			var entity = new DossierMpDmfcep { DossierMpDmfcepId = dossierMpDmfcepId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierMpDmfcepFields
	{
		public const string DossierMpDmfcepId = "DossierMpDmfcepId";
		public const string DmfcepVersionId = "DmfcepVersionId";
		public const string IsInForce = "IsInForce";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string MpDossierId = "MpDossierId";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string ApiManufacturerId = "ApiManufacturerId";
		public const string DmfcepType = "DmfcepType";
		public const string ManufacturerName = "ManufacturerName";
		public const string SubstanceName = "SubstanceName";
		public const string Version = "Version";
		public const string VersionDate = "VersionDate";
		public const string IsAdded = "IsAdded";
		public const string DossierId = "DossierId";
		public const string MedicinalProductId = "MedicinalProductId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="API_PACKAGING_MATERIAL_AUDIT")]
	public partial class ApiPkgMaterialAudit
	{
		private Decimal _apiPackMaterialIdAudit;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "API_PACK_MATERIAL_ID_AUDIT", ColumnName ="API_PACK_MATERIAL_ID_AUDIT", BaseColumnName ="API_PACK_MATERIAL_ID_AUDIT", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public Decimal ApiPackMaterialIdAudit 
		{ 
		    get { return _apiPackMaterialIdAudit; } 
			set 
			{
			    _apiPackMaterialIdAudit = value;
			}
        }

		private Decimal _dmfcepVersionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DMFCEP_VERSION_ID", BaseColumnName ="DMFCEP_VERSION_ID", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public Decimal DmfcepVersionId 
		{ 
		    get { return _dmfcepVersionId; } 
			set 
			{
			    _dmfcepVersionId = value;
			}
        }

		private Decimal? _changedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CHANGED_BY", BaseColumnName ="CHANGED_BY", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public Decimal? ChangedBy 
		{ 
		    get { return _changedBy; } 
			set 
			{
			    _changedBy = value;
			}
        }

		private DateTime? _changed;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CHANGED", BaseColumnName ="CHANGED", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public DateTime? Changed 
		{ 
		    get { return _changed; } 
			set 
			{
			    _changed = value;
			}
        }

		private String _changeType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CHANGE_TYPE", BaseColumnName ="CHANGE_TYPE", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public String ChangeType 
		{ 
		    get { return _changeType; } 
			set 
			{
			    _changeType = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private Decimal? _retest;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RETEST", BaseColumnName ="RETEST", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public Decimal? Retest 
		{ 
		    get { return _retest; } 
			set 
			{
			    _retest = value;
			}
        }

		private String _retestMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="RETEST_MEASUREMENT", BaseColumnName ="RETEST_MEASUREMENT", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public String RetestMeasurement 
		{ 
		    get { return _retestMeasurement; } 
			set 
			{
			    _retestMeasurement = value;
			}
        }

		private Decimal? _shelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SHELF_LIFE", BaseColumnName ="SHELF_LIFE", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public Decimal? ShelfLife 
		{ 
		    get { return _shelfLife; } 
			set 
			{
			    _shelfLife = value;
			}
        }

		private String _shelfLifeMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="SHELF_LIFE_MEASUREMENT", BaseColumnName ="SHELF_LIFE_MEASUREMENT", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public String ShelfLifeMeasurement 
		{ 
		    get { return _shelfLifeMeasurement; } 
			set 
			{
			    _shelfLifeMeasurement = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _hasRetest;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_RETEST", BaseColumnName ="HAS_RETEST", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public String HasRetest 
		{ 
		    get { return _hasRetest; } 
			set 
			{
			    _hasRetest = value;
			}
        }

		private String _hasShelfLife;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_SHELF_LIFE", BaseColumnName ="HAS_SHELF_LIFE", BaseTableName = "API_PACKAGING_MATERIAL_AUDIT" )]		public String HasShelfLife 
		{ 
		    get { return _hasShelfLife; } 
			set 
			{
			    _hasShelfLife = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private String _changedByName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CHANGED_BY_NAME" )]		public String ChangedByName 
		{ 
		    get { return _changedByName; } 
			set 
			{
			    _changedByName = value;
			}
        }

		private String _itemDescription;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ITEM_DESCRIPTION" )]		public String ItemDescription 
		{ 
		    get { return _itemDescription; } 
			set 
			{
			    _itemDescription = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private String _creator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR" )]		public String Creator 
		{ 
		    get { return _creator; } 
			set 
			{
			    _creator = value;
			}
        }

		private String _modificator;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR" )]		public String Modificator 
		{ 
		    get { return _modificator; } 
			set 
			{
			    _modificator = value;
			}
        }


	}

	public partial class ApiPkgMaterialAuditRepository : Repository<ApiPkgMaterialAudit> 
	{
		public ApiPkgMaterialAuditRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ApiPkgMaterialAudit Get(string projectionName, System.Decimal apiPackMaterialIdAudit)
		{
			return ((IRepository<ApiPkgMaterialAudit>)this).Get(projectionName, apiPackMaterialIdAudit, FetchMode.UseIdentityMap);
		}

		public ApiPkgMaterialAudit Get(string projectionName, System.Decimal apiPackMaterialIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiPkgMaterialAudit>)this).Get(projectionName, apiPackMaterialIdAudit, fetchMode);
		}

		public ApiPkgMaterialAudit Get(Projection projection, System.Decimal apiPackMaterialIdAudit)
		{
			return ((IRepository<ApiPkgMaterialAudit>)this).Get(projection, apiPackMaterialIdAudit, FetchMode.UseIdentityMap);
		}

		public ApiPkgMaterialAudit Get(Projection projection, System.Decimal apiPackMaterialIdAudit, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiPkgMaterialAudit>)this).Get(projection, apiPackMaterialIdAudit, fetchMode);
		}

		public ApiPkgMaterialAudit Get(string projectionName, System.Decimal apiPackMaterialIdAudit, params string[] fields)
		{
			return ((IRepository<ApiPkgMaterialAudit>)this).Get(projectionName, apiPackMaterialIdAudit, fields);
		}

		public ApiPkgMaterialAudit Get(Projection projection, System.Decimal apiPackMaterialIdAudit, params string[] fields)
		{
			return ((IRepository<ApiPkgMaterialAudit>)this).Get(projection, apiPackMaterialIdAudit, fields);
		}

		public bool Delete(System.Decimal apiPackMaterialIdAudit)
		{
			var entity = new ApiPkgMaterialAudit { ApiPackMaterialIdAudit = apiPackMaterialIdAudit };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ApiPkgMaterialAuditFields
	{
		public const string ApiPackMaterialIdAudit = "ApiPackMaterialIdAudit";
		public const string DmfcepVersionId = "DmfcepVersionId";
		public const string ChangedBy = "ChangedBy";
		public const string Changed = "Changed";
		public const string ChangeType = "ChangeType";
		public const string Name = "Name";
		public const string Retest = "Retest";
		public const string RetestMeasurement = "RetestMeasurement";
		public const string ShelfLife = "ShelfLife";
		public const string ShelfLifeMeasurement = "ShelfLifeMeasurement";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string HasRetest = "HasRetest";
		public const string HasShelfLife = "HasShelfLife";
		public const string ItemId = "ItemId";
		public const string ChangedByName = "ChangedByName";
		public const string ItemDescription = "ItemDescription";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string Creator = "Creator";
		public const string Modificator = "Modificator";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_MP_DMFCEPMATS")]
	public partial class DossierMpDmfcepmat
	{
		private Decimal _dossierMpDmfcepmatId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_MP_DMFCEPMAT_ID", ColumnName ="DOSSIER_MP_DMFCEPMAT_ID", BaseColumnName ="DOSSIER_MP_DMFCEPMAT_ID", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public Decimal DossierMpDmfcepmatId 
		{ 
		    get { return _dossierMpDmfcepmatId; } 
			set 
			{
			    _dossierMpDmfcepmatId = value;
			}
        }

		private Decimal _dmfcepVersionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DMFCEP_VERSION_ID", BaseColumnName ="DMFCEP_VERSION_ID", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public Decimal DmfcepVersionId 
		{ 
		    get { return _dmfcepVersionId; } 
			set 
			{
			    _dmfcepVersionId = value;
			}
        }

		private Decimal _apiPackagingMaterialId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="API_PACKAGING_MATERIAL_ID", BaseColumnName ="API_PACKAGING_MATERIAL_ID", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public Decimal ApiPackagingMaterialId 
		{ 
		    get { return _apiPackagingMaterialId; } 
			set 
			{
			    _apiPackagingMaterialId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private Decimal? _retest;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RETEST", BaseColumnName ="RETEST", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public Decimal? Retest 
		{ 
		    get { return _retest; } 
			set 
			{
			    _retest = value;
			}
        }

		private String _retestMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="RETEST_MEASUREMENT", BaseColumnName ="RETEST_MEASUREMENT", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public String RetestMeasurement 
		{ 
		    get { return _retestMeasurement; } 
			set 
			{
			    _retestMeasurement = value;
			}
        }

		private Decimal? _shelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SHELF_LIFE", BaseColumnName ="SHELF_LIFE", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public Decimal? ShelfLife 
		{ 
		    get { return _shelfLife; } 
			set 
			{
			    _shelfLife = value;
			}
        }

		private String _shelfLifeMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="SHELF_LIFE_MEASUREMENT", BaseColumnName ="SHELF_LIFE_MEASUREMENT", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public String ShelfLifeMeasurement 
		{ 
		    get { return _shelfLifeMeasurement; } 
			set 
			{
			    _shelfLifeMeasurement = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isAnalysisPrior;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ANALYSIS_PRIOR", BaseColumnName ="IS_ANALYSIS_PRIOR", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public String IsAnalysisPrior 
		{ 
		    get { return _isAnalysisPrior; } 
			set 
			{
			    _isAnalysisPrior = value;
			}
        }

		private String _hasRetest;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_RETEST", BaseColumnName ="HAS_RETEST", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public String HasRetest 
		{ 
		    get { return _hasRetest; } 
			set 
			{
			    _hasRetest = value;
			}
        }

		private String _hasShelfLife;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_SHELF_LIFE", BaseColumnName ="HAS_SHELF_LIFE", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public String HasShelfLife 
		{ 
		    get { return _hasShelfLife; } 
			set 
			{
			    _hasShelfLife = value;
			}
        }

		private Decimal _dossierMpDmfcepId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_MP_DMFCEP_ID", BaseColumnName ="DOSSIER_MP_DMFCEP_ID", BaseTableName = "DOSSIER_MP_DMFCEPMATS" )]		public Decimal DossierMpDmfcepId 
		{ 
		    get { return _dossierMpDmfcepId; } 
			set 
			{
			    _dossierMpDmfcepId = value;
			}
        }

		private Decimal? _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal? ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private Decimal? _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_ID" )]		public Decimal? DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private Decimal? _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MP_DOSSIER_ID" )]		public Decimal? MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }


	}

	public partial class DossierMpDmfcepmatRepository : Repository<DossierMpDmfcepmat> 
	{
		public DossierMpDmfcepmatRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierMpDmfcepmat Get(string projectionName, System.Decimal dossierMpDmfcepmatId)
		{
			return ((IRepository<DossierMpDmfcepmat>)this).Get(projectionName, dossierMpDmfcepmatId, FetchMode.UseIdentityMap);
		}

		public DossierMpDmfcepmat Get(string projectionName, System.Decimal dossierMpDmfcepmatId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpDmfcepmat>)this).Get(projectionName, dossierMpDmfcepmatId, fetchMode);
		}

		public DossierMpDmfcepmat Get(Projection projection, System.Decimal dossierMpDmfcepmatId)
		{
			return ((IRepository<DossierMpDmfcepmat>)this).Get(projection, dossierMpDmfcepmatId, FetchMode.UseIdentityMap);
		}

		public DossierMpDmfcepmat Get(Projection projection, System.Decimal dossierMpDmfcepmatId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierMpDmfcepmat>)this).Get(projection, dossierMpDmfcepmatId, fetchMode);
		}

		public DossierMpDmfcepmat Get(string projectionName, System.Decimal dossierMpDmfcepmatId, params string[] fields)
		{
			return ((IRepository<DossierMpDmfcepmat>)this).Get(projectionName, dossierMpDmfcepmatId, fields);
		}

		public DossierMpDmfcepmat Get(Projection projection, System.Decimal dossierMpDmfcepmatId, params string[] fields)
		{
			return ((IRepository<DossierMpDmfcepmat>)this).Get(projection, dossierMpDmfcepmatId, fields);
		}

		public bool Delete(System.Decimal dossierMpDmfcepmatId)
		{
			var entity = new DossierMpDmfcepmat { DossierMpDmfcepmatId = dossierMpDmfcepmatId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierMpDmfcepmatFields
	{
		public const string DossierMpDmfcepmatId = "DossierMpDmfcepmatId";
		public const string DmfcepVersionId = "DmfcepVersionId";
		public const string ApiPackagingMaterialId = "ApiPackagingMaterialId";
		public const string Name = "Name";
		public const string Retest = "Retest";
		public const string RetestMeasurement = "RetestMeasurement";
		public const string ShelfLife = "ShelfLife";
		public const string ShelfLifeMeasurement = "ShelfLifeMeasurement";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsAnalysisPrior = "IsAnalysisPrior";
		public const string HasRetest = "HasRetest";
		public const string HasShelfLife = "HasShelfLife";
		public const string DossierMpDmfcepId = "DossierMpDmfcepId";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string DossierId = "DossierId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string MpDossierId = "MpDossierId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="API_MANUFACTURER_ROSS")]
	public partial class ApiManufacturerRoss
	{
		private Decimal _apiManufacturerRossId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "API_MANUFACTURER_ROSS_ID", ColumnName ="API_MANUFACTURER_ROSS_ID", BaseColumnName ="API_MANUFACTURER_ROSS_ID", BaseTableName = "API_MANUFACTURER_ROSS" )]		public Decimal ApiManufacturerRossId 
		{ 
		    get { return _apiManufacturerRossId; } 
			set 
			{
			    _apiManufacturerRossId = value;
			}
        }

		private Decimal _apiManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="API_MANUFACTURER_ID", BaseColumnName ="API_MANUFACTURER_ID", BaseTableName = "API_MANUFACTURER_ROSS" )]		public Decimal ApiManufacturerId 
		{ 
		    get { return _apiManufacturerId; } 
			set 
			{
			    _apiManufacturerId = value;
			}
        }

		private String _rossCode;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ROSS_CODE", BaseColumnName ="ROSS_CODE", BaseTableName = "API_MANUFACTURER_ROSS" )]		public String RossCode 
		{ 
		    get { return _rossCode; } 
			set 
			{
			    _rossCode = value;
			}
        }

		private String _rossCodeComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ROSS_CODE_COMMENTS", BaseColumnName ="ROSS_CODE_COMMENTS", BaseTableName = "API_MANUFACTURER_ROSS" )]		public String RossCodeComments 
		{ 
		    get { return _rossCodeComments; } 
			set 
			{
			    _rossCodeComments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "API_MANUFACTURER_ROSS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "API_MANUFACTURER_ROSS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "API_MANUFACTURER_ROSS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "API_MANUFACTURER_ROSS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_ID" )]		public Decimal ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }


	}

	public partial class ApiManufacturerRossRepository : Repository<ApiManufacturerRoss> 
	{
		public ApiManufacturerRossRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ApiManufacturerRoss Get(string projectionName, System.Decimal apiManufacturerRossId)
		{
			return ((IRepository<ApiManufacturerRoss>)this).Get(projectionName, apiManufacturerRossId, FetchMode.UseIdentityMap);
		}

		public ApiManufacturerRoss Get(string projectionName, System.Decimal apiManufacturerRossId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiManufacturerRoss>)this).Get(projectionName, apiManufacturerRossId, fetchMode);
		}

		public ApiManufacturerRoss Get(Projection projection, System.Decimal apiManufacturerRossId)
		{
			return ((IRepository<ApiManufacturerRoss>)this).Get(projection, apiManufacturerRossId, FetchMode.UseIdentityMap);
		}

		public ApiManufacturerRoss Get(Projection projection, System.Decimal apiManufacturerRossId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiManufacturerRoss>)this).Get(projection, apiManufacturerRossId, fetchMode);
		}

		public ApiManufacturerRoss Get(string projectionName, System.Decimal apiManufacturerRossId, params string[] fields)
		{
			return ((IRepository<ApiManufacturerRoss>)this).Get(projectionName, apiManufacturerRossId, fields);
		}

		public ApiManufacturerRoss Get(Projection projection, System.Decimal apiManufacturerRossId, params string[] fields)
		{
			return ((IRepository<ApiManufacturerRoss>)this).Get(projection, apiManufacturerRossId, fields);
		}

		public bool Delete(System.Decimal apiManufacturerRossId)
		{
			var entity = new ApiManufacturerRoss { ApiManufacturerRossId = apiManufacturerRossId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ApiManufacturerRossFields
	{
		public const string ApiManufacturerRossId = "ApiManufacturerRossId";
		public const string ApiManufacturerId = "ApiManufacturerId";
		public const string RossCode = "RossCode";
		public const string RossCodeComments = "RossCodeComments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ManufacturerId = "ManufacturerId";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="CURRENCIES")]
	public partial class Currency
	{
		private Decimal _currencyId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "CURRENCY_ID", ColumnName ="CURRENCY_ID", BaseColumnName ="CURRENCY_ID", BaseTableName = "CURRENCIES" )]		public Decimal CurrencyId 
		{ 
		    get { return _currencyId; } 
			set 
			{
			    _currencyId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "CURRENCIES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _code;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CODE", BaseColumnName ="CODE", BaseTableName = "CURRENCIES" )]		public String Code 
		{ 
		    get { return _code; } 
			set 
			{
			    _code = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "CURRENCIES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "CURRENCIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "CURRENCIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "CURRENCIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "CURRENCIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class CurrencyRepository : Repository<Currency> 
	{
		public CurrencyRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Currency Get(string projectionName, System.Decimal currencyId)
		{
			return ((IRepository<Currency>)this).Get(projectionName, currencyId, FetchMode.UseIdentityMap);
		}

		public Currency Get(string projectionName, System.Decimal currencyId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Currency>)this).Get(projectionName, currencyId, fetchMode);
		}

		public Currency Get(Projection projection, System.Decimal currencyId)
		{
			return ((IRepository<Currency>)this).Get(projection, currencyId, FetchMode.UseIdentityMap);
		}

		public Currency Get(Projection projection, System.Decimal currencyId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Currency>)this).Get(projection, currencyId, fetchMode);
		}

		public Currency Get(string projectionName, System.Decimal currencyId, params string[] fields)
		{
			return ((IRepository<Currency>)this).Get(projectionName, currencyId, fields);
		}

		public Currency Get(Projection projection, System.Decimal currencyId, params string[] fields)
		{
			return ((IRepository<Currency>)this).Get(projection, currencyId, fields);
		}

		public bool Delete(System.Decimal currencyId)
		{
			var entity = new Currency { CurrencyId = currencyId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class CurrencyFields
	{
		public const string CurrencyId = "CurrencyId";
		public const string Name = "Name";
		public const string Code = "Code";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_LOCALS")]
	public partial class DossierCountryLocal
	{
		private Decimal _dossierCountryLocalId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_LOCAL_ID", ColumnName ="DOSSIER_COUNTRY_LOCAL_ID", BaseColumnName ="DOSSIER_COUNTRY_LOCAL_ID", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public Decimal DossierCountryLocalId 
		{ 
		    get { return _dossierCountryLocalId; } 
			set 
			{
			    _dossierCountryLocalId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _languageCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LANGUAGE_CODE", BaseColumnName ="LANGUAGE_CODE", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String LanguageCode 
		{ 
		    get { return _languageCode; } 
			set 
			{
			    _languageCode = value;
			}
        }

		private String _productCommonName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PRODUCT_COMMON_NAME", BaseColumnName ="PRODUCT_COMMON_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String ProductCommonName 
		{ 
		    get { return _productCommonName; } 
			set 
			{
			    _productCommonName = value;
			}
        }

		private String _productCompanyName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PRODUCT_COMPANY_NAME", BaseColumnName ="PRODUCT_COMPANY_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String ProductCompanyName 
		{ 
		    get { return _productCompanyName; } 
			set 
			{
			    _productCompanyName = value;
			}
        }

		private String _productFormName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PRODUCT_FORM_NAME", BaseColumnName ="PRODUCT_FORM_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String ProductFormName 
		{ 
		    get { return _productFormName; } 
			set 
			{
			    _productFormName = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PRODUCT_NAME", BaseColumnName ="PRODUCT_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _productShortName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PRODUCT_SHORT_NAME", BaseColumnName ="PRODUCT_SHORT_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String ProductShortName 
		{ 
		    get { return _productShortName; } 
			set 
			{
			    _productShortName = value;
			}
        }

		private String _productStrengthName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PRODUCT_STRENGTH_NAME", BaseColumnName ="PRODUCT_STRENGTH_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String ProductStrengthName 
		{ 
		    get { return _productStrengthName; } 
			set 
			{
			    _productStrengthName = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isNaCommonName;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_COMMON_NAME", BaseColumnName ="IS_NA_COMMON_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String IsNaCommonName 
		{ 
		    get { return _isNaCommonName; } 
			set 
			{
			    _isNaCommonName = value;
			}
        }

		private String _isNaCompanyName;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_COMPANY_NAME", BaseColumnName ="IS_NA_COMPANY_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String IsNaCompanyName 
		{ 
		    get { return _isNaCompanyName; } 
			set 
			{
			    _isNaCompanyName = value;
			}
        }

		private String _isNaFormName;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_FORM_NAME", BaseColumnName ="IS_NA_FORM_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String IsNaFormName 
		{ 
		    get { return _isNaFormName; } 
			set 
			{
			    _isNaFormName = value;
			}
        }

		private String _isNaStrengthName;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_STRENGTH_NAME", BaseColumnName ="IS_NA_STRENGTH_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String IsNaStrengthName 
		{ 
		    get { return _isNaStrengthName; } 
			set 
			{
			    _isNaStrengthName = value;
			}
        }

		private String _isNaShortName;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SHORT_NAME", BaseColumnName ="IS_NA_SHORT_NAME", BaseTableName = "DOSSIER_COUNTRY_LOCALS" )]		public String IsNaShortName 
		{ 
		    get { return _isNaShortName; } 
			set 
			{
			    _isNaShortName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }


	}

	public partial class DossierCountryLocalRepository : Repository<DossierCountryLocal> 
	{
		public DossierCountryLocalRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryLocal Get(string projectionName, System.Decimal dossierCountryLocalId)
		{
			return ((IRepository<DossierCountryLocal>)this).Get(projectionName, dossierCountryLocalId, FetchMode.UseIdentityMap);
		}

		public DossierCountryLocal Get(string projectionName, System.Decimal dossierCountryLocalId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryLocal>)this).Get(projectionName, dossierCountryLocalId, fetchMode);
		}

		public DossierCountryLocal Get(Projection projection, System.Decimal dossierCountryLocalId)
		{
			return ((IRepository<DossierCountryLocal>)this).Get(projection, dossierCountryLocalId, FetchMode.UseIdentityMap);
		}

		public DossierCountryLocal Get(Projection projection, System.Decimal dossierCountryLocalId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryLocal>)this).Get(projection, dossierCountryLocalId, fetchMode);
		}

		public DossierCountryLocal Get(string projectionName, System.Decimal dossierCountryLocalId, params string[] fields)
		{
			return ((IRepository<DossierCountryLocal>)this).Get(projectionName, dossierCountryLocalId, fields);
		}

		public DossierCountryLocal Get(Projection projection, System.Decimal dossierCountryLocalId, params string[] fields)
		{
			return ((IRepository<DossierCountryLocal>)this).Get(projection, dossierCountryLocalId, fields);
		}

		public bool Delete(System.Decimal dossierCountryLocalId)
		{
			var entity = new DossierCountryLocal { DossierCountryLocalId = dossierCountryLocalId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryLocalFields
	{
		public const string DossierCountryLocalId = "DossierCountryLocalId";
		public const string DossierCountryId = "DossierCountryId";
		public const string LanguageCode = "LanguageCode";
		public const string ProductCommonName = "ProductCommonName";
		public const string ProductCompanyName = "ProductCompanyName";
		public const string ProductFormName = "ProductFormName";
		public const string ProductName = "ProductName";
		public const string ProductShortName = "ProductShortName";
		public const string ProductStrengthName = "ProductStrengthName";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsNaCommonName = "IsNaCommonName";
		public const string IsNaCompanyName = "IsNaCompanyName";
		public const string IsNaFormName = "IsNaFormName";
		public const string IsNaStrengthName = "IsNaStrengthName";
		public const string IsNaShortName = "IsNaShortName";
		public const string DossierId = "DossierId";
		public const string CountryId = "CountryId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_PRICINGS")]
	public partial class DossierCountryPricing
	{
		private Decimal _dossierCountryPricingId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_PRICING_ID", ColumnName ="DOSSIER_COUNTRY_PRICING_ID", BaseColumnName ="DOSSIER_COUNTRY_PRICING_ID", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public Decimal DossierCountryPricingId 
		{ 
		    get { return _dossierCountryPricingId; } 
			set 
			{
			    _dossierCountryPricingId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private DateTime? _reimbursementAppDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REIMBURSEMENT_APP_DATE", BaseColumnName ="REIMBURSEMENT_APP_DATE", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public DateTime? ReimbursementAppDate 
		{ 
		    get { return _reimbursementAppDate; } 
			set 
			{
			    _reimbursementAppDate = value;
			}
        }

		private DateTime? _reimbursementProposalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REIMBURSEMENT_PROPOSAL_DATE", BaseColumnName ="REIMBURSEMENT_PROPOSAL_DATE", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public DateTime? ReimbursementProposalDate 
		{ 
		    get { return _reimbursementProposalDate; } 
			set 
			{
			    _reimbursementProposalDate = value;
			}
        }

		private DateTime? _reimbursementAcceptanceDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REIMBURSEMENT_ACCEPTANCE_DATE", BaseColumnName ="REIMBURSEMENT_ACCEPTANCE_DATE", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public DateTime? ReimbursementAcceptanceDate 
		{ 
		    get { return _reimbursementAcceptanceDate; } 
			set 
			{
			    _reimbursementAcceptanceDate = value;
			}
        }

		private DateTime? _reimbursementFinalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REIMBURSEMENT_FINAL_DATE", BaseColumnName ="REIMBURSEMENT_FINAL_DATE", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public DateTime? ReimbursementFinalDate 
		{ 
		    get { return _reimbursementFinalDate; } 
			set 
			{
			    _reimbursementFinalDate = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private String _isNaProposalDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_PROPOSAL_DATE", BaseColumnName ="IS_NA_PROPOSAL_DATE", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public String IsNaProposalDate 
		{ 
		    get { return _isNaProposalDate; } 
			set 
			{
			    _isNaProposalDate = value;
			}
        }

		private String _isNaAcceptanceDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_ACCEPTANCE_DATE", BaseColumnName ="IS_NA_ACCEPTANCE_DATE", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public String IsNaAcceptanceDate 
		{ 
		    get { return _isNaAcceptanceDate; } 
			set 
			{
			    _isNaAcceptanceDate = value;
			}
        }

		private String _isNaFinalDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_FINAL_DATE", BaseColumnName ="IS_NA_FINAL_DATE", BaseTableName = "DOSSIER_COUNTRY_PRICINGS" )]		public String IsNaFinalDate 
		{ 
		    get { return _isNaFinalDate; } 
			set 
			{
			    _isNaFinalDate = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }


	}

	public partial class DossierCountryPricingRepository : Repository<DossierCountryPricing> 
	{
		public DossierCountryPricingRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryPricing Get(string projectionName, System.Decimal dossierCountryPricingId)
		{
			return ((IRepository<DossierCountryPricing>)this).Get(projectionName, dossierCountryPricingId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPricing Get(string projectionName, System.Decimal dossierCountryPricingId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPricing>)this).Get(projectionName, dossierCountryPricingId, fetchMode);
		}

		public DossierCountryPricing Get(Projection projection, System.Decimal dossierCountryPricingId)
		{
			return ((IRepository<DossierCountryPricing>)this).Get(projection, dossierCountryPricingId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPricing Get(Projection projection, System.Decimal dossierCountryPricingId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPricing>)this).Get(projection, dossierCountryPricingId, fetchMode);
		}

		public DossierCountryPricing Get(string projectionName, System.Decimal dossierCountryPricingId, params string[] fields)
		{
			return ((IRepository<DossierCountryPricing>)this).Get(projectionName, dossierCountryPricingId, fields);
		}

		public DossierCountryPricing Get(Projection projection, System.Decimal dossierCountryPricingId, params string[] fields)
		{
			return ((IRepository<DossierCountryPricing>)this).Get(projection, dossierCountryPricingId, fields);
		}

		public bool Delete(System.Decimal dossierCountryPricingId)
		{
			var entity = new DossierCountryPricing { DossierCountryPricingId = dossierCountryPricingId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryPricingFields
	{
		public const string DossierCountryPricingId = "DossierCountryPricingId";
		public const string DossierCountryId = "DossierCountryId";
		public const string ReimbursementAppDate = "ReimbursementAppDate";
		public const string ReimbursementProposalDate = "ReimbursementProposalDate";
		public const string ReimbursementAcceptanceDate = "ReimbursementAcceptanceDate";
		public const string ReimbursementFinalDate = "ReimbursementFinalDate";
		public const string Comments = "Comments";
		public const string IsNaProposalDate = "IsNaProposalDate";
		public const string IsNaAcceptanceDate = "IsNaAcceptanceDate";
		public const string IsNaFinalDate = "IsNaFinalDate";
		public const string CountryId = "CountryId";
		public const string DossierId = "DossierId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_PRESENTATIONS")]
	public partial class DossierCountryPresentation
	{
		private Decimal _dossierCountryPresId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_PRES_ID", ColumnName ="DOSSIER_COUNTRY_PRES_ID", BaseColumnName ="DOSSIER_COUNTRY_PRES_ID", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public Decimal DossierCountryPresId 
		{ 
		    get { return _dossierCountryPresId; } 
			set 
			{
			    _dossierCountryPresId = value;
			}
        }

		private Decimal? _atReleaseShelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="AT_RELEASE_SHELF_LIFE", BaseColumnName ="AT_RELEASE_SHELF_LIFE", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public Decimal? AtReleaseShelfLife 
		{ 
		    get { return _atReleaseShelfLife; } 
			set 
			{
			    _atReleaseShelfLife = value;
			}
        }

		private String _atReleaseMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="AT_RELEASE_MEASUREMENT", BaseColumnName ="AT_RELEASE_MEASUREMENT", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String AtReleaseMeasurement 
		{ 
		    get { return _atReleaseMeasurement; } 
			set 
			{
			    _atReleaseMeasurement = value;
			}
        }

		private String _atReleaseStorageConditions;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="AT_RELEASE_STORAGE_CONDITIONS", BaseColumnName ="AT_RELEASE_STORAGE_CONDITIONS", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String AtReleaseStorageConditions 
		{ 
		    get { return _atReleaseStorageConditions; } 
			set 
			{
			    _atReleaseStorageConditions = value;
			}
        }

		private Decimal? _openingShelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OPENING_SHELF_LIFE", BaseColumnName ="OPENING_SHELF_LIFE", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public Decimal? OpeningShelfLife 
		{ 
		    get { return _openingShelfLife; } 
			set 
			{
			    _openingShelfLife = value;
			}
        }

		private String _openingMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="OPENING_MEASUREMENT", BaseColumnName ="OPENING_MEASUREMENT", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String OpeningMeasurement 
		{ 
		    get { return _openingMeasurement; } 
			set 
			{
			    _openingMeasurement = value;
			}
        }

		private String _openingStorageConditions;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="OPENING_STORAGE_CONDITIONS", BaseColumnName ="OPENING_STORAGE_CONDITIONS", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String OpeningStorageConditions 
		{ 
		    get { return _openingStorageConditions; } 
			set 
			{
			    _openingStorageConditions = value;
			}
        }

		private Decimal? _reconsShelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RECONS_SHELF_LIFE", BaseColumnName ="RECONS_SHELF_LIFE", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public Decimal? ReconsShelfLife 
		{ 
		    get { return _reconsShelfLife; } 
			set 
			{
			    _reconsShelfLife = value;
			}
        }

		private String _reconsMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="RECONS_MEASUREMENT", BaseColumnName ="RECONS_MEASUREMENT", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String ReconsMeasurement 
		{ 
		    get { return _reconsMeasurement; } 
			set 
			{
			    _reconsMeasurement = value;
			}
        }

		private String _reconsStorageConditions;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="RECONS_STORAGE_CONDITIONS", BaseColumnName ="RECONS_STORAGE_CONDITIONS", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String ReconsStorageConditions 
		{ 
		    get { return _reconsStorageConditions; } 
			set 
			{
			    _reconsStorageConditions = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _atReleaseStorageNames;
		[DataMember]
		[SqlField(DbType.String, 1024, ColumnName ="AT_RELEASE_STORAGE_NAMES", BaseColumnName ="AT_RELEASE_STORAGE_NAMES", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String AtReleaseStorageNames 
		{ 
		    get { return _atReleaseStorageNames; } 
			set 
			{
			    _atReleaseStorageNames = value;
			}
        }

		private String _hasAtRelease;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_AT_RELEASE", BaseColumnName ="HAS_AT_RELEASE", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String HasAtRelease 
		{ 
		    get { return _hasAtRelease; } 
			set 
			{
			    _hasAtRelease = value;
			}
        }

		private String _hasOpening;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_OPENING", BaseColumnName ="HAS_OPENING", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String HasOpening 
		{ 
		    get { return _hasOpening; } 
			set 
			{
			    _hasOpening = value;
			}
        }

		private String _hasRecons;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_RECONS", BaseColumnName ="HAS_RECONS", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String HasRecons 
		{ 
		    get { return _hasRecons; } 
			set 
			{
			    _hasRecons = value;
			}
        }

		private String _presentationName;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="PRESENTATION_NAME", BaseColumnName ="PRESENTATION_NAME", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String PresentationName 
		{ 
		    get { return _presentationName; } 
			set 
			{
			    _presentationName = value;
			}
        }

		private String _nationalCodeNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NATIONAL_CODE_NUMBER", BaseColumnName ="NATIONAL_CODE_NUMBER", BaseTableName = "DOSSIER_COUNTRY_PRESENTATIONS" )]		public String NationalCodeNumber 
		{ 
		    get { return _nationalCodeNumber; } 
			set 
			{
			    _nationalCodeNumber = value;
			}
        }


	}

	public partial class DossierCountryPresentationRepository : Repository<DossierCountryPresentation> 
	{
		public DossierCountryPresentationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryPresentation Get(string projectionName, System.Decimal dossierCountryPresId)
		{
			return ((IRepository<DossierCountryPresentation>)this).Get(projectionName, dossierCountryPresId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPresentation Get(string projectionName, System.Decimal dossierCountryPresId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPresentation>)this).Get(projectionName, dossierCountryPresId, fetchMode);
		}

		public DossierCountryPresentation Get(Projection projection, System.Decimal dossierCountryPresId)
		{
			return ((IRepository<DossierCountryPresentation>)this).Get(projection, dossierCountryPresId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPresentation Get(Projection projection, System.Decimal dossierCountryPresId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPresentation>)this).Get(projection, dossierCountryPresId, fetchMode);
		}

		public DossierCountryPresentation Get(string projectionName, System.Decimal dossierCountryPresId, params string[] fields)
		{
			return ((IRepository<DossierCountryPresentation>)this).Get(projectionName, dossierCountryPresId, fields);
		}

		public DossierCountryPresentation Get(Projection projection, System.Decimal dossierCountryPresId, params string[] fields)
		{
			return ((IRepository<DossierCountryPresentation>)this).Get(projection, dossierCountryPresId, fields);
		}

		public bool Delete(System.Decimal dossierCountryPresId)
		{
			var entity = new DossierCountryPresentation { DossierCountryPresId = dossierCountryPresId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryPresentationFields
	{
		public const string DossierCountryPresId = "DossierCountryPresId";
		public const string AtReleaseShelfLife = "AtReleaseShelfLife";
		public const string AtReleaseMeasurement = "AtReleaseMeasurement";
		public const string AtReleaseStorageConditions = "AtReleaseStorageConditions";
		public const string OpeningShelfLife = "OpeningShelfLife";
		public const string OpeningMeasurement = "OpeningMeasurement";
		public const string OpeningStorageConditions = "OpeningStorageConditions";
		public const string ReconsShelfLife = "ReconsShelfLife";
		public const string ReconsMeasurement = "ReconsMeasurement";
		public const string ReconsStorageConditions = "ReconsStorageConditions";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierCountryId = "DossierCountryId";
		public const string AtReleaseStorageNames = "AtReleaseStorageNames";
		public const string HasAtRelease = "HasAtRelease";
		public const string HasOpening = "HasOpening";
		public const string HasRecons = "HasRecons";
		public const string PresentationName = "PresentationName";
		public const string NationalCodeNumber = "NationalCodeNumber";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_PRESMPS")]
	public partial class DossierCountryPresmp
	{
		private Decimal _dossierCountryPresmpsId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_PRESMPS_ID", ColumnName ="DOSSIER_COUNTRY_PRESMPS_ID", BaseColumnName ="DOSSIER_COUNTRY_PRESMPS_ID", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public Decimal DossierCountryPresmpsId 
		{ 
		    get { return _dossierCountryPresmpsId; } 
			set 
			{
			    _dossierCountryPresmpsId = value;
			}
        }

		private Decimal _dossierCountryPresId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_PRES_ID", BaseColumnName ="DOSSIER_COUNTRY_PRES_ID", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public Decimal DossierCountryPresId 
		{ 
		    get { return _dossierCountryPresId; } 
			set 
			{
			    _dossierCountryPresId = value;
			}
        }

		private Decimal _dossierMpCloSystemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_MP_CLO_SYSTEM_ID", BaseColumnName ="DOSSIER_MP_CLO_SYSTEM_ID", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public Decimal DossierMpCloSystemId 
		{ 
		    get { return _dossierMpCloSystemId; } 
			set 
			{
			    _dossierMpCloSystemId = value;
			}
        }

		private String _packageSize;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="PACKAGE_SIZE", BaseColumnName ="PACKAGE_SIZE", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public String PackageSize 
		{ 
		    get { return _packageSize; } 
			set 
			{
			    _packageSize = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isMain;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_MAIN", BaseColumnName ="IS_MAIN", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public String IsMain 
		{ 
		    get { return _isMain; } 
			set 
			{
			    _isMain = value;
			}
        }

		private Decimal? _containerVolumeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CONTAINER_VOLUME_ID", BaseColumnName ="CONTAINER_VOLUME_ID", BaseTableName = "DOSSIER_COUNTRY_PRESMPS" )]		public Decimal? ContainerVolumeId 
		{ 
		    get { return _containerVolumeId; } 
			set 
			{
			    _containerVolumeId = value;
			}
        }

		private Decimal _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_DOSSIER_ID" )]		public Decimal MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _medicinalProductName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="MEDICINAL_PRODUCT_NAME" )]		public String MedicinalProductName 
		{ 
		    get { return _medicinalProductName; } 
			set 
			{
			    _medicinalProductName = value;
			}
        }

		private String _closureSystemName;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CLOSURE_SYSTEM_NAME" )]		public String ClosureSystemName 
		{ 
		    get { return _closureSystemName; } 
			set 
			{
			    _closureSystemName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _containerVolumeName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CONTAINER_VOLUME_NAME" )]		public String ContainerVolumeName 
		{ 
		    get { return _containerVolumeName; } 
			set 
			{
			    _containerVolumeName = value;
			}
        }


	}

	public partial class DossierCountryPresmpRepository : Repository<DossierCountryPresmp> 
	{
		public DossierCountryPresmpRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryPresmp Get(string projectionName, System.Decimal dossierCountryPresmpsId)
		{
			return ((IRepository<DossierCountryPresmp>)this).Get(projectionName, dossierCountryPresmpsId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPresmp Get(string projectionName, System.Decimal dossierCountryPresmpsId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPresmp>)this).Get(projectionName, dossierCountryPresmpsId, fetchMode);
		}

		public DossierCountryPresmp Get(Projection projection, System.Decimal dossierCountryPresmpsId)
		{
			return ((IRepository<DossierCountryPresmp>)this).Get(projection, dossierCountryPresmpsId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPresmp Get(Projection projection, System.Decimal dossierCountryPresmpsId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPresmp>)this).Get(projection, dossierCountryPresmpsId, fetchMode);
		}

		public DossierCountryPresmp Get(string projectionName, System.Decimal dossierCountryPresmpsId, params string[] fields)
		{
			return ((IRepository<DossierCountryPresmp>)this).Get(projectionName, dossierCountryPresmpsId, fields);
		}

		public DossierCountryPresmp Get(Projection projection, System.Decimal dossierCountryPresmpsId, params string[] fields)
		{
			return ((IRepository<DossierCountryPresmp>)this).Get(projection, dossierCountryPresmpsId, fields);
		}

		public bool Delete(System.Decimal dossierCountryPresmpsId)
		{
			var entity = new DossierCountryPresmp { DossierCountryPresmpsId = dossierCountryPresmpsId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryPresmpFields
	{
		public const string DossierCountryPresmpsId = "DossierCountryPresmpsId";
		public const string DossierCountryPresId = "DossierCountryPresId";
		public const string DossierMpCloSystemId = "DossierMpCloSystemId";
		public const string PackageSize = "PackageSize";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsMain = "IsMain";
		public const string ContainerVolumeId = "ContainerVolumeId";
		public const string MpDossierId = "MpDossierId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string MedicinalProductName = "MedicinalProductName";
		public const string ClosureSystemName = "ClosureSystemName";
		public const string DossierId = "DossierId";
		public const string CountryId = "CountryId";
		public const string DossierCountryId = "DossierCountryId";
		public const string ContainerVolumeName = "ContainerVolumeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_CATEGORIES")]
	public partial class ModificationCategory
	{
		private Decimal _modificationCategoryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_CATEGORY_ID", ColumnName ="MODIFICATION_CATEGORY_ID", BaseColumnName ="MODIFICATION_CATEGORY_ID", BaseTableName = "MODIFICATION_CATEGORIES" )]		public Decimal ModificationCategoryId 
		{ 
		    get { return _modificationCategoryId; } 
			set 
			{
			    _modificationCategoryId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MODIFICATION_CATEGORIES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "MODIFICATION_CATEGORIES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_CATEGORIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_CATEGORIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_CATEGORIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_CATEGORIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class ModificationCategoryRepository : Repository<ModificationCategory> 
	{
		public ModificationCategoryRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationCategory Get(string projectionName, System.Decimal modificationCategoryId)
		{
			return ((IRepository<ModificationCategory>)this).Get(projectionName, modificationCategoryId, FetchMode.UseIdentityMap);
		}

		public ModificationCategory Get(string projectionName, System.Decimal modificationCategoryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCategory>)this).Get(projectionName, modificationCategoryId, fetchMode);
		}

		public ModificationCategory Get(Projection projection, System.Decimal modificationCategoryId)
		{
			return ((IRepository<ModificationCategory>)this).Get(projection, modificationCategoryId, FetchMode.UseIdentityMap);
		}

		public ModificationCategory Get(Projection projection, System.Decimal modificationCategoryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCategory>)this).Get(projection, modificationCategoryId, fetchMode);
		}

		public ModificationCategory Get(string projectionName, System.Decimal modificationCategoryId, params string[] fields)
		{
			return ((IRepository<ModificationCategory>)this).Get(projectionName, modificationCategoryId, fields);
		}

		public ModificationCategory Get(Projection projection, System.Decimal modificationCategoryId, params string[] fields)
		{
			return ((IRepository<ModificationCategory>)this).Get(projection, modificationCategoryId, fields);
		}

		public bool Delete(System.Decimal modificationCategoryId)
		{
			var entity = new ModificationCategory { ModificationCategoryId = modificationCategoryId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationCategoryFields
	{
		public const string ModificationCategoryId = "ModificationCategoryId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_TYPES")]
	public partial class ModificationType
	{
		private Decimal _modificationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_TYPE_ID", ColumnName ="MODIFICATION_TYPE_ID", BaseColumnName ="MODIFICATION_TYPE_ID", BaseTableName = "MODIFICATION_TYPES" )]		public Decimal ModificationTypeId 
		{ 
		    get { return _modificationTypeId; } 
			set 
			{
			    _modificationTypeId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MODIFICATION_TYPES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "MODIFICATION_TYPES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_TYPES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_TYPES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_TYPES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_TYPES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _modificationCategoryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_CATEGORY_ID", BaseColumnName ="MODIFICATION_CATEGORY_ID", BaseTableName = "MODIFICATION_TYPES" )]		public Decimal ModificationCategoryId 
		{ 
		    get { return _modificationCategoryId; } 
			set 
			{
			    _modificationCategoryId = value;
			}
        }


	}

	public partial class ModificationTypeRepository : Repository<ModificationType> 
	{
		public ModificationTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationType Get(string projectionName, System.Decimal modificationTypeId)
		{
			return ((IRepository<ModificationType>)this).Get(projectionName, modificationTypeId, FetchMode.UseIdentityMap);
		}

		public ModificationType Get(string projectionName, System.Decimal modificationTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationType>)this).Get(projectionName, modificationTypeId, fetchMode);
		}

		public ModificationType Get(Projection projection, System.Decimal modificationTypeId)
		{
			return ((IRepository<ModificationType>)this).Get(projection, modificationTypeId, FetchMode.UseIdentityMap);
		}

		public ModificationType Get(Projection projection, System.Decimal modificationTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationType>)this).Get(projection, modificationTypeId, fetchMode);
		}

		public ModificationType Get(string projectionName, System.Decimal modificationTypeId, params string[] fields)
		{
			return ((IRepository<ModificationType>)this).Get(projectionName, modificationTypeId, fields);
		}

		public ModificationType Get(Projection projection, System.Decimal modificationTypeId, params string[] fields)
		{
			return ((IRepository<ModificationType>)this).Get(projection, modificationTypeId, fields);
		}

		public bool Delete(System.Decimal modificationTypeId)
		{
			var entity = new ModificationType { ModificationTypeId = modificationTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationTypeFields
	{
		public const string ModificationTypeId = "ModificationTypeId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModificationCategoryId = "ModificationCategoryId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATIONS")]
	public partial class Modification
	{
		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_ID", ColumnName ="MODIFICATION_ID", BaseColumnName ="MODIFICATION_ID", BaseTableName = "MODIFICATIONS" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private Decimal? _modificationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFICATION_TYPE_ID", BaseColumnName ="MODIFICATION_TYPE_ID", BaseTableName = "MODIFICATIONS" )]		public Decimal? ModificationTypeId 
		{ 
		    get { return _modificationTypeId; } 
			set 
			{
			    _modificationTypeId = value;
			}
        }

		private Decimal _modificationCategoryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_CATEGORY_ID", BaseColumnName ="MODIFICATION_CATEGORY_ID", BaseTableName = "MODIFICATIONS" )]		public Decimal ModificationCategoryId 
		{ 
		    get { return _modificationCategoryId; } 
			set 
			{
			    _modificationCategoryId = value;
			}
        }

		private String _isNaRenewal;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RENEWAL", BaseColumnName ="IS_NA_RENEWAL", BaseTableName = "MODIFICATIONS" )]		public String IsNaRenewal 
		{ 
		    get { return _isNaRenewal; } 
			set 
			{
			    _isNaRenewal = value;
			}
        }

		private String _isRenewalBindingResolution;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_RENEWAL_BINDING_RESOLUTION", BaseColumnName ="IS_RENEWAL_BINDING_RESOLUTION", BaseTableName = "MODIFICATIONS" )]		public String IsRenewalBindingResolution 
		{ 
		    get { return _isRenewalBindingResolution; } 
			set 
			{
			    _isRenewalBindingResolution = value;
			}
        }

		private DateTime? _renewalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_DATE", BaseColumnName ="RENEWAL_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? RenewalDate 
		{ 
		    get { return _renewalDate; } 
			set 
			{
			    _renewalDate = value;
			}
        }

		private DateTime? _renewalExpecSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_EXPEC_SUBMISSION_DATE", BaseColumnName ="RENEWAL_EXPEC_SUBMISSION_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? RenewalExpecSubmissionDate 
		{ 
		    get { return _renewalExpecSubmissionDate; } 
			set 
			{
			    _renewalExpecSubmissionDate = value;
			}
        }

		private DateTime? _renewalDocumentationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_DOCUMENTATION_DATE", BaseColumnName ="RENEWAL_DOCUMENTATION_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? RenewalDocumentationDate 
		{ 
		    get { return _renewalDocumentationDate; } 
			set 
			{
			    _renewalDocumentationDate = value;
			}
        }

		private DateTime? _renewalDeficienciesDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_DEFICIENCIES_DATE", BaseColumnName ="RENEWAL_DEFICIENCIES_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? RenewalDeficienciesDate 
		{ 
		    get { return _renewalDeficienciesDate; } 
			set 
			{
			    _renewalDeficienciesDate = value;
			}
        }

		private DateTime? _renewalSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_SUBMISSION_DATE", BaseColumnName ="RENEWAL_SUBMISSION_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? RenewalSubmissionDate 
		{ 
		    get { return _renewalSubmissionDate; } 
			set 
			{
			    _renewalSubmissionDate = value;
			}
        }

		private DateTime? _renewalRespDeficienciesDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_RESP_DEFICIENCIES_DATE", BaseColumnName ="RENEWAL_RESP_DEFICIENCIES_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? RenewalRespDeficienciesDate 
		{ 
		    get { return _renewalRespDeficienciesDate; } 
			set 
			{
			    _renewalRespDeficienciesDate = value;
			}
        }

		private DateTime? _renewalDispDeficienciesDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_DISP_DEFICIENCIES_DATE", BaseColumnName ="RENEWAL_DISP_DEFICIENCIES_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? RenewalDispDeficienciesDate 
		{ 
		    get { return _renewalDispDeficienciesDate; } 
			set 
			{
			    _renewalDispDeficienciesDate = value;
			}
        }

		private DateTime? _renewalAuthorisationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_AUTHORISATION_DATE", BaseColumnName ="RENEWAL_AUTHORISATION_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? RenewalAuthorisationDate 
		{ 
		    get { return _renewalAuthorisationDate; } 
			set 
			{
			    _renewalAuthorisationDate = value;
			}
        }

		private String _isNaAuthorisationDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_AUTHORISATION_DATE", BaseColumnName ="IS_NA_AUTHORISATION_DATE", BaseTableName = "MODIFICATIONS" )]		public String IsNaAuthorisationDate 
		{ 
		    get { return _isNaAuthorisationDate; } 
			set 
			{
			    _isNaAuthorisationDate = value;
			}
        }

		private String _renewalComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="RENEWAL_COMMENTS", BaseColumnName ="RENEWAL_COMMENTS", BaseTableName = "MODIFICATIONS" )]		public String RenewalComments 
		{ 
		    get { return _renewalComments; } 
			set 
			{
			    _renewalComments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _clientInformedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLIENT_INFORMED_DATE", BaseColumnName ="CLIENT_INFORMED_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? ClientInformedDate 
		{ 
		    get { return _clientInformedDate; } 
			set 
			{
			    _clientInformedDate = value;
			}
        }

		private String _procedureNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PROCEDURE_NUMBER", BaseColumnName ="PROCEDURE_NUMBER", BaseTableName = "MODIFICATIONS" )]		public String ProcedureNumber 
		{ 
		    get { return _procedureNumber; } 
			set 
			{
			    _procedureNumber = value;
			}
        }

		private String _applicationDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="APPLICATION_DESCRIPTION", BaseColumnName ="APPLICATION_DESCRIPTION", BaseTableName = "MODIFICATIONS" )]		public String ApplicationDescription 
		{ 
		    get { return _applicationDescription; } 
			set 
			{
			    _applicationDescription = value;
			}
        }

		private String _isAffectedInformation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AFFECTED_INFORMATION", BaseColumnName ="IS_AFFECTED_INFORMATION", BaseTableName = "MODIFICATIONS" )]		public String IsAffectedInformation 
		{ 
		    get { return _isAffectedInformation; } 
			set 
			{
			    _isAffectedInformation = value;
			}
        }

		private String _isVariationGrouping;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_VARIATION_GROUPING", BaseColumnName ="IS_VARIATION_GROUPING", BaseTableName = "MODIFICATIONS" )]		public String IsVariationGrouping 
		{ 
		    get { return _isVariationGrouping; } 
			set 
			{
			    _isVariationGrouping = value;
			}
        }

		private String _variationType;
		[DataMember]
		[SqlField(DbType.String, 2, ColumnName ="VARIATION_TYPE", BaseColumnName ="VARIATION_TYPE", BaseTableName = "MODIFICATIONS" )]		public String VariationType 
		{ 
		    get { return _variationType; } 
			set 
			{
			    _variationType = value;
			}
        }

		private Decimal? _commissionType;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMISSION_TYPE", BaseColumnName ="COMMISSION_TYPE", BaseTableName = "MODIFICATIONS" )]		public Decimal? CommissionType 
		{ 
		    get { return _commissionType; } 
			set 
			{
			    _commissionType = value;
			}
        }

		private Decimal? _commissionSubtype;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMISSION_SUBTYPE", BaseColumnName ="COMMISSION_SUBTYPE", BaseTableName = "MODIFICATIONS" )]		public Decimal? CommissionSubtype 
		{ 
		    get { return _commissionSubtype; } 
			set 
			{
			    _commissionSubtype = value;
			}
        }

		private Decimal? _classificationVariationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CLASSIFICATION_VARIATION_ID", BaseColumnName ="CLASSIFICATION_VARIATION_ID", BaseTableName = "MODIFICATIONS" )]		public Decimal? ClassificationVariationId 
		{ 
		    get { return _classificationVariationId; } 
			set 
			{
			    _classificationVariationId = value;
			}
        }

		private String _isNaClassificationVariation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_CLASSIFICATION_VARIATION", BaseColumnName ="IS_NA_CLASSIFICATION_VARIATION", BaseTableName = "MODIFICATIONS" )]		public String IsNaClassificationVariation 
		{ 
		    get { return _isNaClassificationVariation; } 
			set 
			{
			    _isNaClassificationVariation = value;
			}
        }

		private String _isCommunicationAuthority;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_COMMUNICATION_AUTHORITY", BaseColumnName ="IS_COMMUNICATION_AUTHORITY", BaseTableName = "MODIFICATIONS" )]		public String IsCommunicationAuthority 
		{ 
		    get { return _isCommunicationAuthority; } 
			set 
			{
			    _isCommunicationAuthority = value;
			}
        }

		private Decimal? _communicationType;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMUNICATION_TYPE", BaseColumnName ="COMMUNICATION_TYPE", BaseTableName = "MODIFICATIONS" )]		public Decimal? CommunicationType 
		{ 
		    get { return _communicationType; } 
			set 
			{
			    _communicationType = value;
			}
        }

		private DateTime? _clientDispatchDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLIENT_DISPATCH_DATE", BaseColumnName ="CLIENT_DISPATCH_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? ClientDispatchDate 
		{ 
		    get { return _clientDispatchDate; } 
			set 
			{
			    _clientDispatchDate = value;
			}
        }

		private DateTime? _expectedSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_SUBMISSION_DATE", BaseColumnName ="EXPECTED_SUBMISSION_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? ExpectedSubmissionDate 
		{ 
		    get { return _expectedSubmissionDate; } 
			set 
			{
			    _expectedSubmissionDate = value;
			}
        }

		private DateTime? _submissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DATE", BaseColumnName ="SUBMISSION_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? SubmissionDate 
		{ 
		    get { return _submissionDate; } 
			set 
			{
			    _submissionDate = value;
			}
        }

		private DateTime? _uploadSpanishPortalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="UPLOAD_SPANISH_PORTAL_DATE", BaseColumnName ="UPLOAD_SPANISH_PORTAL_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? UploadSpanishPortalDate 
		{ 
		    get { return _uploadSpanishPortalDate; } 
			set 
			{
			    _uploadSpanishPortalDate = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "MODIFICATIONS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private String _changeDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CHANGE_DESCRIPTION", BaseColumnName ="CHANGE_DESCRIPTION", BaseTableName = "MODIFICATIONS" )]		public String ChangeDescription 
		{ 
		    get { return _changeDescription; } 
			set 
			{
			    _changeDescription = value;
			}
        }

		private Decimal? _modificationStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFICATION_STATUS_ID", BaseColumnName ="MODIFICATION_STATUS_ID", BaseTableName = "MODIFICATIONS" )]		public Decimal? ModificationStatusId 
		{ 
		    get { return _modificationStatusId; } 
			set 
			{
			    _modificationStatusId = value;
			}
        }

		private DateTime? _validationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VALIDATION_DATE", BaseColumnName ="VALIDATION_DATE", BaseTableName = "MODIFICATIONS" )]		public DateTime? ValidationDate 
		{ 
		    get { return _validationDate; } 
			set 
			{
			    _validationDate = value;
			}
        }

		private Decimal? _statusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="STATUS_ID", BaseColumnName ="STATUS_ID", BaseTableName = "MODIFICATIONS" )]		public Decimal? StatusId 
		{ 
		    get { return _statusId; } 
			set 
			{
			    _statusId = value;
			}
        }

		private String _modificationCategoryName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATION_CATEGORY_NAME" )]		public String ModificationCategoryName 
		{ 
		    get { return _modificationCategoryName; } 
			set 
			{
			    _modificationCategoryName = value;
			}
        }

		private String _modificationTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATION_TYPE_NAME" )]		public String ModificationTypeName 
		{ 
		    get { return _modificationTypeName; } 
			set 
			{
			    _modificationTypeName = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _lastCccode;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="LAST_CCCODE" )]		public String LastCccode 
		{ 
		    get { return _lastCccode; } 
			set 
			{
			    _lastCccode = value;
			}
        }

		private Decimal? _variations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="VARIATIONS" )]		public Decimal? Variations 
		{ 
		    get { return _variations; } 
			set 
			{
			    _variations = value;
			}
        }

		private Decimal? _communications;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMUNICATIONS" )]		public Decimal? Communications 
		{ 
		    get { return _communications; } 
			set 
			{
			    _communications = value;
			}
        }

		private Decimal? _renewals;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RENEWALS" )]		public Decimal? Renewals 
		{ 
		    get { return _renewals; } 
			set 
			{
			    _renewals = value;
			}
        }

		private Decimal? _notRequired;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="NOT_REQUIRED" )]		public Decimal? NotRequired 
		{ 
		    get { return _notRequired; } 
			set 
			{
			    _notRequired = value;
			}
        }

		private Decimal? _includedOnGoing;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="INCLUDED_ON_GOING" )]		public Decimal? IncludedOnGoing 
		{ 
		    get { return _includedOnGoing; } 
			set 
			{
			    _includedOnGoing = value;
			}
        }

		private Decimal? _tempSuspension;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TEMP_SUSPENSION" )]		public Decimal? TempSuspension 
		{ 
		    get { return _tempSuspension; } 
			set 
			{
			    _tempSuspension = value;
			}
        }

		private Decimal? _withdrawal;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="WITHDRAWAL" )]		public Decimal? Withdrawal 
		{ 
		    get { return _withdrawal; } 
			set 
			{
			    _withdrawal = value;
			}
        }

		private Decimal? _cease;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CEASE" )]		public Decimal? Cease 
		{ 
		    get { return _cease; } 
			set 
			{
			    _cease = value;
			}
        }

		private Decimal? _sunset;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SUNSET" )]		public Decimal? Sunset 
		{ 
		    get { return _sunset; } 
			set 
			{
			    _sunset = value;
			}
        }

		private Decimal? _cancellation;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CANCELLATION" )]		public Decimal? Cancellation 
		{ 
		    get { return _cancellation; } 
			set 
			{
			    _cancellation = value;
			}
        }

		private Decimal? _revoked;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="REVOKED" )]		public Decimal? Revoked 
		{ 
		    get { return _revoked; } 
			set 
			{
			    _revoked = value;
			}
        }

		private Decimal? _administrativeRenewal;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ADMINISTRATIVE_RENEWAL" )]		public Decimal? AdministrativeRenewal 
		{ 
		    get { return _administrativeRenewal; } 
			set 
			{
			    _administrativeRenewal = value;
			}
        }


	}

	public partial class ModificationRepository : Repository<Modification> 
	{
		public ModificationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Modification Get(string projectionName, System.Decimal modificationId)
		{
			return ((IRepository<Modification>)this).Get(projectionName, modificationId, FetchMode.UseIdentityMap);
		}

		public Modification Get(string projectionName, System.Decimal modificationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Modification>)this).Get(projectionName, modificationId, fetchMode);
		}

		public Modification Get(Projection projection, System.Decimal modificationId)
		{
			return ((IRepository<Modification>)this).Get(projection, modificationId, FetchMode.UseIdentityMap);
		}

		public Modification Get(Projection projection, System.Decimal modificationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Modification>)this).Get(projection, modificationId, fetchMode);
		}

		public Modification Get(string projectionName, System.Decimal modificationId, params string[] fields)
		{
			return ((IRepository<Modification>)this).Get(projectionName, modificationId, fields);
		}

		public Modification Get(Projection projection, System.Decimal modificationId, params string[] fields)
		{
			return ((IRepository<Modification>)this).Get(projection, modificationId, fields);
		}

		public bool Delete(System.Decimal modificationId)
		{
			var entity = new Modification { ModificationId = modificationId };
			return this.Delete(entity);
		}

		
		public void DeleteModification(Decimal? modId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteModificationProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "MOD_ID"].Value = modId == null ? (object) DBNull.Value : modId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationFields
	{
		public const string ModificationId = "ModificationId";
		public const string ModificationTypeId = "ModificationTypeId";
		public const string ModificationCategoryId = "ModificationCategoryId";
		public const string IsNaRenewal = "IsNaRenewal";
		public const string IsRenewalBindingResolution = "IsRenewalBindingResolution";
		public const string RenewalDate = "RenewalDate";
		public const string RenewalExpecSubmissionDate = "RenewalExpecSubmissionDate";
		public const string RenewalDocumentationDate = "RenewalDocumentationDate";
		public const string RenewalDeficienciesDate = "RenewalDeficienciesDate";
		public const string RenewalSubmissionDate = "RenewalSubmissionDate";
		public const string RenewalRespDeficienciesDate = "RenewalRespDeficienciesDate";
		public const string RenewalDispDeficienciesDate = "RenewalDispDeficienciesDate";
		public const string RenewalAuthorisationDate = "RenewalAuthorisationDate";
		public const string IsNaAuthorisationDate = "IsNaAuthorisationDate";
		public const string RenewalComments = "RenewalComments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ClientInformedDate = "ClientInformedDate";
		public const string ProcedureNumber = "ProcedureNumber";
		public const string ApplicationDescription = "ApplicationDescription";
		public const string IsAffectedInformation = "IsAffectedInformation";
		public const string IsVariationGrouping = "IsVariationGrouping";
		public const string VariationType = "VariationType";
		public const string CommissionType = "CommissionType";
		public const string CommissionSubtype = "CommissionSubtype";
		public const string ClassificationVariationId = "ClassificationVariationId";
		public const string IsNaClassificationVariation = "IsNaClassificationVariation";
		public const string IsCommunicationAuthority = "IsCommunicationAuthority";
		public const string CommunicationType = "CommunicationType";
		public const string ClientDispatchDate = "ClientDispatchDate";
		public const string ExpectedSubmissionDate = "ExpectedSubmissionDate";
		public const string SubmissionDate = "SubmissionDate";
		public const string UploadSpanishPortalDate = "UploadSpanishPortalDate";
		public const string Comments = "Comments";
		public const string ChangeDescription = "ChangeDescription";
		public const string ModificationStatusId = "ModificationStatusId";
		public const string ValidationDate = "ValidationDate";
		public const string StatusId = "StatusId";
		public const string ModificationCategoryName = "ModificationCategoryName";
		public const string ModificationTypeName = "ModificationTypeName";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string LastCccode = "LastCccode";
		public const string Variations = "Variations";
		public const string Communications = "Communications";
		public const string Renewals = "Renewals";
		public const string NotRequired = "NotRequired";
		public const string IncludedOnGoing = "IncludedOnGoing";
		public const string TempSuspension = "TempSuspension";
		public const string Withdrawal = "Withdrawal";
		public const string Cease = "Cease";
		public const string Sunset = "Sunset";
		public const string Cancellation = "Cancellation";
		public const string Revoked = "Revoked";
		public const string AdministrativeRenewal = "AdministrativeRenewal";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_COUNTRIES")]
	public partial class ModificationCountry
	{
		private Decimal _modificationCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_COUNTRY_ID", ColumnName ="MODIFICATION_COUNTRY_ID", BaseColumnName ="MODIFICATION_COUNTRY_ID", BaseTableName = "MODIFICATION_COUNTRIES" )]		public Decimal ModificationCountryId 
		{ 
		    get { return _modificationCountryId; } 
			set 
			{
			    _modificationCountryId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "MODIFICATION_COUNTRIES" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_COUNTRIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_COUNTRIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_COUNTRIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_COUNTRIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID", BaseColumnName ="MODIFICATION_ID", BaseTableName = "MODIFICATION_COUNTRIES" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private String _isAffected;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AFFECTED", BaseColumnName ="IS_AFFECTED", BaseTableName = "MODIFICATION_COUNTRIES" )]		public String IsAffected 
		{ 
		    get { return _isAffected; } 
			set 
			{
			    _isAffected = value;
			}
        }

		private String _isSubmitted;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_SUBMITTED", BaseColumnName ="IS_SUBMITTED", BaseTableName = "MODIFICATION_COUNTRIES" )]		public String IsSubmitted 
		{ 
		    get { return _isSubmitted; } 
			set 
			{
			    _isSubmitted = value;
			}
        }

		private Decimal _modificationSubmissionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_SUBMISSION_ID", BaseColumnName ="MODIFICATION_SUBMISSION_ID", BaseTableName = "MODIFICATION_COUNTRIES" )]		public Decimal ModificationSubmissionId 
		{ 
		    get { return _modificationSubmissionId; } 
			set 
			{
			    _modificationSubmissionId = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }

		private Decimal _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="GROUP_ID" )]		public Decimal GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private Decimal _mktAuthProdedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MKT_AUTH_PRODEDURE_ID" )]		public Decimal MktAuthProdedureId 
		{ 
		    get { return _mktAuthProdedureId; } 
			set 
			{
			    _mktAuthProdedureId = value;
			}
        }


	}

	public partial class ModificationCountryRepository : Repository<ModificationCountry> 
	{
		public ModificationCountryRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationCountry Get(string projectionName, System.Decimal modificationCountryId)
		{
			return ((IRepository<ModificationCountry>)this).Get(projectionName, modificationCountryId, FetchMode.UseIdentityMap);
		}

		public ModificationCountry Get(string projectionName, System.Decimal modificationCountryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCountry>)this).Get(projectionName, modificationCountryId, fetchMode);
		}

		public ModificationCountry Get(Projection projection, System.Decimal modificationCountryId)
		{
			return ((IRepository<ModificationCountry>)this).Get(projection, modificationCountryId, FetchMode.UseIdentityMap);
		}

		public ModificationCountry Get(Projection projection, System.Decimal modificationCountryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCountry>)this).Get(projection, modificationCountryId, fetchMode);
		}

		public ModificationCountry Get(string projectionName, System.Decimal modificationCountryId, params string[] fields)
		{
			return ((IRepository<ModificationCountry>)this).Get(projectionName, modificationCountryId, fields);
		}

		public ModificationCountry Get(Projection projection, System.Decimal modificationCountryId, params string[] fields)
		{
			return ((IRepository<ModificationCountry>)this).Get(projection, modificationCountryId, fields);
		}

		public bool Delete(System.Decimal modificationCountryId)
		{
			var entity = new ModificationCountry { ModificationCountryId = modificationCountryId };
			return this.Delete(entity);
		}

		
		public void DeleteModificationCountry(Decimal? mcId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteModificationCountryProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "MC_ID"].Value = mcId == null ? (object) DBNull.Value : mcId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationCountryFields
	{
		public const string ModificationCountryId = "ModificationCountryId";
		public const string DossierCountryId = "DossierCountryId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModificationId = "ModificationId";
		public const string IsAffected = "IsAffected";
		public const string IsSubmitted = "IsSubmitted";
		public const string ModificationSubmissionId = "ModificationSubmissionId";
		public const string DossierId = "DossierId";
		public const string CountryId = "CountryId";
		public const string CountryName = "CountryName";
		public const string ProductName = "ProductName";
		public const string TwoLettersCode = "TwoLettersCode";
		public const string GroupId = "GroupId";
		public const string MktAuthProdedureId = "MktAuthProdedureId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="CLASSIFICATION_VARIATIONS")]
	public partial class ClassificationVariation
	{
		private Decimal _classificationVariationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "CLASSIFICATION_VARIATION_ID", ColumnName ="CLASSIFICATION_VARIATION_ID", BaseColumnName ="CLASSIFICATION_VARIATION_ID", BaseTableName = "CLASSIFICATION_VARIATIONS" )]		public Decimal ClassificationVariationId 
		{ 
		    get { return _classificationVariationId; } 
			set 
			{
			    _classificationVariationId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "CLASSIFICATION_VARIATIONS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "CLASSIFICATION_VARIATIONS" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "CLASSIFICATION_VARIATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "CLASSIFICATION_VARIATIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "CLASSIFICATION_VARIATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "CLASSIFICATION_VARIATIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _commissionType;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMISSION_TYPE", BaseColumnName ="COMMISSION_TYPE", BaseTableName = "CLASSIFICATION_VARIATIONS" )]		public Decimal? CommissionType 
		{ 
		    get { return _commissionType; } 
			set 
			{
			    _commissionType = value;
			}
        }

		private String _commisionTypeText;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="COMMISION_TYPE_TEXT", BaseColumnName ="COMMISION_TYPE_TEXT", BaseTableName = "CLASSIFICATION_VARIATIONS" )]		public String CommisionTypeText 
		{ 
		    get { return _commisionTypeText; } 
			set 
			{
			    _commisionTypeText = value;
			}
        }

		private Decimal? _iterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ITERATIONS" )]		public Decimal? Iterations 
		{ 
		    get { return _iterations; } 
			set 
			{
			    _iterations = value;
			}
        }


	}

	public partial class ClassificationVariationRepository : Repository<ClassificationVariation> 
	{
		public ClassificationVariationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ClassificationVariation Get(string projectionName, System.Decimal classificationVariationId)
		{
			return ((IRepository<ClassificationVariation>)this).Get(projectionName, classificationVariationId, FetchMode.UseIdentityMap);
		}

		public ClassificationVariation Get(string projectionName, System.Decimal classificationVariationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ClassificationVariation>)this).Get(projectionName, classificationVariationId, fetchMode);
		}

		public ClassificationVariation Get(Projection projection, System.Decimal classificationVariationId)
		{
			return ((IRepository<ClassificationVariation>)this).Get(projection, classificationVariationId, FetchMode.UseIdentityMap);
		}

		public ClassificationVariation Get(Projection projection, System.Decimal classificationVariationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ClassificationVariation>)this).Get(projection, classificationVariationId, fetchMode);
		}

		public ClassificationVariation Get(string projectionName, System.Decimal classificationVariationId, params string[] fields)
		{
			return ((IRepository<ClassificationVariation>)this).Get(projectionName, classificationVariationId, fields);
		}

		public ClassificationVariation Get(Projection projection, System.Decimal classificationVariationId, params string[] fields)
		{
			return ((IRepository<ClassificationVariation>)this).Get(projection, classificationVariationId, fields);
		}

		public bool Delete(System.Decimal classificationVariationId)
		{
			var entity = new ClassificationVariation { ClassificationVariationId = classificationVariationId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ClassificationVariationFields
	{
		public const string ClassificationVariationId = "ClassificationVariationId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string CommissionType = "CommissionType";
		public const string CommisionTypeText = "CommisionTypeText";
		public const string Iterations = "Iterations";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_COUNTRY_STATUSES")]
	public partial class ModificationCountryStatus
	{
		private Decimal _modificationCountryStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="MODIFICATION_COUNTRY_STATUS_ID", BaseColumnName ="MODIFICATION_COUNTRY_STATUS_ID", BaseTableName = "MODIFICATION_COUNTRY_STATUSES" )]		public Decimal ModificationCountryStatusId 
		{ 
		    get { return _modificationCountryStatusId; } 
			set 
			{
			    _modificationCountryStatusId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "MODIFICATION_COUNTRY_STATUSES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _descriptoin;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTOIN", BaseColumnName ="DESCRIPTOIN", BaseTableName = "MODIFICATION_COUNTRY_STATUSES" )]		public String Descriptoin 
		{ 
		    get { return _descriptoin; } 
			set 
			{
			    _descriptoin = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_COUNTRY_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_COUNTRY_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_COUNTRY_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_COUNTRY_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class ModificationCountryStatusRepository : Repository<ModificationCountryStatus> 
	{
		public ModificationCountryStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationCountryStatus Get(string projectionName, System.Decimal modificationCountryStatusId)
		{
			return ((IRepository<ModificationCountryStatus>)this).Get(projectionName, modificationCountryStatusId, FetchMode.UseIdentityMap);
		}

		public ModificationCountryStatus Get(string projectionName, System.Decimal modificationCountryStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCountryStatus>)this).Get(projectionName, modificationCountryStatusId, fetchMode);
		}

		public ModificationCountryStatus Get(Projection projection, System.Decimal modificationCountryStatusId)
		{
			return ((IRepository<ModificationCountryStatus>)this).Get(projection, modificationCountryStatusId, FetchMode.UseIdentityMap);
		}

		public ModificationCountryStatus Get(Projection projection, System.Decimal modificationCountryStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCountryStatus>)this).Get(projection, modificationCountryStatusId, fetchMode);
		}

		public ModificationCountryStatus Get(string projectionName, System.Decimal modificationCountryStatusId, params string[] fields)
		{
			return ((IRepository<ModificationCountryStatus>)this).Get(projectionName, modificationCountryStatusId, fields);
		}

		public ModificationCountryStatus Get(Projection projection, System.Decimal modificationCountryStatusId, params string[] fields)
		{
			return ((IRepository<ModificationCountryStatus>)this).Get(projection, modificationCountryStatusId, fields);
		}

		public bool Delete(System.Decimal modificationCountryStatusId)
		{
			var entity = new ModificationCountryStatus { ModificationCountryStatusId = modificationCountryStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationCountryStatusFields
	{
		public const string ModificationCountryStatusId = "ModificationCountryStatusId";
		public const string Name = "Name";
		public const string Descriptoin = "Descriptoin";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_APPLICATIONS")]
	public partial class ModificationApplication
	{
		private Decimal _modificationApplicationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_APPLICATION_ID", ColumnName ="MODIFICATION_APPLICATION_ID", BaseColumnName ="MODIFICATION_APPLICATION_ID", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public Decimal ModificationApplicationId 
		{ 
		    get { return _modificationApplicationId; } 
			set 
			{
			    _modificationApplicationId = value;
			}
        }

		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID", BaseColumnName ="MODIFICATION_ID", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private String _variationType;
		[DataMember]
		[SqlField(DbType.String, 2, ColumnName ="VARIATION_TYPE", BaseColumnName ="VARIATION_TYPE", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public String VariationType 
		{ 
		    get { return _variationType; } 
			set 
			{
			    _variationType = value;
			}
        }

		private Decimal? _commissionType;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMISSION_TYPE", BaseColumnName ="COMMISSION_TYPE", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public Decimal? CommissionType 
		{ 
		    get { return _commissionType; } 
			set 
			{
			    _commissionType = value;
			}
        }

		private Decimal? _commissionSubtype;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMISSION_SUBTYPE", BaseColumnName ="COMMISSION_SUBTYPE", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public Decimal? CommissionSubtype 
		{ 
		    get { return _commissionSubtype; } 
			set 
			{
			    _commissionSubtype = value;
			}
        }

		private Decimal? _classificationVariationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CLASSIFICATION_VARIATION_ID", BaseColumnName ="CLASSIFICATION_VARIATION_ID", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public Decimal? ClassificationVariationId 
		{ 
		    get { return _classificationVariationId; } 
			set 
			{
			    _classificationVariationId = value;
			}
        }

		private String _procedureNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PROCEDURE_NUMBER", BaseColumnName ="PROCEDURE_NUMBER", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public String ProcedureNumber 
		{ 
		    get { return _procedureNumber; } 
			set 
			{
			    _procedureNumber = value;
			}
        }

		private String _applicationDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="APPLICATION_DESCRIPTION", BaseColumnName ="APPLICATION_DESCRIPTION", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public String ApplicationDescription 
		{ 
		    get { return _applicationDescription; } 
			set 
			{
			    _applicationDescription = value;
			}
        }

		private String _isAffectedInformation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_AFFECTED_INFORMATION", BaseColumnName ="IS_AFFECTED_INFORMATION", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public String IsAffectedInformation 
		{ 
		    get { return _isAffectedInformation; } 
			set 
			{
			    _isAffectedInformation = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _modificationSubmissionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_SUBMISSION_ID", BaseColumnName ="MODIFICATION_SUBMISSION_ID", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public Decimal ModificationSubmissionId 
		{ 
		    get { return _modificationSubmissionId; } 
			set 
			{
			    _modificationSubmissionId = value;
			}
        }

		private Decimal? _temporarySuspensionTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TEMPORARY_SUSPENSION_TYPE_ID", BaseColumnName ="TEMPORARY_SUSPENSION_TYPE_ID", BaseTableName = "MODIFICATION_APPLICATIONS" )]		public Decimal? TemporarySuspensionTypeId 
		{ 
		    get { return _temporarySuspensionTypeId; } 
			set 
			{
			    _temporarySuspensionTypeId = value;
			}
        }

		private String _classificationVariationName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CLASSIFICATION_VARIATION_NAME" )]		public String ClassificationVariationName 
		{ 
		    get { return _classificationVariationName; } 
			set 
			{
			    _classificationVariationName = value;
			}
        }

		private String _classificationVariationDesc;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CLASSIFICATION_VARIATION_DESC" )]		public String ClassificationVariationDesc 
		{ 
		    get { return _classificationVariationDesc; } 
			set 
			{
			    _classificationVariationDesc = value;
			}
        }


	}

	public partial class ModificationApplicationRepository : Repository<ModificationApplication> 
	{
		public ModificationApplicationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationApplication Get(string projectionName, System.Decimal modificationApplicationId)
		{
			return ((IRepository<ModificationApplication>)this).Get(projectionName, modificationApplicationId, FetchMode.UseIdentityMap);
		}

		public ModificationApplication Get(string projectionName, System.Decimal modificationApplicationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationApplication>)this).Get(projectionName, modificationApplicationId, fetchMode);
		}

		public ModificationApplication Get(Projection projection, System.Decimal modificationApplicationId)
		{
			return ((IRepository<ModificationApplication>)this).Get(projection, modificationApplicationId, FetchMode.UseIdentityMap);
		}

		public ModificationApplication Get(Projection projection, System.Decimal modificationApplicationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationApplication>)this).Get(projection, modificationApplicationId, fetchMode);
		}

		public ModificationApplication Get(string projectionName, System.Decimal modificationApplicationId, params string[] fields)
		{
			return ((IRepository<ModificationApplication>)this).Get(projectionName, modificationApplicationId, fields);
		}

		public ModificationApplication Get(Projection projection, System.Decimal modificationApplicationId, params string[] fields)
		{
			return ((IRepository<ModificationApplication>)this).Get(projection, modificationApplicationId, fields);
		}

		public bool Delete(System.Decimal modificationApplicationId)
		{
			var entity = new ModificationApplication { ModificationApplicationId = modificationApplicationId };
			return this.Delete(entity);
		}

		
		public void DeleteModApplication(Decimal? appId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteModApplicationProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "APP_ID"].Value = appId == null ? (object) DBNull.Value : appId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationApplicationFields
	{
		public const string ModificationApplicationId = "ModificationApplicationId";
		public const string ModificationId = "ModificationId";
		public const string VariationType = "VariationType";
		public const string CommissionType = "CommissionType";
		public const string CommissionSubtype = "CommissionSubtype";
		public const string ClassificationVariationId = "ClassificationVariationId";
		public const string ProcedureNumber = "ProcedureNumber";
		public const string ApplicationDescription = "ApplicationDescription";
		public const string IsAffectedInformation = "IsAffectedInformation";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModificationSubmissionId = "ModificationSubmissionId";
		public const string TemporarySuspensionTypeId = "TemporarySuspensionTypeId";
		public const string ClassificationVariationName = "ClassificationVariationName";
		public const string ClassificationVariationDesc = "ClassificationVariationDesc";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_COUNTRIES_APP")]
	public partial class ModificationCountryApp
	{
		private Decimal _modificationCountryAppId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_COUNTRY_APP_ID", ColumnName ="MODIFICATION_COUNTRY_APP_ID", BaseColumnName ="MODIFICATION_COUNTRY_APP_ID", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public Decimal ModificationCountryAppId 
		{ 
		    get { return _modificationCountryAppId; } 
			set 
			{
			    _modificationCountryAppId = value;
			}
        }

		private Decimal _modificationCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_COUNTRY_ID", BaseColumnName ="MODIFICATION_COUNTRY_ID", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public Decimal ModificationCountryId 
		{ 
		    get { return _modificationCountryId; } 
			set 
			{
			    _modificationCountryId = value;
			}
        }

		private Decimal _modificationApplicationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_APPLICATION_ID", BaseColumnName ="MODIFICATION_APPLICATION_ID", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public Decimal ModificationApplicationId 
		{ 
		    get { return _modificationApplicationId; } 
			set 
			{
			    _modificationApplicationId = value;
			}
        }

		private Decimal? _currencyId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CURRENCY_ID", BaseColumnName ="CURRENCY_ID", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public Decimal? CurrencyId 
		{ 
		    get { return _currencyId; } 
			set 
			{
			    _currencyId = value;
			}
        }

		private DateTime? _decisionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DECISION_DATE", BaseColumnName ="DECISION_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? DecisionDate 
		{ 
		    get { return _decisionDate; } 
			set 
			{
			    _decisionDate = value;
			}
        }

		private Decimal? _modificationCountryStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFICATION_COUNTRY_STATUS_ID", BaseColumnName ="MODIFICATION_COUNTRY_STATUS_ID", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public Decimal? ModificationCountryStatusId 
		{ 
		    get { return _modificationCountryStatusId; } 
			set 
			{
			    _modificationCountryStatusId = value;
			}
        }

		private String _isBindingImplement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_BINDING_IMPLEMENT", BaseColumnName ="IS_BINDING_IMPLEMENT", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsBindingImplement 
		{ 
		    get { return _isBindingImplement; } 
			set 
			{
			    _isBindingImplement = value;
			}
        }

		private String _isNormonPayer;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NORMON_PAYER", BaseColumnName ="IS_NORMON_PAYER", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNormonPayer 
		{ 
		    get { return _isNormonPayer; } 
			set 
			{
			    _isNormonPayer = value;
			}
        }

		private Decimal? _taxValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TAX_VALUE", BaseColumnName ="TAX_VALUE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public Decimal? TaxValue 
		{ 
		    get { return _taxValue; } 
			set 
			{
			    _taxValue = value;
			}
        }

		private String _taxComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="TAX_COMMENTS", BaseColumnName ="TAX_COMMENTS", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String TaxComments 
		{ 
		    get { return _taxComments; } 
			set 
			{
			    _taxComments = value;
			}
        }

		private String _procedureNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PROCEDURE_NUMBER", BaseColumnName ="PROCEDURE_NUMBER", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String ProcedureNumber 
		{ 
		    get { return _procedureNumber; } 
			set 
			{
			    _procedureNumber = value;
			}
        }

		private DateTime? _clientDispatchDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLIENT_DISPATCH_DATE", BaseColumnName ="CLIENT_DISPATCH_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? ClientDispatchDate 
		{ 
		    get { return _clientDispatchDate; } 
			set 
			{
			    _clientDispatchDate = value;
			}
        }

		private DateTime? _expectedSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_SUBMISSION_DATE", BaseColumnName ="EXPECTED_SUBMISSION_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? ExpectedSubmissionDate 
		{ 
		    get { return _expectedSubmissionDate; } 
			set 
			{
			    _expectedSubmissionDate = value;
			}
        }

		private DateTime? _submissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DATE", BaseColumnName ="SUBMISSION_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? SubmissionDate 
		{ 
		    get { return _submissionDate; } 
			set 
			{
			    _submissionDate = value;
			}
        }

		private DateTime? _uploadSpanishPortalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="UPLOAD_SPANISH_PORTAL_DATE", BaseColumnName ="UPLOAD_SPANISH_PORTAL_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? UploadSpanishPortalDate 
		{ 
		    get { return _uploadSpanishPortalDate; } 
			set 
			{
			    _uploadSpanishPortalDate = value;
			}
        }

		private DateTime? _validationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VALIDATION_DATE", BaseColumnName ="VALIDATION_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? ValidationDate 
		{ 
		    get { return _validationDate; } 
			set 
			{
			    _validationDate = value;
			}
        }

		private DateTime? _favourableOpinionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FAVOURABLE_OPINION_DATE", BaseColumnName ="FAVOURABLE_OPINION_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? FavourableOpinionDate 
		{ 
		    get { return _favourableOpinionDate; } 
			set 
			{
			    _favourableOpinionDate = value;
			}
        }

		private DateTime? _expectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DATE", BaseColumnName ="EXPECTED_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? ExpectedDate 
		{ 
		    get { return _expectedDate; } 
			set 
			{
			    _expectedDate = value;
			}
        }

		private String _isBeenApplied;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_BEEN_APPLIED", BaseColumnName ="IS_BEEN_APPLIED", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsBeenApplied 
		{ 
		    get { return _isBeenApplied; } 
			set 
			{
			    _isBeenApplied = value;
			}
        }

		private DateTime? _applicationSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="APPLICATION_SUBMISSION_DATE", BaseColumnName ="APPLICATION_SUBMISSION_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? ApplicationSubmissionDate 
		{ 
		    get { return _applicationSubmissionDate; } 
			set 
			{
			    _applicationSubmissionDate = value;
			}
        }

		private DateTime? _expectedSuspensionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_SUSPENSION_DATE", BaseColumnName ="EXPECTED_SUSPENSION_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? ExpectedSuspensionDate 
		{ 
		    get { return _expectedSuspensionDate; } 
			set 
			{
			    _expectedSuspensionDate = value;
			}
        }

		private DateTime? _suspensionRenewalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUSPENSION_RENEWAL_DATE", BaseColumnName ="SUSPENSION_RENEWAL_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? SuspensionRenewalDate 
		{ 
		    get { return _suspensionRenewalDate; } 
			set 
			{
			    _suspensionRenewalDate = value;
			}
        }

		private DateTime? _suspensionLiftingDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUSPENSION_LIFTING_DATE", BaseColumnName ="SUSPENSION_LIFTING_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? SuspensionLiftingDate 
		{ 
		    get { return _suspensionLiftingDate; } 
			set 
			{
			    _suspensionLiftingDate = value;
			}
        }

		private DateTime? _raefarInclusionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RAEFAR_INCLUSION_DATE", BaseColumnName ="RAEFAR_INCLUSION_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? RaefarInclusionDate 
		{ 
		    get { return _raefarInclusionDate; } 
			set 
			{
			    _raefarInclusionDate = value;
			}
        }

		private DateTime? _expectedDispatchClientDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DISPATCH_CLIENT_DATE", BaseColumnName ="EXPECTED_DISPATCH_CLIENT_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? ExpectedDispatchClientDate 
		{ 
		    get { return _expectedDispatchClientDate; } 
			set 
			{
			    _expectedDispatchClientDate = value;
			}
        }

		private DateTime? _liftingExpectedDispatch;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LIFTING_EXPECTED_DISPATCH", BaseColumnName ="LIFTING_EXPECTED_DISPATCH", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? LiftingExpectedDispatch 
		{ 
		    get { return _liftingExpectedDispatch; } 
			set 
			{
			    _liftingExpectedDispatch = value;
			}
        }

		private DateTime? _liftingDispatch;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LIFTING_DISPATCH", BaseColumnName ="LIFTING_DISPATCH", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? LiftingDispatch 
		{ 
		    get { return _liftingDispatch; } 
			set 
			{
			    _liftingDispatch = value;
			}
        }

		private DateTime? _liftingExpectedSubmission;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LIFTING_EXPECTED_SUBMISSION", BaseColumnName ="LIFTING_EXPECTED_SUBMISSION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? LiftingExpectedSubmission 
		{ 
		    get { return _liftingExpectedSubmission; } 
			set 
			{
			    _liftingExpectedSubmission = value;
			}
        }

		private DateTime? _liftingSubmission;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LIFTING_SUBMISSION", BaseColumnName ="LIFTING_SUBMISSION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? LiftingSubmission 
		{ 
		    get { return _liftingSubmission; } 
			set 
			{
			    _liftingSubmission = value;
			}
        }

		private DateTime? _liftingDecisionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LIFTING_DECISION_DATE", BaseColumnName ="LIFTING_DECISION_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? LiftingDecisionDate 
		{ 
		    get { return _liftingDecisionDate; } 
			set 
			{
			    _liftingDecisionDate = value;
			}
        }

		private Decimal? _liftingStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LIFTING_STATUS_ID", BaseColumnName ="LIFTING_STATUS_ID", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public Decimal? LiftingStatusId 
		{ 
		    get { return _liftingStatusId; } 
			set 
			{
			    _liftingStatusId = value;
			}
        }

		private DateTime? _clientInformedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLIENT_INFORMED_DATE", BaseColumnName ="CLIENT_INFORMED_DATE", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public DateTime? ClientInformedDate 
		{ 
		    get { return _clientInformedDate; } 
			set 
			{
			    _clientInformedDate = value;
			}
        }

		private String _isNaNationalTranslations;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_NATIONAL_TRANSLATIONS", BaseColumnName ="IS_NA_NATIONAL_TRANSLATIONS", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaNationalTranslations 
		{ 
		    get { return _isNaNationalTranslations; } 
			set 
			{
			    _isNaNationalTranslations = value;
			}
        }

		private String _mockupComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="MOCKUP_COMMENTS", BaseColumnName ="MOCKUP_COMMENTS", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String MockupComments 
		{ 
		    get { return _mockupComments; } 
			set 
			{
			    _mockupComments = value;
			}
        }

		private String _isNaDecision;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DECISION", BaseColumnName ="IS_NA_DECISION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaDecision 
		{ 
		    get { return _isNaDecision; } 
			set 
			{
			    _isNaDecision = value;
			}
        }

		private String _isNaClientDispatch;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_CLIENT_DISPATCH", BaseColumnName ="IS_NA_CLIENT_DISPATCH", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaClientDispatch 
		{ 
		    get { return _isNaClientDispatch; } 
			set 
			{
			    _isNaClientDispatch = value;
			}
        }

		private String _isNaExpectedSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_SUBMISSION", BaseColumnName ="IS_NA_EXPECTED_SUBMISSION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaExpectedSubmission 
		{ 
		    get { return _isNaExpectedSubmission; } 
			set 
			{
			    _isNaExpectedSubmission = value;
			}
        }

		private String _isNaSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUBMISSION", BaseColumnName ="IS_NA_SUBMISSION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaSubmission 
		{ 
		    get { return _isNaSubmission; } 
			set 
			{
			    _isNaSubmission = value;
			}
        }

		private String _isNaUploadSpanish;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_UPLOAD_SPANISH", BaseColumnName ="IS_NA_UPLOAD_SPANISH", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaUploadSpanish 
		{ 
		    get { return _isNaUploadSpanish; } 
			set 
			{
			    _isNaUploadSpanish = value;
			}
        }

		private String _isNaValidation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_VALIDATION", BaseColumnName ="IS_NA_VALIDATION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaValidation 
		{ 
		    get { return _isNaValidation; } 
			set 
			{
			    _isNaValidation = value;
			}
        }

		private String _isNaFavourableOpinion;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_FAVOURABLE_OPINION", BaseColumnName ="IS_NA_FAVOURABLE_OPINION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaFavourableOpinion 
		{ 
		    get { return _isNaFavourableOpinion; } 
			set 
			{
			    _isNaFavourableOpinion = value;
			}
        }

		private String _isNaExpected;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED", BaseColumnName ="IS_NA_EXPECTED", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaExpected 
		{ 
		    get { return _isNaExpected; } 
			set 
			{
			    _isNaExpected = value;
			}
        }

		private String _isNaApplicationSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_APPLICATION_SUBMISSION", BaseColumnName ="IS_NA_APPLICATION_SUBMISSION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaApplicationSubmission 
		{ 
		    get { return _isNaApplicationSubmission; } 
			set 
			{
			    _isNaApplicationSubmission = value;
			}
        }

		private String _isNaExpectedSuspension;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_SUSPENSION", BaseColumnName ="IS_NA_EXPECTED_SUSPENSION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaExpectedSuspension 
		{ 
		    get { return _isNaExpectedSuspension; } 
			set 
			{
			    _isNaExpectedSuspension = value;
			}
        }

		private String _isNaSuspensionRenewal;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUSPENSION_RENEWAL", BaseColumnName ="IS_NA_SUSPENSION_RENEWAL", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaSuspensionRenewal 
		{ 
		    get { return _isNaSuspensionRenewal; } 
			set 
			{
			    _isNaSuspensionRenewal = value;
			}
        }

		private String _isNaSuspensionLifting;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUSPENSION_LIFTING", BaseColumnName ="IS_NA_SUSPENSION_LIFTING", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaSuspensionLifting 
		{ 
		    get { return _isNaSuspensionLifting; } 
			set 
			{
			    _isNaSuspensionLifting = value;
			}
        }

		private String _isNaRaefarInclusion;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RAEFAR_INCLUSION", BaseColumnName ="IS_NA_RAEFAR_INCLUSION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaRaefarInclusion 
		{ 
		    get { return _isNaRaefarInclusion; } 
			set 
			{
			    _isNaRaefarInclusion = value;
			}
        }

		private String _isNaExpectedDispatch;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DISPATCH", BaseColumnName ="IS_NA_EXPECTED_DISPATCH", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaExpectedDispatch 
		{ 
		    get { return _isNaExpectedDispatch; } 
			set 
			{
			    _isNaExpectedDispatch = value;
			}
        }

		private String _isNaLiftingDispatch;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_LIFTING_DISPATCH", BaseColumnName ="IS_NA_LIFTING_DISPATCH", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaLiftingDispatch 
		{ 
		    get { return _isNaLiftingDispatch; } 
			set 
			{
			    _isNaLiftingDispatch = value;
			}
        }

		private String _isNaLiftingExpSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_LIFTING_EXP_SUBMISSION", BaseColumnName ="IS_NA_LIFTING_EXP_SUBMISSION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaLiftingExpSubmission 
		{ 
		    get { return _isNaLiftingExpSubmission; } 
			set 
			{
			    _isNaLiftingExpSubmission = value;
			}
        }

		private String _isNaLiftingSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_LIFTING_SUBMISSION", BaseColumnName ="IS_NA_LIFTING_SUBMISSION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaLiftingSubmission 
		{ 
		    get { return _isNaLiftingSubmission; } 
			set 
			{
			    _isNaLiftingSubmission = value;
			}
        }

		private String _isNaLiftingDecision;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_LIFTING_DECISION", BaseColumnName ="IS_NA_LIFTING_DECISION", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaLiftingDecision 
		{ 
		    get { return _isNaLiftingDecision; } 
			set 
			{
			    _isNaLiftingDecision = value;
			}
        }

		private String _isNaClientInformed;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_CLIENT_INFORMED", BaseColumnName ="IS_NA_CLIENT_INFORMED", BaseTableName = "MODIFICATION_COUNTRIES_APP" )]		public String IsNaClientInformed 
		{ 
		    get { return _isNaClientInformed; } 
			set 
			{
			    _isNaClientInformed = value;
			}
        }

		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private String _statusDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS_DESCRIPTION" )]		public String StatusDescription 
		{ 
		    get { return _statusDescription; } 
			set 
			{
			    _statusDescription = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private String _currencyName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CURRENCY_NAME" )]		public String CurrencyName 
		{ 
		    get { return _currencyName; } 
			set 
			{
			    _currencyName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }

		private Decimal _modificationSubmissionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_SUBMISSION_ID" )]		public Decimal ModificationSubmissionId 
		{ 
		    get { return _modificationSubmissionId; } 
			set 
			{
			    _modificationSubmissionId = value;
			}
        }

		private String _liftingStatus;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LIFTING_STATUS" )]		public String LiftingStatus 
		{ 
		    get { return _liftingStatus; } 
			set 
			{
			    _liftingStatus = value;
			}
        }

		private Decimal? _decisionYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DECISION_YEAR" )]		public Decimal? DecisionYear 
		{ 
		    get { return _decisionYear; } 
			set 
			{
			    _decisionYear = value;
			}
        }

		private Decimal? _decisionMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DECISION_MONTH" )]		public Decimal? DecisionMonth 
		{ 
		    get { return _decisionMonth; } 
			set 
			{
			    _decisionMonth = value;
			}
        }

		private Decimal? _liftingDispatchYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LIFTING_DISPATCH_YEAR" )]		public Decimal? LiftingDispatchYear 
		{ 
		    get { return _liftingDispatchYear; } 
			set 
			{
			    _liftingDispatchYear = value;
			}
        }

		private Decimal? _liftingDispatchMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LIFTING_DISPATCH_MONTH" )]		public Decimal? LiftingDispatchMonth 
		{ 
		    get { return _liftingDispatchMonth; } 
			set 
			{
			    _liftingDispatchMonth = value;
			}
        }

		private Decimal? _liftingSubmissionYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LIFTING_SUBMISSION_YEAR" )]		public Decimal? LiftingSubmissionYear 
		{ 
		    get { return _liftingSubmissionYear; } 
			set 
			{
			    _liftingSubmissionYear = value;
			}
        }

		private Decimal? _liftingSubmissionMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LIFTING_SUBMISSION_MONTH" )]		public Decimal? LiftingSubmissionMonth 
		{ 
		    get { return _liftingSubmissionMonth; } 
			set 
			{
			    _liftingSubmissionMonth = value;
			}
        }

		private Decimal? _liftingDecisionYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LIFTING_DECISION_YEAR" )]		public Decimal? LiftingDecisionYear 
		{ 
		    get { return _liftingDecisionYear; } 
			set 
			{
			    _liftingDecisionYear = value;
			}
        }

		private Decimal? _liftingDecisionMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LIFTING_DECISION_MONTH" )]		public Decimal? LiftingDecisionMonth 
		{ 
		    get { return _liftingDecisionMonth; } 
			set 
			{
			    _liftingDecisionMonth = value;
			}
        }


	}

	public partial class ModificationCountryAppRepository : Repository<ModificationCountryApp> 
	{
		public ModificationCountryAppRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationCountryApp Get(string projectionName, System.Decimal modificationCountryAppId)
		{
			return ((IRepository<ModificationCountryApp>)this).Get(projectionName, modificationCountryAppId, FetchMode.UseIdentityMap);
		}

		public ModificationCountryApp Get(string projectionName, System.Decimal modificationCountryAppId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCountryApp>)this).Get(projectionName, modificationCountryAppId, fetchMode);
		}

		public ModificationCountryApp Get(Projection projection, System.Decimal modificationCountryAppId)
		{
			return ((IRepository<ModificationCountryApp>)this).Get(projection, modificationCountryAppId, FetchMode.UseIdentityMap);
		}

		public ModificationCountryApp Get(Projection projection, System.Decimal modificationCountryAppId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCountryApp>)this).Get(projection, modificationCountryAppId, fetchMode);
		}

		public ModificationCountryApp Get(string projectionName, System.Decimal modificationCountryAppId, params string[] fields)
		{
			return ((IRepository<ModificationCountryApp>)this).Get(projectionName, modificationCountryAppId, fields);
		}

		public ModificationCountryApp Get(Projection projection, System.Decimal modificationCountryAppId, params string[] fields)
		{
			return ((IRepository<ModificationCountryApp>)this).Get(projection, modificationCountryAppId, fields);
		}

		public bool Delete(System.Decimal modificationCountryAppId)
		{
			var entity = new ModificationCountryApp { ModificationCountryAppId = modificationCountryAppId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationCountryAppFields
	{
		public const string ModificationCountryAppId = "ModificationCountryAppId";
		public const string ModificationCountryId = "ModificationCountryId";
		public const string ModificationApplicationId = "ModificationApplicationId";
		public const string CurrencyId = "CurrencyId";
		public const string DecisionDate = "DecisionDate";
		public const string ModificationCountryStatusId = "ModificationCountryStatusId";
		public const string IsBindingImplement = "IsBindingImplement";
		public const string IsNormonPayer = "IsNormonPayer";
		public const string TaxValue = "TaxValue";
		public const string TaxComments = "TaxComments";
		public const string ProcedureNumber = "ProcedureNumber";
		public const string ClientDispatchDate = "ClientDispatchDate";
		public const string ExpectedSubmissionDate = "ExpectedSubmissionDate";
		public const string SubmissionDate = "SubmissionDate";
		public const string UploadSpanishPortalDate = "UploadSpanishPortalDate";
		public const string ValidationDate = "ValidationDate";
		public const string FavourableOpinionDate = "FavourableOpinionDate";
		public const string ExpectedDate = "ExpectedDate";
		public const string IsBeenApplied = "IsBeenApplied";
		public const string ApplicationSubmissionDate = "ApplicationSubmissionDate";
		public const string ExpectedSuspensionDate = "ExpectedSuspensionDate";
		public const string SuspensionRenewalDate = "SuspensionRenewalDate";
		public const string SuspensionLiftingDate = "SuspensionLiftingDate";
		public const string RaefarInclusionDate = "RaefarInclusionDate";
		public const string ExpectedDispatchClientDate = "ExpectedDispatchClientDate";
		public const string LiftingExpectedDispatch = "LiftingExpectedDispatch";
		public const string LiftingDispatch = "LiftingDispatch";
		public const string LiftingExpectedSubmission = "LiftingExpectedSubmission";
		public const string LiftingSubmission = "LiftingSubmission";
		public const string LiftingDecisionDate = "LiftingDecisionDate";
		public const string LiftingStatusId = "LiftingStatusId";
		public const string ClientInformedDate = "ClientInformedDate";
		public const string IsNaNationalTranslations = "IsNaNationalTranslations";
		public const string MockupComments = "MockupComments";
		public const string IsNaDecision = "IsNaDecision";
		public const string IsNaClientDispatch = "IsNaClientDispatch";
		public const string IsNaExpectedSubmission = "IsNaExpectedSubmission";
		public const string IsNaSubmission = "IsNaSubmission";
		public const string IsNaUploadSpanish = "IsNaUploadSpanish";
		public const string IsNaValidation = "IsNaValidation";
		public const string IsNaFavourableOpinion = "IsNaFavourableOpinion";
		public const string IsNaExpected = "IsNaExpected";
		public const string IsNaApplicationSubmission = "IsNaApplicationSubmission";
		public const string IsNaExpectedSuspension = "IsNaExpectedSuspension";
		public const string IsNaSuspensionRenewal = "IsNaSuspensionRenewal";
		public const string IsNaSuspensionLifting = "IsNaSuspensionLifting";
		public const string IsNaRaefarInclusion = "IsNaRaefarInclusion";
		public const string IsNaExpectedDispatch = "IsNaExpectedDispatch";
		public const string IsNaLiftingDispatch = "IsNaLiftingDispatch";
		public const string IsNaLiftingExpSubmission = "IsNaLiftingExpSubmission";
		public const string IsNaLiftingSubmission = "IsNaLiftingSubmission";
		public const string IsNaLiftingDecision = "IsNaLiftingDecision";
		public const string IsNaClientInformed = "IsNaClientInformed";
		public const string ModificationId = "ModificationId";
		public const string StatusDescription = "StatusDescription";
		public const string CountryName = "CountryName";
		public const string ProductName = "ProductName";
		public const string CountryId = "CountryId";
		public const string CurrencyName = "CurrencyName";
		public const string DossierId = "DossierId";
		public const string TwoLettersCode = "TwoLettersCode";
		public const string ModificationSubmissionId = "ModificationSubmissionId";
		public const string LiftingStatus = "LiftingStatus";
		public const string DecisionYear = "DecisionYear";
		public const string DecisionMonth = "DecisionMonth";
		public const string LiftingDispatchYear = "LiftingDispatchYear";
		public const string LiftingDispatchMonth = "LiftingDispatchMonth";
		public const string LiftingSubmissionYear = "LiftingSubmissionYear";
		public const string LiftingSubmissionMonth = "LiftingSubmissionMonth";
		public const string LiftingDecisionYear = "LiftingDecisionYear";
		public const string LiftingDecisionMonth = "LiftingDecisionMonth";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="CRITERIA_FIELD_TYPES")]
	public partial class CriteriaFieldType
	{
		private Decimal _fieldTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="FIELD_TYPE_ID", BaseColumnName ="FIELD_TYPE_ID", BaseTableName = "CRITERIA_FIELD_TYPES" )]		public Decimal FieldTypeId 
		{ 
		    get { return _fieldTypeId; } 
			set 
			{
			    _fieldTypeId = value;
			}
        }

		private String _fieldTypeName;
		[DataMember]
		[SqlField(DbType.String, 1258, ColumnName ="FIELD_TYPE_NAME", BaseColumnName ="FIELD_TYPE_NAME", BaseTableName = "CRITERIA_FIELD_TYPES" )]		public String FieldTypeName 
		{ 
		    get { return _fieldTypeName; } 
			set 
			{
			    _fieldTypeName = value;
			}
        }


	}

	public partial class CriteriaFieldTypeRepository : Repository<CriteriaFieldType> 
	{
		public CriteriaFieldTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public CriteriaFieldType Get(string projectionName, System.Decimal fieldTypeId)
		{
			return ((IRepository<CriteriaFieldType>)this).Get(projectionName, fieldTypeId, FetchMode.UseIdentityMap);
		}

		public CriteriaFieldType Get(string projectionName, System.Decimal fieldTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CriteriaFieldType>)this).Get(projectionName, fieldTypeId, fetchMode);
		}

		public CriteriaFieldType Get(Projection projection, System.Decimal fieldTypeId)
		{
			return ((IRepository<CriteriaFieldType>)this).Get(projection, fieldTypeId, FetchMode.UseIdentityMap);
		}

		public CriteriaFieldType Get(Projection projection, System.Decimal fieldTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CriteriaFieldType>)this).Get(projection, fieldTypeId, fetchMode);
		}

		public CriteriaFieldType Get(string projectionName, System.Decimal fieldTypeId, params string[] fields)
		{
			return ((IRepository<CriteriaFieldType>)this).Get(projectionName, fieldTypeId, fields);
		}

		public CriteriaFieldType Get(Projection projection, System.Decimal fieldTypeId, params string[] fields)
		{
			return ((IRepository<CriteriaFieldType>)this).Get(projection, fieldTypeId, fields);
		}

		public bool Delete(System.Decimal fieldTypeId)
		{
			var entity = new CriteriaFieldType { FieldTypeId = fieldTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class CriteriaFieldTypeFields
	{
		public const string FieldTypeId = "FieldTypeId";
		public const string FieldTypeName = "FieldTypeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="CUSTOM_QUERY_FIELDS")]
	public partial class CustomQueryField
	{
		private String _entityName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ENTITY_NAME", BaseColumnName ="ENTITY_NAME", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String EntityName 
		{ 
		    get { return _entityName; } 
			set 
			{
			    _entityName = value;
			}
        }

		private String _fieldName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FIELD_NAME", BaseColumnName ="FIELD_NAME", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String FieldName 
		{ 
		    get { return _fieldName; } 
			set 
			{
			    _fieldName = value;
			}
        }

		private Decimal _fieldTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="FIELD_TYPE_ID", BaseColumnName ="FIELD_TYPE_ID", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public Decimal FieldTypeId 
		{ 
		    get { return _fieldTypeId; } 
			set 
			{
			    _fieldTypeId = value;
			}
        }

		private String _fieldLabel;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FIELD_LABEL", BaseColumnName ="FIELD_LABEL", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String FieldLabel 
		{ 
		    get { return _fieldLabel; } 
			set 
			{
			    _fieldLabel = value;
			}
        }

		private String _searchType;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SEARCH_TYPE", BaseColumnName ="SEARCH_TYPE", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String SearchType 
		{ 
		    get { return _searchType; } 
			set 
			{
			    _searchType = value;
			}
        }

		private String _isCriteriaField;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_CRITERIA_FIELD", BaseColumnName ="IS_CRITERIA_FIELD", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String IsCriteriaField 
		{ 
		    get { return _isCriteriaField; } 
			set 
			{
			    _isCriteriaField = value;
			}
        }

		private String _isListField;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_LIST_FIELD", BaseColumnName ="IS_LIST_FIELD", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String IsListField 
		{ 
		    get { return _isListField; } 
			set 
			{
			    _isListField = value;
			}
        }

		private Decimal _customQueryFieldId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="CUSTOM_QUERY_FIELD_ID", BaseColumnName ="CUSTOM_QUERY_FIELD_ID", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public Decimal CustomQueryFieldId 
		{ 
		    get { return _customQueryFieldId; } 
			set 
			{
			    _customQueryFieldId = value;
			}
        }

		private String _referenceDataPropName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="REFERENCE_DATA_PROP_NAME", BaseColumnName ="REFERENCE_DATA_PROP_NAME", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String ReferenceDataPropName 
		{ 
		    get { return _referenceDataPropName; } 
			set 
			{
			    _referenceDataPropName = value;
			}
        }

		private String _referenceTableFieldId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="REFERENCE_TABLE_FIELD_ID", BaseColumnName ="REFERENCE_TABLE_FIELD_ID", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String ReferenceTableFieldId 
		{ 
		    get { return _referenceTableFieldId; } 
			set 
			{
			    _referenceTableFieldId = value;
			}
        }

		private String _referenceTableFieldName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="REFERENCE_TABLE_FIELD_NAME", BaseColumnName ="REFERENCE_TABLE_FIELD_NAME", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String ReferenceTableFieldName 
		{ 
		    get { return _referenceTableFieldName; } 
			set 
			{
			    _referenceTableFieldName = value;
			}
        }

		private String _referenceTableNumericId;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="REFERENCE_TABLE_NUMERIC_ID", BaseColumnName ="REFERENCE_TABLE_NUMERIC_ID", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String ReferenceTableNumericId 
		{ 
		    get { return _referenceTableNumericId; } 
			set 
			{
			    _referenceTableNumericId = value;
			}
        }

		private String _section;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SECTION", BaseColumnName ="SECTION", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String Section 
		{ 
		    get { return _section; } 
			set 
			{
			    _section = value;
			}
        }

		private Decimal? _sectionOrder;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SECTION_ORDER", BaseColumnName ="SECTION_ORDER", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public Decimal? SectionOrder 
		{ 
		    get { return _sectionOrder; } 
			set 
			{
			    _sectionOrder = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "CUSTOM_QUERY_FIELDS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class CustomQueryFieldRepository : Repository<CustomQueryField> 
	{
		public CustomQueryFieldRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public CustomQueryField Get(string projectionName, System.Decimal customQueryFieldId)
		{
			return ((IRepository<CustomQueryField>)this).Get(projectionName, customQueryFieldId, FetchMode.UseIdentityMap);
		}

		public CustomQueryField Get(string projectionName, System.Decimal customQueryFieldId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CustomQueryField>)this).Get(projectionName, customQueryFieldId, fetchMode);
		}

		public CustomQueryField Get(Projection projection, System.Decimal customQueryFieldId)
		{
			return ((IRepository<CustomQueryField>)this).Get(projection, customQueryFieldId, FetchMode.UseIdentityMap);
		}

		public CustomQueryField Get(Projection projection, System.Decimal customQueryFieldId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CustomQueryField>)this).Get(projection, customQueryFieldId, fetchMode);
		}

		public CustomQueryField Get(string projectionName, System.Decimal customQueryFieldId, params string[] fields)
		{
			return ((IRepository<CustomQueryField>)this).Get(projectionName, customQueryFieldId, fields);
		}

		public CustomQueryField Get(Projection projection, System.Decimal customQueryFieldId, params string[] fields)
		{
			return ((IRepository<CustomQueryField>)this).Get(projection, customQueryFieldId, fields);
		}

		public bool Delete(System.Decimal customQueryFieldId)
		{
			var entity = new CustomQueryField { CustomQueryFieldId = customQueryFieldId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class CustomQueryFieldFields
	{
		public const string EntityName = "EntityName";
		public const string FieldName = "FieldName";
		public const string FieldTypeId = "FieldTypeId";
		public const string FieldLabel = "FieldLabel";
		public const string SearchType = "SearchType";
		public const string IsCriteriaField = "IsCriteriaField";
		public const string IsListField = "IsListField";
		public const string CustomQueryFieldId = "CustomQueryFieldId";
		public const string ReferenceDataPropName = "ReferenceDataPropName";
		public const string ReferenceTableFieldId = "ReferenceTableFieldId";
		public const string ReferenceTableFieldName = "ReferenceTableFieldName";
		public const string ReferenceTableNumericId = "ReferenceTableNumericId";
		public const string Section = "Section";
		public const string SectionOrder = "SectionOrder";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="CRITERIA_OPERATORS")]
	public partial class CriteriaOperator
	{
		private String _operatorKey;
		[DataMember]
		[SqlField(DbType.String, 128, IsKey=true, ColumnName ="OPERATOR_KEY", BaseColumnName ="OPERATOR_KEY", BaseTableName = "CRITERIA_OPERATORS" )]		public String OperatorKey 
		{ 
		    get { return _operatorKey; } 
			set 
			{
			    _operatorKey = value;
			}
        }

		private Decimal _operatorId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="OPERATOR_ID", BaseColumnName ="OPERATOR_ID", BaseTableName = "CRITERIA_OPERATORS" )]		public Decimal OperatorId 
		{ 
		    get { return _operatorId; } 
			set 
			{
			    _operatorId = value;
			}
        }

		private String _operatorLabel;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="OPERATOR_LABEL", BaseColumnName ="OPERATOR_LABEL", BaseTableName = "CRITERIA_OPERATORS" )]		public String OperatorLabel 
		{ 
		    get { return _operatorLabel; } 
			set 
			{
			    _operatorLabel = value;
			}
        }


	}

	public partial class CriteriaOperatorRepository : Repository<CriteriaOperator> 
	{
		public CriteriaOperatorRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public CriteriaOperator Get(string projectionName, System.String operatorKey)
		{
			return ((IRepository<CriteriaOperator>)this).Get(projectionName, operatorKey, FetchMode.UseIdentityMap);
		}

		public CriteriaOperator Get(string projectionName, System.String operatorKey, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CriteriaOperator>)this).Get(projectionName, operatorKey, fetchMode);
		}

		public CriteriaOperator Get(Projection projection, System.String operatorKey)
		{
			return ((IRepository<CriteriaOperator>)this).Get(projection, operatorKey, FetchMode.UseIdentityMap);
		}

		public CriteriaOperator Get(Projection projection, System.String operatorKey, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CriteriaOperator>)this).Get(projection, operatorKey, fetchMode);
		}

		public CriteriaOperator Get(string projectionName, System.String operatorKey, params string[] fields)
		{
			return ((IRepository<CriteriaOperator>)this).Get(projectionName, operatorKey, fields);
		}

		public CriteriaOperator Get(Projection projection, System.String operatorKey, params string[] fields)
		{
			return ((IRepository<CriteriaOperator>)this).Get(projection, operatorKey, fields);
		}

		public bool Delete(System.String operatorKey)
		{
			var entity = new CriteriaOperator { OperatorKey = operatorKey };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class CriteriaOperatorFields
	{
		public const string OperatorKey = "OperatorKey";
		public const string OperatorId = "OperatorId";
		public const string OperatorLabel = "OperatorLabel";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="CUSTOM_QUERIES")]
	public partial class CustomQuery
	{
		private Decimal _customQueryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "CUSTOM_QUERY_ID", ColumnName ="CUSTOM_QUERY_ID", BaseColumnName ="CUSTOM_QUERY_ID", BaseTableName = "CUSTOM_QUERIES" )]		public Decimal CustomQueryId 
		{ 
		    get { return _customQueryId; } 
			set 
			{
			    _customQueryId = value;
			}
        }

		private String _customQueryName;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="CUSTOM_QUERY_NAME", BaseColumnName ="CUSTOM_QUERY_NAME", BaseTableName = "CUSTOM_QUERIES" )]		public String CustomQueryName 
		{ 
		    get { return _customQueryName; } 
			set 
			{
			    _customQueryName = value;
			}
        }

		private Byte[] _encodedQuery;
		[DataMember]
		[SqlField(DbType.Binary, 2147483647, ColumnName ="ENCODED_QUERY", BaseColumnName ="ENCODED_QUERY", BaseTableName = "CUSTOM_QUERIES" )]		public Byte[] EncodedQuery 
		{ 
		    get { return _encodedQuery; } 
			set 
			{
			    _encodedQuery = value;
			}
        }

		private Decimal _userId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="USER_ID", BaseColumnName ="USER_ID", BaseTableName = "CUSTOM_QUERIES" )]		public Decimal UserId 
		{ 
		    get { return _userId; } 
			set 
			{
			    _userId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "CUSTOM_QUERIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "CUSTOM_QUERIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "CUSTOM_QUERIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "CUSTOM_QUERIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _searchType;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SEARCH_TYPE", BaseColumnName ="SEARCH_TYPE", BaseTableName = "CUSTOM_QUERIES" )]		public String SearchType 
		{ 
		    get { return _searchType; } 
			set 
			{
			    _searchType = value;
			}
        }

		private String _isPublic;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_PUBLIC", BaseColumnName ="IS_PUBLIC", BaseTableName = "CUSTOM_QUERIES" )]		public String IsPublic 
		{ 
		    get { return _isPublic; } 
			set 
			{
			    _isPublic = value;
			}
        }


	}

	public partial class CustomQueryRepository : Repository<CustomQuery> 
	{
		public CustomQueryRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public CustomQuery Get(string projectionName, System.Decimal customQueryId)
		{
			return ((IRepository<CustomQuery>)this).Get(projectionName, customQueryId, FetchMode.UseIdentityMap);
		}

		public CustomQuery Get(string projectionName, System.Decimal customQueryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CustomQuery>)this).Get(projectionName, customQueryId, fetchMode);
		}

		public CustomQuery Get(Projection projection, System.Decimal customQueryId)
		{
			return ((IRepository<CustomQuery>)this).Get(projection, customQueryId, FetchMode.UseIdentityMap);
		}

		public CustomQuery Get(Projection projection, System.Decimal customQueryId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CustomQuery>)this).Get(projection, customQueryId, fetchMode);
		}

		public CustomQuery Get(string projectionName, System.Decimal customQueryId, params string[] fields)
		{
			return ((IRepository<CustomQuery>)this).Get(projectionName, customQueryId, fields);
		}

		public CustomQuery Get(Projection projection, System.Decimal customQueryId, params string[] fields)
		{
			return ((IRepository<CustomQuery>)this).Get(projection, customQueryId, fields);
		}

		public bool Delete(System.Decimal customQueryId)
		{
			var entity = new CustomQuery { CustomQueryId = customQueryId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class CustomQueryFields
	{
		public const string CustomQueryId = "CustomQueryId";
		public const string CustomQueryName = "CustomQueryName";
		public const string EncodedQuery = "EncodedQuery";
		public const string UserId = "UserId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string SearchType = "SearchType";
		public const string IsPublic = "IsPublic";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="CRITERIA_LOGICAL_OPERATORS")]
	public partial class CriteriaLogicalOperator
	{
		private Decimal _logicalOperatorId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="LOGICAL_OPERATOR_ID", BaseColumnName ="LOGICAL_OPERATOR_ID", BaseTableName = "CRITERIA_LOGICAL_OPERATORS" )]		public Decimal LogicalOperatorId 
		{ 
		    get { return _logicalOperatorId; } 
			set 
			{
			    _logicalOperatorId = value;
			}
        }

		private String _logicalOperatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOGICAL_OPERATOR_NAME", BaseColumnName ="LOGICAL_OPERATOR_NAME", BaseTableName = "CRITERIA_LOGICAL_OPERATORS" )]		public String LogicalOperatorName 
		{ 
		    get { return _logicalOperatorName; } 
			set 
			{
			    _logicalOperatorName = value;
			}
        }

		private String _isFilterStart;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FILTER_START", BaseColumnName ="IS_FILTER_START", BaseTableName = "CRITERIA_LOGICAL_OPERATORS" )]		public String IsFilterStart 
		{ 
		    get { return _isFilterStart; } 
			set 
			{
			    _isFilterStart = value;
			}
        }

		private String _isFilterEnd;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FILTER_END", BaseColumnName ="IS_FILTER_END", BaseTableName = "CRITERIA_LOGICAL_OPERATORS" )]		public String IsFilterEnd 
		{ 
		    get { return _isFilterEnd; } 
			set 
			{
			    _isFilterEnd = value;
			}
        }

		private Decimal? _logicalOperatorOrder;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LOGICAL_OPERATOR_ORDER", BaseColumnName ="LOGICAL_OPERATOR_ORDER", BaseTableName = "CRITERIA_LOGICAL_OPERATORS" )]		public Decimal? LogicalOperatorOrder 
		{ 
		    get { return _logicalOperatorOrder; } 
			set 
			{
			    _logicalOperatorOrder = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "CRITERIA_LOGICAL_OPERATORS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class CriteriaLogicalOperatorRepository : Repository<CriteriaLogicalOperator> 
	{
		public CriteriaLogicalOperatorRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public CriteriaLogicalOperator Get(string projectionName, System.Decimal logicalOperatorId)
		{
			return ((IRepository<CriteriaLogicalOperator>)this).Get(projectionName, logicalOperatorId, FetchMode.UseIdentityMap);
		}

		public CriteriaLogicalOperator Get(string projectionName, System.Decimal logicalOperatorId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CriteriaLogicalOperator>)this).Get(projectionName, logicalOperatorId, fetchMode);
		}

		public CriteriaLogicalOperator Get(Projection projection, System.Decimal logicalOperatorId)
		{
			return ((IRepository<CriteriaLogicalOperator>)this).Get(projection, logicalOperatorId, FetchMode.UseIdentityMap);
		}

		public CriteriaLogicalOperator Get(Projection projection, System.Decimal logicalOperatorId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<CriteriaLogicalOperator>)this).Get(projection, logicalOperatorId, fetchMode);
		}

		public CriteriaLogicalOperator Get(string projectionName, System.Decimal logicalOperatorId, params string[] fields)
		{
			return ((IRepository<CriteriaLogicalOperator>)this).Get(projectionName, logicalOperatorId, fields);
		}

		public CriteriaLogicalOperator Get(Projection projection, System.Decimal logicalOperatorId, params string[] fields)
		{
			return ((IRepository<CriteriaLogicalOperator>)this).Get(projection, logicalOperatorId, fields);
		}

		public bool Delete(System.Decimal logicalOperatorId)
		{
			var entity = new CriteriaLogicalOperator { LogicalOperatorId = logicalOperatorId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class CriteriaLogicalOperatorFields
	{
		public const string LogicalOperatorId = "LogicalOperatorId";
		public const string LogicalOperatorName = "LogicalOperatorName";
		public const string IsFilterStart = "IsFilterStart";
		public const string IsFilterEnd = "IsFilterEnd";
		public const string LogicalOperatorOrder = "LogicalOperatorOrder";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="VERSION_TYPES")]
	public partial class VersionType
	{
		private String _versionTypeId;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="VERSION_TYPE_ID", BaseColumnName ="VERSION_TYPE_ID", BaseTableName = "VERSION_TYPES" )]		public String VersionTypeId 
		{ 
		    get { return _versionTypeId; } 
			set 
			{
			    _versionTypeId = value;
			}
        }

		private String _versionTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION_TYPE_NAME", BaseColumnName ="VERSION_TYPE_NAME", BaseTableName = "VERSION_TYPES" )]		public String VersionTypeName 
		{ 
		    get { return _versionTypeName; } 
			set 
			{
			    _versionTypeName = value;
			}
        }


	}

	public partial class VersionTypeRepository : Repository<VersionType> 
	{
		public VersionTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class VersionTypeFields
	{
		public const string VersionTypeId = "VersionTypeId";
		public const string VersionTypeName = "VersionTypeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="API_STATUSES")]
	public partial class ApiStatus
	{
		private Decimal _apiStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="API_STATUS_ID", BaseColumnName ="API_STATUS_ID", BaseTableName = "API_STATUSES" )]		public Decimal ApiStatusId 
		{ 
		    get { return _apiStatusId; } 
			set 
			{
			    _apiStatusId = value;
			}
        }

		private String _apiStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="API_STATUS_NAME", BaseColumnName ="API_STATUS_NAME", BaseTableName = "API_STATUSES" )]		public String ApiStatusName 
		{ 
		    get { return _apiStatusName; } 
			set 
			{
			    _apiStatusName = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "API_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "API_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "API_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "API_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _apiStatusDescription;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="API_STATUS_DESCRIPTION", BaseColumnName ="API_STATUS_DESCRIPTION", BaseTableName = "API_STATUSES" )]		public String ApiStatusDescription 
		{ 
		    get { return _apiStatusDescription; } 
			set 
			{
			    _apiStatusDescription = value;
			}
        }


	}

	public partial class ApiStatusRepository : Repository<ApiStatus> 
	{
		public ApiStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ApiStatus Get(string projectionName, System.Decimal apiStatusId)
		{
			return ((IRepository<ApiStatus>)this).Get(projectionName, apiStatusId, FetchMode.UseIdentityMap);
		}

		public ApiStatus Get(string projectionName, System.Decimal apiStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiStatus>)this).Get(projectionName, apiStatusId, fetchMode);
		}

		public ApiStatus Get(Projection projection, System.Decimal apiStatusId)
		{
			return ((IRepository<ApiStatus>)this).Get(projection, apiStatusId, FetchMode.UseIdentityMap);
		}

		public ApiStatus Get(Projection projection, System.Decimal apiStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiStatus>)this).Get(projection, apiStatusId, fetchMode);
		}

		public ApiStatus Get(string projectionName, System.Decimal apiStatusId, params string[] fields)
		{
			return ((IRepository<ApiStatus>)this).Get(projectionName, apiStatusId, fields);
		}

		public ApiStatus Get(Projection projection, System.Decimal apiStatusId, params string[] fields)
		{
			return ((IRepository<ApiStatus>)this).Get(projection, apiStatusId, fields);
		}

		public bool Delete(System.Decimal apiStatusId)
		{
			var entity = new ApiStatus { ApiStatusId = apiStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ApiStatusFields
	{
		public const string ApiStatusId = "ApiStatusId";
		public const string ApiStatusName = "ApiStatusName";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ApiStatusDescription = "ApiStatusDescription";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_VERSIONS")]
	public partial class MedraVersion
	{
		private Decimal _medraVersionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MEDRA_VERSION_ID", ColumnName ="MEDRA_VERSION_ID", BaseColumnName ="MEDRA_VERSION_ID", BaseTableName = "MEDRA_VERSIONS" )]		public Decimal MedraVersionId 
		{ 
		    get { return _medraVersionId; } 
			set 
			{
			    _medraVersionId = value;
			}
        }

		private String _medraVersionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MEDRA_VERSION_NAME", BaseColumnName ="MEDRA_VERSION_NAME", BaseTableName = "MEDRA_VERSIONS" )]		public String MedraVersionName 
		{ 
		    get { return _medraVersionName; } 
			set 
			{
			    _medraVersionName = value;
			}
        }

		private String _isCurrent;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_CURRENT", BaseColumnName ="IS_CURRENT", BaseTableName = "MEDRA_VERSIONS" )]		public String IsCurrent 
		{ 
		    get { return _isCurrent; } 
			set 
			{
			    _isCurrent = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MEDRA_VERSIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MEDRA_VERSIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MEDRA_VERSIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MEDRA_VERSIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class MedraVersionRepository : Repository<MedraVersion> 
	{
		public MedraVersionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedraVersion Get(string projectionName, System.Decimal medraVersionId)
		{
			return ((IRepository<MedraVersion>)this).Get(projectionName, medraVersionId, FetchMode.UseIdentityMap);
		}

		public MedraVersion Get(string projectionName, System.Decimal medraVersionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraVersion>)this).Get(projectionName, medraVersionId, fetchMode);
		}

		public MedraVersion Get(Projection projection, System.Decimal medraVersionId)
		{
			return ((IRepository<MedraVersion>)this).Get(projection, medraVersionId, FetchMode.UseIdentityMap);
		}

		public MedraVersion Get(Projection projection, System.Decimal medraVersionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraVersion>)this).Get(projection, medraVersionId, fetchMode);
		}

		public MedraVersion Get(string projectionName, System.Decimal medraVersionId, params string[] fields)
		{
			return ((IRepository<MedraVersion>)this).Get(projectionName, medraVersionId, fields);
		}

		public MedraVersion Get(Projection projection, System.Decimal medraVersionId, params string[] fields)
		{
			return ((IRepository<MedraVersion>)this).Get(projection, medraVersionId, fields);
		}

		public bool Delete(System.Decimal medraVersionId)
		{
			var entity = new MedraVersion { MedraVersionId = medraVersionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MedraVersionFields
	{
		public const string MedraVersionId = "MedraVersionId";
		public const string MedraVersionName = "MedraVersionName";
		public const string IsCurrent = "IsCurrent";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_LEVELS")]
	public partial class MedraLevel
	{
		private Decimal _medraLevelId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MEDRA_LEVEL_ID", ColumnName ="MEDRA_LEVEL_ID", BaseColumnName ="MEDRA_LEVEL_ID", BaseTableName = "MEDRA_LEVELS" )]		public Decimal MedraLevelId 
		{ 
		    get { return _medraLevelId; } 
			set 
			{
			    _medraLevelId = value;
			}
        }

		private String _medraLevelName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MEDRA_LEVEL_NAME", BaseColumnName ="MEDRA_LEVEL_NAME", BaseTableName = "MEDRA_LEVELS" )]		public String MedraLevelName 
		{ 
		    get { return _medraLevelName; } 
			set 
			{
			    _medraLevelName = value;
			}
        }

		private String _isCurrent;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_CURRENT", BaseColumnName ="IS_CURRENT", BaseTableName = "MEDRA_LEVELS" )]		public String IsCurrent 
		{ 
		    get { return _isCurrent; } 
			set 
			{
			    _isCurrent = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MEDRA_LEVELS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MEDRA_LEVELS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MEDRA_LEVELS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MEDRA_LEVELS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _invariantName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="INVARIANT_NAME", BaseColumnName ="INVARIANT_NAME", BaseTableName = "MEDRA_LEVELS" )]		public String InvariantName 
		{ 
		    get { return _invariantName; } 
			set 
			{
			    _invariantName = value;
			}
        }


	}

	public partial class MedraLevelRepository : Repository<MedraLevel> 
	{
		public MedraLevelRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedraLevel Get(string projectionName, System.Decimal medraLevelId)
		{
			return ((IRepository<MedraLevel>)this).Get(projectionName, medraLevelId, FetchMode.UseIdentityMap);
		}

		public MedraLevel Get(string projectionName, System.Decimal medraLevelId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraLevel>)this).Get(projectionName, medraLevelId, fetchMode);
		}

		public MedraLevel Get(Projection projection, System.Decimal medraLevelId)
		{
			return ((IRepository<MedraLevel>)this).Get(projection, medraLevelId, FetchMode.UseIdentityMap);
		}

		public MedraLevel Get(Projection projection, System.Decimal medraLevelId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraLevel>)this).Get(projection, medraLevelId, fetchMode);
		}

		public MedraLevel Get(string projectionName, System.Decimal medraLevelId, params string[] fields)
		{
			return ((IRepository<MedraLevel>)this).Get(projectionName, medraLevelId, fields);
		}

		public MedraLevel Get(Projection projection, System.Decimal medraLevelId, params string[] fields)
		{
			return ((IRepository<MedraLevel>)this).Get(projection, medraLevelId, fields);
		}

		public bool Delete(System.Decimal medraLevelId)
		{
			var entity = new MedraLevel { MedraLevelId = medraLevelId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MedraLevelFields
	{
		public const string MedraLevelId = "MedraLevelId";
		public const string MedraLevelName = "MedraLevelName";
		public const string IsCurrent = "IsCurrent";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string InvariantName = "InvariantName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_STABILITY_STUDYPURP")]
	public partial class MpStabilityStudypurp
	{
		private Decimal _mpStabilityStudypurpId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_STABILITY_STUDYPURP_ID", ColumnName ="MP_STABILITY_STUDYPURP_ID", BaseColumnName ="MP_STABILITY_STUDYPURP_ID", BaseTableName = "MP_STABILITY_STUDYPURP" )]		public Decimal MpStabilityStudypurpId 
		{ 
		    get { return _mpStabilityStudypurpId; } 
			set 
			{
			    _mpStabilityStudypurpId = value;
			}
        }

		private Decimal _stabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="STABILITY_ID", BaseColumnName ="STABILITY_ID", BaseTableName = "MP_STABILITY_STUDYPURP" )]		public Decimal StabilityId 
		{ 
		    get { return _stabilityId; } 
			set 
			{
			    _stabilityId = value;
			}
        }

		private Decimal _studyPurposeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="STUDY_PURPOSE_ID", BaseColumnName ="STUDY_PURPOSE_ID", BaseTableName = "MP_STABILITY_STUDYPURP" )]		public Decimal StudyPurposeId 
		{ 
		    get { return _studyPurposeId; } 
			set 
			{
			    _studyPurposeId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MP_STABILITY_STUDYPURP" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MP_STABILITY_STUDYPURP" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MP_STABILITY_STUDYPURP" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MP_STABILITY_STUDYPURP" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _studyPurposeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_PURPOSE_NAME" )]		public String StudyPurposeName 
		{ 
		    get { return _studyPurposeName; } 
			set 
			{
			    _studyPurposeName = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }


	}

	public partial class MpStabilityStudypurpRepository : Repository<MpStabilityStudypurp> 
	{
		public MpStabilityStudypurpRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpStabilityStudypurp Get(string projectionName, System.Decimal mpStabilityStudypurpId)
		{
			return ((IRepository<MpStabilityStudypurp>)this).Get(projectionName, mpStabilityStudypurpId, FetchMode.UseIdentityMap);
		}

		public MpStabilityStudypurp Get(string projectionName, System.Decimal mpStabilityStudypurpId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityStudypurp>)this).Get(projectionName, mpStabilityStudypurpId, fetchMode);
		}

		public MpStabilityStudypurp Get(Projection projection, System.Decimal mpStabilityStudypurpId)
		{
			return ((IRepository<MpStabilityStudypurp>)this).Get(projection, mpStabilityStudypurpId, FetchMode.UseIdentityMap);
		}

		public MpStabilityStudypurp Get(Projection projection, System.Decimal mpStabilityStudypurpId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityStudypurp>)this).Get(projection, mpStabilityStudypurpId, fetchMode);
		}

		public MpStabilityStudypurp Get(string projectionName, System.Decimal mpStabilityStudypurpId, params string[] fields)
		{
			return ((IRepository<MpStabilityStudypurp>)this).Get(projectionName, mpStabilityStudypurpId, fields);
		}

		public MpStabilityStudypurp Get(Projection projection, System.Decimal mpStabilityStudypurpId, params string[] fields)
		{
			return ((IRepository<MpStabilityStudypurp>)this).Get(projection, mpStabilityStudypurpId, fields);
		}

		public bool Delete(System.Decimal mpStabilityStudypurpId)
		{
			var entity = new MpStabilityStudypurp { MpStabilityStudypurpId = mpStabilityStudypurpId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpStabilityStudypurpFields
	{
		public const string MpStabilityStudypurpId = "MpStabilityStudypurpId";
		public const string StabilityId = "StabilityId";
		public const string StudyPurposeId = "StudyPurposeId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string StudyPurposeName = "StudyPurposeName";
		public const string MedicinalProductId = "MedicinalProductId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PROCESS_TYPES")]
	public partial class ProcessType
	{
		private String _processTypeId;
		[DataMember]
		[SqlField(DbType.String, 1, IsKey=true, ColumnName ="PROCESS_TYPE_ID", BaseColumnName ="PROCESS_TYPE_ID", BaseTableName = "PROCESS_TYPES" )]		public String ProcessTypeId 
		{ 
		    get { return _processTypeId; } 
			set 
			{
			    _processTypeId = value;
			}
        }

		private String _processTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PROCESS_TYPE_NAME", BaseColumnName ="PROCESS_TYPE_NAME", BaseTableName = "PROCESS_TYPES" )]		public String ProcessTypeName 
		{ 
		    get { return _processTypeName; } 
			set 
			{
			    _processTypeName = value;
			}
        }


	}

	public partial class ProcessTypeRepository : Repository<ProcessType> 
	{
		public ProcessTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ProcessType Get(string projectionName, System.String processTypeId)
		{
			return ((IRepository<ProcessType>)this).Get(projectionName, processTypeId, FetchMode.UseIdentityMap);
		}

		public ProcessType Get(string projectionName, System.String processTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ProcessType>)this).Get(projectionName, processTypeId, fetchMode);
		}

		public ProcessType Get(Projection projection, System.String processTypeId)
		{
			return ((IRepository<ProcessType>)this).Get(projection, processTypeId, FetchMode.UseIdentityMap);
		}

		public ProcessType Get(Projection projection, System.String processTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ProcessType>)this).Get(projection, processTypeId, fetchMode);
		}

		public ProcessType Get(string projectionName, System.String processTypeId, params string[] fields)
		{
			return ((IRepository<ProcessType>)this).Get(projectionName, processTypeId, fields);
		}

		public ProcessType Get(Projection projection, System.String processTypeId, params string[] fields)
		{
			return ((IRepository<ProcessType>)this).Get(projection, processTypeId, fields);
		}

		public bool Delete(System.String processTypeId)
		{
			var entity = new ProcessType { ProcessTypeId = processTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ProcessTypeFields
	{
		public const string ProcessTypeId = "ProcessTypeId";
		public const string ProcessTypeName = "ProcessTypeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class MpProcessType
	{
		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _processTypeId;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="PROCESS_TYPE_ID" )]		public String ProcessTypeId 
		{ 
		    get { return _processTypeId; } 
			set 
			{
			    _processTypeId = value;
			}
        }


	}

	public partial class MpProcessTypeRepository : Repository<MpProcessType> 
	{
		public MpProcessTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class MpProcessTypeFields
	{
		public const string MedicinalProductId = "MedicinalProductId";
		public const string ProcessTypeId = "ProcessTypeId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DECISION_TYPES")]
	public partial class DecisionType
	{
		private String _decisionTypeId;
		[DataMember]
		[SqlField(DbType.String, 1, IsKey=true, ColumnName ="DECISION_TYPE_ID", BaseColumnName ="DECISION_TYPE_ID", BaseTableName = "DECISION_TYPES" )]		public String DecisionTypeId 
		{ 
		    get { return _decisionTypeId; } 
			set 
			{
			    _decisionTypeId = value;
			}
        }

		private String _decisionTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DECISION_TYPE_NAME", BaseColumnName ="DECISION_TYPE_NAME", BaseTableName = "DECISION_TYPES" )]		public String DecisionTypeName 
		{ 
		    get { return _decisionTypeName; } 
			set 
			{
			    _decisionTypeName = value;
			}
        }


	}

	public partial class DecisionTypeRepository : Repository<DecisionType> 
	{
		public DecisionTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DecisionType Get(string projectionName, System.String decisionTypeId)
		{
			return ((IRepository<DecisionType>)this).Get(projectionName, decisionTypeId, FetchMode.UseIdentityMap);
		}

		public DecisionType Get(string projectionName, System.String decisionTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DecisionType>)this).Get(projectionName, decisionTypeId, fetchMode);
		}

		public DecisionType Get(Projection projection, System.String decisionTypeId)
		{
			return ((IRepository<DecisionType>)this).Get(projection, decisionTypeId, FetchMode.UseIdentityMap);
		}

		public DecisionType Get(Projection projection, System.String decisionTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DecisionType>)this).Get(projection, decisionTypeId, fetchMode);
		}

		public DecisionType Get(string projectionName, System.String decisionTypeId, params string[] fields)
		{
			return ((IRepository<DecisionType>)this).Get(projectionName, decisionTypeId, fields);
		}

		public DecisionType Get(Projection projection, System.String decisionTypeId, params string[] fields)
		{
			return ((IRepository<DecisionType>)this).Get(projection, decisionTypeId, fields);
		}

		public bool Delete(System.String decisionTypeId)
		{
			var entity = new DecisionType { DecisionTypeId = decisionTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DecisionTypeFields
	{
		public const string DecisionTypeId = "DecisionTypeId";
		public const string DecisionTypeName = "DecisionTypeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="STUDY_TYPES")]
	public partial class StudyType
	{
		private Decimal _studyTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "STUDY_TYPE_ID", ColumnName ="STUDY_TYPE_ID", BaseColumnName ="STUDY_TYPE_ID", BaseTableName = "STUDY_TYPES" )]		public Decimal StudyTypeId 
		{ 
		    get { return _studyTypeId; } 
			set 
			{
			    _studyTypeId = value;
			}
        }

		private String _studyTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_TYPE_NAME", BaseColumnName ="STUDY_TYPE_NAME", BaseTableName = "STUDY_TYPES" )]		public String StudyTypeName 
		{ 
		    get { return _studyTypeName; } 
			set 
			{
			    _studyTypeName = value;
			}
        }


	}

	public partial class StudyTypeRepository : Repository<StudyType> 
	{
		public StudyTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public StudyType Get(string projectionName, System.Decimal studyTypeId)
		{
			return ((IRepository<StudyType>)this).Get(projectionName, studyTypeId, FetchMode.UseIdentityMap);
		}

		public StudyType Get(string projectionName, System.Decimal studyTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<StudyType>)this).Get(projectionName, studyTypeId, fetchMode);
		}

		public StudyType Get(Projection projection, System.Decimal studyTypeId)
		{
			return ((IRepository<StudyType>)this).Get(projection, studyTypeId, FetchMode.UseIdentityMap);
		}

		public StudyType Get(Projection projection, System.Decimal studyTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<StudyType>)this).Get(projection, studyTypeId, fetchMode);
		}

		public StudyType Get(string projectionName, System.Decimal studyTypeId, params string[] fields)
		{
			return ((IRepository<StudyType>)this).Get(projectionName, studyTypeId, fields);
		}

		public StudyType Get(Projection projection, System.Decimal studyTypeId, params string[] fields)
		{
			return ((IRepository<StudyType>)this).Get(projection, studyTypeId, fields);
		}

		public bool Delete(System.Decimal studyTypeId)
		{
			var entity = new StudyType { StudyTypeId = studyTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class StudyTypeFields
	{
		public const string StudyTypeId = "StudyTypeId";
		public const string StudyTypeName = "StudyTypeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_STABILITY_STUDYTYPES")]
	public partial class MpStabilityStudytype
	{
		private Decimal _mpStabilityStudytypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_STABILITY_STUDYTYPE_ID", ColumnName ="MP_STABILITY_STUDYTYPE_ID", BaseColumnName ="MP_STABILITY_STUDYTYPE_ID", BaseTableName = "MP_STABILITY_STUDYTYPES" )]		public Decimal MpStabilityStudytypeId 
		{ 
		    get { return _mpStabilityStudytypeId; } 
			set 
			{
			    _mpStabilityStudytypeId = value;
			}
        }

		private Decimal _studyTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="STUDY_TYPE_ID", BaseColumnName ="STUDY_TYPE_ID", BaseTableName = "MP_STABILITY_STUDYTYPES" )]		public Decimal StudyTypeId 
		{ 
		    get { return _studyTypeId; } 
			set 
			{
			    _studyTypeId = value;
			}
        }

		private Decimal _stabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="STABILITY_ID", BaseColumnName ="STABILITY_ID", BaseTableName = "MP_STABILITY_STUDYTYPES" )]		public Decimal StabilityId 
		{ 
		    get { return _stabilityId; } 
			set 
			{
			    _stabilityId = value;
			}
        }

		private String _studyTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_TYPE_NAME" )]		public String StudyTypeName 
		{ 
		    get { return _studyTypeName; } 
			set 
			{
			    _studyTypeName = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }


	}

	public partial class MpStabilityStudytypeRepository : Repository<MpStabilityStudytype> 
	{
		public MpStabilityStudytypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpStabilityStudytype Get(string projectionName, System.Decimal mpStabilityStudytypeId)
		{
			return ((IRepository<MpStabilityStudytype>)this).Get(projectionName, mpStabilityStudytypeId, FetchMode.UseIdentityMap);
		}

		public MpStabilityStudytype Get(string projectionName, System.Decimal mpStabilityStudytypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityStudytype>)this).Get(projectionName, mpStabilityStudytypeId, fetchMode);
		}

		public MpStabilityStudytype Get(Projection projection, System.Decimal mpStabilityStudytypeId)
		{
			return ((IRepository<MpStabilityStudytype>)this).Get(projection, mpStabilityStudytypeId, FetchMode.UseIdentityMap);
		}

		public MpStabilityStudytype Get(Projection projection, System.Decimal mpStabilityStudytypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityStudytype>)this).Get(projection, mpStabilityStudytypeId, fetchMode);
		}

		public MpStabilityStudytype Get(string projectionName, System.Decimal mpStabilityStudytypeId, params string[] fields)
		{
			return ((IRepository<MpStabilityStudytype>)this).Get(projectionName, mpStabilityStudytypeId, fields);
		}

		public MpStabilityStudytype Get(Projection projection, System.Decimal mpStabilityStudytypeId, params string[] fields)
		{
			return ((IRepository<MpStabilityStudytype>)this).Get(projection, mpStabilityStudytypeId, fields);
		}

		public bool Delete(System.Decimal mpStabilityStudytypeId)
		{
			var entity = new MpStabilityStudytype { MpStabilityStudytypeId = mpStabilityStudytypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpStabilityStudytypeFields
	{
		public const string MpStabilityStudytypeId = "MpStabilityStudytypeId";
		public const string StudyTypeId = "StudyTypeId";
		public const string StabilityId = "StabilityId";
		public const string StudyTypeName = "StudyTypeName";
		public const string MedicinalProductId = "MedicinalProductId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_STABILITY_APIMANS")]
	public partial class MpStabilityApiman
	{
		private Decimal _mpStabilityApimanId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_STABILITY_APIMAN_ID", ColumnName ="MP_STABILITY_APIMAN_ID", BaseColumnName ="MP_STABILITY_APIMAN_ID", BaseTableName = "MP_STABILITY_APIMANS" )]		public Decimal MpStabilityApimanId 
		{ 
		    get { return _mpStabilityApimanId; } 
			set 
			{
			    _mpStabilityApimanId = value;
			}
        }

		private Decimal _stabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="STABILITY_ID", BaseColumnName ="STABILITY_ID", BaseTableName = "MP_STABILITY_APIMANS" )]		public Decimal StabilityId 
		{ 
		    get { return _stabilityId; } 
			set 
			{
			    _stabilityId = value;
			}
        }

		private Decimal _apiManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="API_MANUFACTURER_ID", BaseColumnName ="API_MANUFACTURER_ID", BaseTableName = "MP_STABILITY_APIMANS" )]		public Decimal ApiManufacturerId 
		{ 
		    get { return _apiManufacturerId; } 
			set 
			{
			    _apiManufacturerId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private Decimal _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_ID" )]		public Decimal ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }


	}

	public partial class MpStabilityApimanRepository : Repository<MpStabilityApiman> 
	{
		public MpStabilityApimanRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpStabilityApiman Get(string projectionName, System.Decimal mpStabilityApimanId)
		{
			return ((IRepository<MpStabilityApiman>)this).Get(projectionName, mpStabilityApimanId, FetchMode.UseIdentityMap);
		}

		public MpStabilityApiman Get(string projectionName, System.Decimal mpStabilityApimanId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityApiman>)this).Get(projectionName, mpStabilityApimanId, fetchMode);
		}

		public MpStabilityApiman Get(Projection projection, System.Decimal mpStabilityApimanId)
		{
			return ((IRepository<MpStabilityApiman>)this).Get(projection, mpStabilityApimanId, FetchMode.UseIdentityMap);
		}

		public MpStabilityApiman Get(Projection projection, System.Decimal mpStabilityApimanId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityApiman>)this).Get(projection, mpStabilityApimanId, fetchMode);
		}

		public MpStabilityApiman Get(string projectionName, System.Decimal mpStabilityApimanId, params string[] fields)
		{
			return ((IRepository<MpStabilityApiman>)this).Get(projectionName, mpStabilityApimanId, fields);
		}

		public MpStabilityApiman Get(Projection projection, System.Decimal mpStabilityApimanId, params string[] fields)
		{
			return ((IRepository<MpStabilityApiman>)this).Get(projection, mpStabilityApimanId, fields);
		}

		public bool Delete(System.Decimal mpStabilityApimanId)
		{
			var entity = new MpStabilityApiman { MpStabilityApimanId = mpStabilityApimanId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpStabilityApimanFields
	{
		public const string MpStabilityApimanId = "MpStabilityApimanId";
		public const string StabilityId = "StabilityId";
		public const string ApiManufacturerId = "ApiManufacturerId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string ManufacturerId = "ManufacturerId";
		public const string ManufacturerName = "ManufacturerName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MONTHS")]
	public partial class MonthAvaliable
	{
		private Decimal _monthId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MONTH_ID", ColumnName ="MONTH_ID", BaseColumnName ="MONTH_ID", BaseTableName = "MONTHS" )]		public Decimal MonthId 
		{ 
		    get { return _monthId; } 
			set 
			{
			    _monthId = value;
			}
        }

		private String _monthName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MONTH_NAME", BaseColumnName ="MONTH_NAME", BaseTableName = "MONTHS" )]		public String MonthName 
		{ 
		    get { return _monthName; } 
			set 
			{
			    _monthName = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MONTHS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MONTHS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MONTHS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MONTHS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class MonthAvaliableRepository : Repository<MonthAvaliable> 
	{
		public MonthAvaliableRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MonthAvaliable Get(string projectionName, System.Decimal monthId)
		{
			return ((IRepository<MonthAvaliable>)this).Get(projectionName, monthId, FetchMode.UseIdentityMap);
		}

		public MonthAvaliable Get(string projectionName, System.Decimal monthId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MonthAvaliable>)this).Get(projectionName, monthId, fetchMode);
		}

		public MonthAvaliable Get(Projection projection, System.Decimal monthId)
		{
			return ((IRepository<MonthAvaliable>)this).Get(projection, monthId, FetchMode.UseIdentityMap);
		}

		public MonthAvaliable Get(Projection projection, System.Decimal monthId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MonthAvaliable>)this).Get(projection, monthId, fetchMode);
		}

		public MonthAvaliable Get(string projectionName, System.Decimal monthId, params string[] fields)
		{
			return ((IRepository<MonthAvaliable>)this).Get(projectionName, monthId, fields);
		}

		public MonthAvaliable Get(Projection projection, System.Decimal monthId, params string[] fields)
		{
			return ((IRepository<MonthAvaliable>)this).Get(projection, monthId, fields);
		}

		public bool Delete(System.Decimal monthId)
		{
			var entity = new MonthAvaliable { MonthId = monthId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MonthAvaliableFields
	{
		public const string MonthId = "MonthId";
		public const string MonthName = "MonthName";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="INVERTED_OPTIONS")]
	public partial class InvertedOption
	{
		private String _invertedOptionId;
		[DataMember]
		[SqlField(DbType.String, 1, IsKey=true, ColumnName ="INVERTED_OPTION_ID", BaseColumnName ="INVERTED_OPTION_ID", BaseTableName = "INVERTED_OPTIONS" )]		public String InvertedOptionId 
		{ 
		    get { return _invertedOptionId; } 
			set 
			{
			    _invertedOptionId = value;
			}
        }

		private String _invertedOptionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="INVERTED_OPTION_NAME", BaseColumnName ="INVERTED_OPTION_NAME", BaseTableName = "INVERTED_OPTIONS" )]		public String InvertedOptionName 
		{ 
		    get { return _invertedOptionName; } 
			set 
			{
			    _invertedOptionName = value;
			}
        }


	}

	public partial class InvertedOptionRepository : Repository<InvertedOption> 
	{
		public InvertedOptionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public InvertedOption Get(string projectionName, System.String invertedOptionId)
		{
			return ((IRepository<InvertedOption>)this).Get(projectionName, invertedOptionId, FetchMode.UseIdentityMap);
		}

		public InvertedOption Get(string projectionName, System.String invertedOptionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<InvertedOption>)this).Get(projectionName, invertedOptionId, fetchMode);
		}

		public InvertedOption Get(Projection projection, System.String invertedOptionId)
		{
			return ((IRepository<InvertedOption>)this).Get(projection, invertedOptionId, FetchMode.UseIdentityMap);
		}

		public InvertedOption Get(Projection projection, System.String invertedOptionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<InvertedOption>)this).Get(projection, invertedOptionId, fetchMode);
		}

		public InvertedOption Get(string projectionName, System.String invertedOptionId, params string[] fields)
		{
			return ((IRepository<InvertedOption>)this).Get(projectionName, invertedOptionId, fields);
		}

		public InvertedOption Get(Projection projection, System.String invertedOptionId, params string[] fields)
		{
			return ((IRepository<InvertedOption>)this).Get(projection, invertedOptionId, fields);
		}

		public bool Delete(System.String invertedOptionId)
		{
			var entity = new InvertedOption { InvertedOptionId = invertedOptionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class InvertedOptionFields
	{
		public const string InvertedOptionId = "InvertedOptionId";
		public const string InvertedOptionName = "InvertedOptionName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="ASSESSED_CONDITIONS")]
	public partial class AssessedCondition
	{
		private Decimal _assessedConditionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="ASSESSED_CONDITION_ID", BaseColumnName ="ASSESSED_CONDITION_ID", BaseTableName = "ASSESSED_CONDITIONS" )]		public Decimal AssessedConditionId 
		{ 
		    get { return _assessedConditionId; } 
			set 
			{
			    _assessedConditionId = value;
			}
        }

		private String _assessedConditionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ASSESSED_CONDITION_NAME", BaseColumnName ="ASSESSED_CONDITION_NAME", BaseTableName = "ASSESSED_CONDITIONS" )]		public String AssessedConditionName 
		{ 
		    get { return _assessedConditionName; } 
			set 
			{
			    _assessedConditionName = value;
			}
        }


	}

	public partial class AssessedConditionRepository : Repository<AssessedCondition> 
	{
		public AssessedConditionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AssessedCondition Get(string projectionName, System.Decimal assessedConditionId)
		{
			return ((IRepository<AssessedCondition>)this).Get(projectionName, assessedConditionId, FetchMode.UseIdentityMap);
		}

		public AssessedCondition Get(string projectionName, System.Decimal assessedConditionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AssessedCondition>)this).Get(projectionName, assessedConditionId, fetchMode);
		}

		public AssessedCondition Get(Projection projection, System.Decimal assessedConditionId)
		{
			return ((IRepository<AssessedCondition>)this).Get(projection, assessedConditionId, FetchMode.UseIdentityMap);
		}

		public AssessedCondition Get(Projection projection, System.Decimal assessedConditionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AssessedCondition>)this).Get(projection, assessedConditionId, fetchMode);
		}

		public AssessedCondition Get(string projectionName, System.Decimal assessedConditionId, params string[] fields)
		{
			return ((IRepository<AssessedCondition>)this).Get(projectionName, assessedConditionId, fields);
		}

		public AssessedCondition Get(Projection projection, System.Decimal assessedConditionId, params string[] fields)
		{
			return ((IRepository<AssessedCondition>)this).Get(projection, assessedConditionId, fields);
		}

		public bool Delete(System.Decimal assessedConditionId)
		{
			var entity = new AssessedCondition { AssessedConditionId = assessedConditionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AssessedConditionFields
	{
		public const string AssessedConditionId = "AssessedConditionId";
		public const string AssessedConditionName = "AssessedConditionName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_STABILITY_CONDITIONS")]
	public partial class MpStabilityCondition
	{
		private Decimal _mpStabilityConditionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_STABILITY_CONDITION_ID", ColumnName ="MP_STABILITY_CONDITION_ID", BaseColumnName ="MP_STABILITY_CONDITION_ID", BaseTableName = "MP_STABILITY_CONDITIONS" )]		public Decimal MpStabilityConditionId 
		{ 
		    get { return _mpStabilityConditionId; } 
			set 
			{
			    _mpStabilityConditionId = value;
			}
        }

		private Decimal _stabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="STABILITY_ID", BaseColumnName ="STABILITY_ID", BaseTableName = "MP_STABILITY_CONDITIONS" )]		public Decimal StabilityId 
		{ 
		    get { return _stabilityId; } 
			set 
			{
			    _stabilityId = value;
			}
        }

		private Decimal _assessedConditionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ASSESSED_CONDITION_ID", BaseColumnName ="ASSESSED_CONDITION_ID", BaseTableName = "MP_STABILITY_CONDITIONS" )]		public Decimal AssessedConditionId 
		{ 
		    get { return _assessedConditionId; } 
			set 
			{
			    _assessedConditionId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _assessedConditionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ASSESSED_CONDITION_NAME" )]		public String AssessedConditionName 
		{ 
		    get { return _assessedConditionName; } 
			set 
			{
			    _assessedConditionName = value;
			}
        }


	}

	public partial class MpStabilityConditionRepository : Repository<MpStabilityCondition> 
	{
		public MpStabilityConditionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpStabilityCondition Get(string projectionName, System.Decimal mpStabilityConditionId)
		{
			return ((IRepository<MpStabilityCondition>)this).Get(projectionName, mpStabilityConditionId, FetchMode.UseIdentityMap);
		}

		public MpStabilityCondition Get(string projectionName, System.Decimal mpStabilityConditionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityCondition>)this).Get(projectionName, mpStabilityConditionId, fetchMode);
		}

		public MpStabilityCondition Get(Projection projection, System.Decimal mpStabilityConditionId)
		{
			return ((IRepository<MpStabilityCondition>)this).Get(projection, mpStabilityConditionId, FetchMode.UseIdentityMap);
		}

		public MpStabilityCondition Get(Projection projection, System.Decimal mpStabilityConditionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityCondition>)this).Get(projection, mpStabilityConditionId, fetchMode);
		}

		public MpStabilityCondition Get(string projectionName, System.Decimal mpStabilityConditionId, params string[] fields)
		{
			return ((IRepository<MpStabilityCondition>)this).Get(projectionName, mpStabilityConditionId, fields);
		}

		public MpStabilityCondition Get(Projection projection, System.Decimal mpStabilityConditionId, params string[] fields)
		{
			return ((IRepository<MpStabilityCondition>)this).Get(projection, mpStabilityConditionId, fields);
		}

		public bool Delete(System.Decimal mpStabilityConditionId)
		{
			var entity = new MpStabilityCondition { MpStabilityConditionId = mpStabilityConditionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpStabilityConditionFields
	{
		public const string MpStabilityConditionId = "MpStabilityConditionId";
		public const string StabilityId = "StabilityId";
		public const string AssessedConditionId = "AssessedConditionId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string AssessedConditionName = "AssessedConditionName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="ENTITIES")]
	public partial class EntityItem
	{
		private Decimal _entityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "ENTITY_ID", ColumnName ="ENTITY_ID", BaseColumnName ="ENTITY_ID", BaseTableName = "ENTITIES" )]		public Decimal EntityId 
		{ 
		    get { return _entityId; } 
			set 
			{
			    _entityId = value;
			}
        }

		private String _entityName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ENTITY_NAME", BaseColumnName ="ENTITY_NAME", BaseTableName = "ENTITIES" )]		public String EntityName 
		{ 
		    get { return _entityName; } 
			set 
			{
			    _entityName = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS", BaseColumnName ="ADDRESS", BaseTableName = "ENTITIES" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }

		private Decimal? _clientIterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CLIENT_ITERATIONS" )]		public Decimal? ClientIterations 
		{ 
		    get { return _clientIterations; } 
			set 
			{
			    _clientIterations = value;
			}
        }

		private Decimal? _lcIterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LC_ITERATIONS" )]		public Decimal? LcIterations 
		{ 
		    get { return _lcIterations; } 
			set 
			{
			    _lcIterations = value;
			}
        }

		private Decimal? _providerIterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PROVIDER_ITERATIONS" )]		public Decimal? ProviderIterations 
		{ 
		    get { return _providerIterations; } 
			set 
			{
			    _providerIterations = value;
			}
        }


	}

	public partial class EntityItemRepository : Repository<EntityItem> 
	{
		public EntityItemRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public EntityItem Get(string projectionName, System.Decimal entityId)
		{
			return ((IRepository<EntityItem>)this).Get(projectionName, entityId, FetchMode.UseIdentityMap);
		}

		public EntityItem Get(string projectionName, System.Decimal entityId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<EntityItem>)this).Get(projectionName, entityId, fetchMode);
		}

		public EntityItem Get(Projection projection, System.Decimal entityId)
		{
			return ((IRepository<EntityItem>)this).Get(projection, entityId, FetchMode.UseIdentityMap);
		}

		public EntityItem Get(Projection projection, System.Decimal entityId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<EntityItem>)this).Get(projection, entityId, fetchMode);
		}

		public EntityItem Get(string projectionName, System.Decimal entityId, params string[] fields)
		{
			return ((IRepository<EntityItem>)this).Get(projectionName, entityId, fields);
		}

		public EntityItem Get(Projection projection, System.Decimal entityId, params string[] fields)
		{
			return ((IRepository<EntityItem>)this).Get(projection, entityId, fields);
		}

		public bool Delete(System.Decimal entityId)
		{
			var entity = new EntityItem { EntityId = entityId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class EntityItemFields
	{
		public const string EntityId = "EntityId";
		public const string EntityName = "EntityName";
		public const string Address = "Address";
		public const string ClientIterations = "ClientIterations";
		public const string LcIterations = "LcIterations";
		public const string ProviderIterations = "ProviderIterations";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_SUB_STATUSES")]
	public partial class DossierSubStatus
	{
		private Decimal _dossierSubStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="DOSSIER_SUB_STATUS_ID", BaseColumnName ="DOSSIER_SUB_STATUS_ID", BaseTableName = "DOSSIER_SUB_STATUSES" )]		public Decimal DossierSubStatusId 
		{ 
		    get { return _dossierSubStatusId; } 
			set 
			{
			    _dossierSubStatusId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "DOSSIER_SUB_STATUSES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_SUB_STATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_SUB_STATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_SUB_STATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_SUB_STATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class DossierSubStatusRepository : Repository<DossierSubStatus> 
	{
		public DossierSubStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierSubStatus Get(string projectionName, System.Decimal dossierSubStatusId)
		{
			return ((IRepository<DossierSubStatus>)this).Get(projectionName, dossierSubStatusId, FetchMode.UseIdentityMap);
		}

		public DossierSubStatus Get(string projectionName, System.Decimal dossierSubStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierSubStatus>)this).Get(projectionName, dossierSubStatusId, fetchMode);
		}

		public DossierSubStatus Get(Projection projection, System.Decimal dossierSubStatusId)
		{
			return ((IRepository<DossierSubStatus>)this).Get(projection, dossierSubStatusId, FetchMode.UseIdentityMap);
		}

		public DossierSubStatus Get(Projection projection, System.Decimal dossierSubStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierSubStatus>)this).Get(projection, dossierSubStatusId, fetchMode);
		}

		public DossierSubStatus Get(string projectionName, System.Decimal dossierSubStatusId, params string[] fields)
		{
			return ((IRepository<DossierSubStatus>)this).Get(projectionName, dossierSubStatusId, fields);
		}

		public DossierSubStatus Get(Projection projection, System.Decimal dossierSubStatusId, params string[] fields)
		{
			return ((IRepository<DossierSubStatus>)this).Get(projection, dossierSubStatusId, fields);
		}

		public bool Delete(System.Decimal dossierSubStatusId)
		{
			var entity = new DossierSubStatus { DossierSubStatusId = dossierSubStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierSubStatusFields
	{
		public const string DossierSubStatusId = "DossierSubStatusId";
		public const string Name = "Name";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_EMA_INFOS")]
	public partial class DossierCountryEmaInfo
	{
		private Decimal _dossierCountryEmaInfoId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_EMA_INFO_ID", ColumnName ="DOSSIER_COUNTRY_EMA_INFO_ID", BaseColumnName ="DOSSIER_COUNTRY_EMA_INFO_ID", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public Decimal DossierCountryEmaInfoId 
		{ 
		    get { return _dossierCountryEmaInfoId; } 
			set 
			{
			    _dossierCountryEmaInfoId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private Decimal? _medicinalProductTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MEDICINAL_PRODUCT_TYPE_ID", BaseColumnName ="MEDICINAL_PRODUCT_TYPE_ID", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public Decimal? MedicinalProductTypeId 
		{ 
		    get { return _medicinalProductTypeId; } 
			set 
			{
			    _medicinalProductTypeId = value;
			}
        }

		private Decimal? _medicalDeviceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MEDICAL_DEVICE_ID", BaseColumnName ="MEDICAL_DEVICE_ID", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public Decimal? MedicalDeviceId 
		{ 
		    get { return _medicalDeviceId; } 
			set 
			{
			    _medicalDeviceId = value;
			}
        }

		private String _orphanDrugDestination;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="ORPHAN_DRUG_DESTINATION", BaseColumnName ="ORPHAN_DRUG_DESTINATION", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public String OrphanDrugDestination 
		{ 
		    get { return _orphanDrugDestination; } 
			set 
			{
			    _orphanDrugDestination = value;
			}
        }

		private String _additionalMonitoring;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="ADDITIONAL_MONITORING", BaseColumnName ="ADDITIONAL_MONITORING", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public String AdditionalMonitoring 
		{ 
		    get { return _additionalMonitoring; } 
			set 
			{
			    _additionalMonitoring = value;
			}
        }

		private String _productAuthorisedChildren;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="PRODUCT_AUTHORISED_CHILDREN", BaseColumnName ="PRODUCT_AUTHORISED_CHILDREN", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public String ProductAuthorisedChildren 
		{ 
		    get { return _productAuthorisedChildren; } 
			set 
			{
			    _productAuthorisedChildren = value;
			}
        }

		private String _qppvCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="QPPV_CODE", BaseColumnName ="QPPV_CODE", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public String QppvCode 
		{ 
		    get { return _qppvCode; } 
			set 
			{
			    _qppvCode = value;
			}
        }

		private String _psmflCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PSMFL_CODE", BaseColumnName ="PSMFL_CODE", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public String PsmflCode 
		{ 
		    get { return _psmflCode; } 
			set 
			{
			    _psmflCode = value;
			}
        }

		private Decimal? _medraLevelId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MEDRA_LEVEL_ID", BaseColumnName ="MEDRA_LEVEL_ID", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public Decimal? MedraLevelId 
		{ 
		    get { return _medraLevelId; } 
			set 
			{
			    _medraLevelId = value;
			}
        }

		private Decimal? _medraVersionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MEDRA_VERSION_ID", BaseColumnName ="MEDRA_VERSION_ID", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public Decimal? MedraVersionId 
		{ 
		    get { return _medraVersionId; } 
			set 
			{
			    _medraVersionId = value;
			}
        }

		private String _emaComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="EMA_COMMENTS", BaseColumnName ="EMA_COMMENTS", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public String EmaComments 
		{ 
		    get { return _emaComments; } 
			set 
			{
			    _emaComments = value;
			}
        }

		private Decimal? _phvEmailId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PHV_EMAIL_ID", BaseColumnName ="PHV_EMAIL_ID", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public Decimal? PhvEmailId 
		{ 
		    get { return _phvEmailId; } 
			set 
			{
			    _phvEmailId = value;
			}
        }

		private Decimal? _phvPhoneId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PHV_PHONE_ID", BaseColumnName ="PHV_PHONE_ID", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public Decimal? PhvPhoneId 
		{ 
		    get { return _phvPhoneId; } 
			set 
			{
			    _phvPhoneId = value;
			}
        }

		private String _isNaEmaInfo;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EMA_INFO", BaseColumnName ="IS_NA_EMA_INFO", BaseTableName = "DOSSIER_COUNTRY_EMA_INFOS" )]		public String IsNaEmaInfo 
		{ 
		    get { return _isNaEmaInfo; } 
			set 
			{
			    _isNaEmaInfo = value;
			}
        }

		private String _medicinalProductTypeValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="MEDICINAL_PRODUCT_TYPE_VALUE" )]		public String MedicinalProductTypeValue 
		{ 
		    get { return _medicinalProductTypeValue; } 
			set 
			{
			    _medicinalProductTypeValue = value;
			}
        }

		private String _medicalDeviceValue;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="MEDICAL_DEVICE_VALUE" )]		public String MedicalDeviceValue 
		{ 
		    get { return _medicalDeviceValue; } 
			set 
			{
			    _medicalDeviceValue = value;
			}
        }

		private String _medraVersionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MEDRA_VERSION_NAME" )]		public String MedraVersionName 
		{ 
		    get { return _medraVersionName; } 
			set 
			{
			    _medraVersionName = value;
			}
        }

		private String _medraLevelName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MEDRA_LEVEL_NAME" )]		public String MedraLevelName 
		{ 
		    get { return _medraLevelName; } 
			set 
			{
			    _medraLevelName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private String _qppvCodeName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="QPPV_CODE_NAME" )]		public String QppvCodeName 
		{ 
		    get { return _qppvCodeName; } 
			set 
			{
			    _qppvCodeName = value;
			}
        }

		private String _psmflName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PSMFL_NAME" )]		public String PsmflName 
		{ 
		    get { return _psmflName; } 
			set 
			{
			    _psmflName = value;
			}
        }

		private String _email;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="EMAIL" )]		public String Email 
		{ 
		    get { return _email; } 
			set 
			{
			    _email = value;
			}
        }

		private String _phoneNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PHONE_NUMBER" )]		public String PhoneNumber 
		{ 
		    get { return _phoneNumber; } 
			set 
			{
			    _phoneNumber = value;
			}
        }


	}

	public partial class DossierCountryEmaInfoRepository : Repository<DossierCountryEmaInfo> 
	{
		public DossierCountryEmaInfoRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryEmaInfo Get(string projectionName, System.Decimal dossierCountryEmaInfoId)
		{
			return ((IRepository<DossierCountryEmaInfo>)this).Get(projectionName, dossierCountryEmaInfoId, FetchMode.UseIdentityMap);
		}

		public DossierCountryEmaInfo Get(string projectionName, System.Decimal dossierCountryEmaInfoId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryEmaInfo>)this).Get(projectionName, dossierCountryEmaInfoId, fetchMode);
		}

		public DossierCountryEmaInfo Get(Projection projection, System.Decimal dossierCountryEmaInfoId)
		{
			return ((IRepository<DossierCountryEmaInfo>)this).Get(projection, dossierCountryEmaInfoId, FetchMode.UseIdentityMap);
		}

		public DossierCountryEmaInfo Get(Projection projection, System.Decimal dossierCountryEmaInfoId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryEmaInfo>)this).Get(projection, dossierCountryEmaInfoId, fetchMode);
		}

		public DossierCountryEmaInfo Get(string projectionName, System.Decimal dossierCountryEmaInfoId, params string[] fields)
		{
			return ((IRepository<DossierCountryEmaInfo>)this).Get(projectionName, dossierCountryEmaInfoId, fields);
		}

		public DossierCountryEmaInfo Get(Projection projection, System.Decimal dossierCountryEmaInfoId, params string[] fields)
		{
			return ((IRepository<DossierCountryEmaInfo>)this).Get(projection, dossierCountryEmaInfoId, fields);
		}

		public bool Delete(System.Decimal dossierCountryEmaInfoId)
		{
			var entity = new DossierCountryEmaInfo { DossierCountryEmaInfoId = dossierCountryEmaInfoId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryEmaInfoFields
	{
		public const string DossierCountryEmaInfoId = "DossierCountryEmaInfoId";
		public const string DossierCountryId = "DossierCountryId";
		public const string MedicinalProductTypeId = "MedicinalProductTypeId";
		public const string MedicalDeviceId = "MedicalDeviceId";
		public const string OrphanDrugDestination = "OrphanDrugDestination";
		public const string AdditionalMonitoring = "AdditionalMonitoring";
		public const string ProductAuthorisedChildren = "ProductAuthorisedChildren";
		public const string QppvCode = "QppvCode";
		public const string PsmflCode = "PsmflCode";
		public const string MedraLevelId = "MedraLevelId";
		public const string MedraVersionId = "MedraVersionId";
		public const string EmaComments = "EmaComments";
		public const string PhvEmailId = "PhvEmailId";
		public const string PhvPhoneId = "PhvPhoneId";
		public const string IsNaEmaInfo = "IsNaEmaInfo";
		public const string MedicinalProductTypeValue = "MedicinalProductTypeValue";
		public const string MedicalDeviceValue = "MedicalDeviceValue";
		public const string MedraVersionName = "MedraVersionName";
		public const string MedraLevelName = "MedraLevelName";
		public const string DossierId = "DossierId";
		public const string CountryId = "CountryId";
		public const string QppvCodeName = "QppvCodeName";
		public const string PsmflName = "PsmflName";
		public const string Email = "Email";
		public const string PhoneNumber = "PhoneNumber";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COPY_TYPES")]
	public partial class DossierCopyType
	{
		private String _dossierCopyTypeId;
		[DataMember]
		[SqlField(DbType.String, 1, IsKey=true, ColumnName ="DOSSIER_COPY_TYPE_ID", BaseColumnName ="DOSSIER_COPY_TYPE_ID", BaseTableName = "DOSSIER_COPY_TYPES" )]		public String DossierCopyTypeId 
		{ 
		    get { return _dossierCopyTypeId; } 
			set 
			{
			    _dossierCopyTypeId = value;
			}
        }

		private String _dossierCopyTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DOSSIER_COPY_TYPE_NAME", BaseColumnName ="DOSSIER_COPY_TYPE_NAME", BaseTableName = "DOSSIER_COPY_TYPES" )]		public String DossierCopyTypeName 
		{ 
		    get { return _dossierCopyTypeName; } 
			set 
			{
			    _dossierCopyTypeName = value;
			}
        }


	}

	public partial class DossierCopyTypeRepository : Repository<DossierCopyType> 
	{
		public DossierCopyTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCopyType Get(string projectionName, System.String dossierCopyTypeId)
		{
			return ((IRepository<DossierCopyType>)this).Get(projectionName, dossierCopyTypeId, FetchMode.UseIdentityMap);
		}

		public DossierCopyType Get(string projectionName, System.String dossierCopyTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCopyType>)this).Get(projectionName, dossierCopyTypeId, fetchMode);
		}

		public DossierCopyType Get(Projection projection, System.String dossierCopyTypeId)
		{
			return ((IRepository<DossierCopyType>)this).Get(projection, dossierCopyTypeId, FetchMode.UseIdentityMap);
		}

		public DossierCopyType Get(Projection projection, System.String dossierCopyTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCopyType>)this).Get(projection, dossierCopyTypeId, fetchMode);
		}

		public DossierCopyType Get(string projectionName, System.String dossierCopyTypeId, params string[] fields)
		{
			return ((IRepository<DossierCopyType>)this).Get(projectionName, dossierCopyTypeId, fields);
		}

		public DossierCopyType Get(Projection projection, System.String dossierCopyTypeId, params string[] fields)
		{
			return ((IRepository<DossierCopyType>)this).Get(projection, dossierCopyTypeId, fields);
		}

		public bool Delete(System.String dossierCopyTypeId)
		{
			var entity = new DossierCopyType { DossierCopyTypeId = dossierCopyTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCopyTypeFields
	{
		public const string DossierCopyTypeId = "DossierCopyTypeId";
		public const string DossierCopyTypeName = "DossierCopyTypeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="ANTI_TAMPERING_DEVICES")]
	public partial class AntiTamperingDevice
	{
		private String _antiTamperingDeviceId;
		[DataMember]
		[SqlField(DbType.String, 1, IsKey=true, ColumnName ="ANTI_TAMPERING_DEVICE_ID", BaseColumnName ="ANTI_TAMPERING_DEVICE_ID", BaseTableName = "ANTI_TAMPERING_DEVICES" )]		public String AntiTamperingDeviceId 
		{ 
		    get { return _antiTamperingDeviceId; } 
			set 
			{
			    _antiTamperingDeviceId = value;
			}
        }

		private String _antiTamperingDeviceName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ANTI_TAMPERING_DEVICE_NAME", BaseColumnName ="ANTI_TAMPERING_DEVICE_NAME", BaseTableName = "ANTI_TAMPERING_DEVICES" )]		public String AntiTamperingDeviceName 
		{ 
		    get { return _antiTamperingDeviceName; } 
			set 
			{
			    _antiTamperingDeviceName = value;
			}
        }


	}

	public partial class AntiTamperingDeviceRepository : Repository<AntiTamperingDevice> 
	{
		public AntiTamperingDeviceRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public AntiTamperingDevice Get(string projectionName, System.String antiTamperingDeviceId)
		{
			return ((IRepository<AntiTamperingDevice>)this).Get(projectionName, antiTamperingDeviceId, FetchMode.UseIdentityMap);
		}

		public AntiTamperingDevice Get(string projectionName, System.String antiTamperingDeviceId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AntiTamperingDevice>)this).Get(projectionName, antiTamperingDeviceId, fetchMode);
		}

		public AntiTamperingDevice Get(Projection projection, System.String antiTamperingDeviceId)
		{
			return ((IRepository<AntiTamperingDevice>)this).Get(projection, antiTamperingDeviceId, FetchMode.UseIdentityMap);
		}

		public AntiTamperingDevice Get(Projection projection, System.String antiTamperingDeviceId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<AntiTamperingDevice>)this).Get(projection, antiTamperingDeviceId, fetchMode);
		}

		public AntiTamperingDevice Get(string projectionName, System.String antiTamperingDeviceId, params string[] fields)
		{
			return ((IRepository<AntiTamperingDevice>)this).Get(projectionName, antiTamperingDeviceId, fields);
		}

		public AntiTamperingDevice Get(Projection projection, System.String antiTamperingDeviceId, params string[] fields)
		{
			return ((IRepository<AntiTamperingDevice>)this).Get(projection, antiTamperingDeviceId, fields);
		}

		public bool Delete(System.String antiTamperingDeviceId)
		{
			var entity = new AntiTamperingDevice { AntiTamperingDeviceId = antiTamperingDeviceId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class AntiTamperingDeviceFields
	{
		public const string AntiTamperingDeviceId = "AntiTamperingDeviceId";
		public const string AntiTamperingDeviceName = "AntiTamperingDeviceName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class DossierApiManufacturer
	{
		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private String _rossCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ROSS_CODE" )]		public String RossCode 
		{ 
		    get { return _rossCode; } 
			set 
			{
			    _rossCode = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _dossierStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_STATUS_ID" )]		public Decimal? DossierStatusId 
		{ 
		    get { return _dossierStatusId; } 
			set 
			{
			    _dossierStatusId = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _pharmaceuticalForm;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PHARMACEUTICAL_FORM" )]		public String PharmaceuticalForm 
		{ 
		    get { return _pharmaceuticalForm; } 
			set 
			{
			    _pharmaceuticalForm = value;
			}
        }

		private String _adminPharmaceuticalForm;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="ADMIN_PHARMACEUTICAL_FORM" )]		public String AdminPharmaceuticalForm 
		{ 
		    get { return _adminPharmaceuticalForm; } 
			set 
			{
			    _adminPharmaceuticalForm = value;
			}
        }

		private String _initialDossierFormat;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="INITIAL_DOSSIER_FORMAT" )]		public String InitialDossierFormat 
		{ 
		    get { return _initialDossierFormat; } 
			set 
			{
			    _initialDossierFormat = value;
			}
        }

		private String _isDossierCopy;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_COPY" )]		public String IsDossierCopy 
		{ 
		    get { return _isDossierCopy; } 
			set 
			{
			    _isDossierCopy = value;
			}
        }

		private String _isDossierCopyType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_COPY_TYPE" )]		public String IsDossierCopyType 
		{ 
		    get { return _isDossierCopyType; } 
			set 
			{
			    _isDossierCopyType = value;
			}
        }

		private String _futureClient;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FUTURE_CLIENT" )]		public String FutureClient 
		{ 
		    get { return _futureClient; } 
			set 
			{
			    _futureClient = value;
			}
        }

		private String _isDuplicatedFastTrack;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DUPLICATED_FAST_TRACK" )]		public String IsDuplicatedFastTrack 
		{ 
		    get { return _isDuplicatedFastTrack; } 
			set 
			{
			    _isDuplicatedFastTrack = value;
			}
        }

		private DateTime? _fastTrackDeadLine;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FAST_TRACK_DEAD_LINE" )]		public DateTime? FastTrackDeadLine 
		{ 
		    get { return _fastTrackDeadLine; } 
			set 
			{
			    _fastTrackDeadLine = value;
			}
        }

		private Decimal _mktAuthProdedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MKT_AUTH_PRODEDURE_ID" )]		public Decimal MktAuthProdedureId 
		{ 
		    get { return _mktAuthProdedureId; } 
			set 
			{
			    _mktAuthProdedureId = value;
			}
        }

		private String _isDossierExtApplication;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_DOSSIER_EXT_APPLICATION" )]		public String IsDossierExtApplication 
		{ 
		    get { return _isDossierExtApplication; } 
			set 
			{
			    _isDossierExtApplication = value;
			}
        }

		private String _authorisationProcedureValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="AUTHORISATION_PROCEDURE_VALUE" )]		public String AuthorisationProcedureValue 
		{ 
		    get { return _authorisationProcedureValue; } 
			set 
			{
			    _authorisationProcedureValue = value;
			}
        }

		private String _creatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CREATOR_NAME" )]		public String CreatorName 
		{ 
		    get { return _creatorName; } 
			set 
			{
			    _creatorName = value;
			}
        }

		private String _modificatorName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATOR_NAME" )]		public String ModificatorName 
		{ 
		    get { return _modificatorName; } 
			set 
			{
			    _modificatorName = value;
			}
        }

		private String _statusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS_NAME" )]		public String StatusName 
		{ 
		    get { return _statusName; } 
			set 
			{
			    _statusName = value;
			}
        }

		private Decimal? _legalBasisId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LEGAL_BASIS_ID" )]		public Decimal? LegalBasisId 
		{ 
		    get { return _legalBasisId; } 
			set 
			{
			    _legalBasisId = value;
			}
        }

		private String _medicinalProductBe;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MEDICINAL_PRODUCT_BE" )]		public String MedicinalProductBe 
		{ 
		    get { return _medicinalProductBe; } 
			set 
			{
			    _medicinalProductBe = value;
			}
        }

		private String _isBeReport;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_BE_REPORT" )]		public String IsBeReport 
		{ 
		    get { return _isBeReport; } 
			set 
			{
			    _isBeReport = value;
			}
        }

		private Decimal? _beReportType;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="BE_REPORT_TYPE" )]		public Decimal? BeReportType 
		{ 
		    get { return _beReportType; } 
			set 
			{
			    _beReportType = value;
			}
        }

		private String _legaBasisValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="LEGA_BASIS_VALUE" )]		public String LegaBasisValue 
		{ 
		    get { return _legaBasisValue; } 
			set 
			{
			    _legaBasisValue = value;
			}
        }

		private Decimal _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="GROUP_ID" )]		public Decimal GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private Decimal? _responsibleId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RESPONSIBLE_ID" )]		public Decimal? ResponsibleId 
		{ 
		    get { return _responsibleId; } 
			set 
			{
			    _responsibleId = value;
			}
        }

		private String _groupName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUP_NAME" )]		public String GroupName 
		{ 
		    get { return _groupName; } 
			set 
			{
			    _groupName = value;
			}
        }

		private String _responsibleName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="RESPONSIBLE_NAME" )]		public String ResponsibleName 
		{ 
		    get { return _responsibleName; } 
			set 
			{
			    _responsibleName = value;
			}
        }

		private String _pharmaceuticalFormId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PHARMACEUTICAL_FORM_ID" )]		public String PharmaceuticalFormId 
		{ 
		    get { return _pharmaceuticalFormId; } 
			set 
			{
			    _pharmaceuticalFormId = value;
			}
        }

		private String _adminPharmaceuticalFormId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ADMIN_PHARMACEUTICAL_FORM_ID" )]		public String AdminPharmaceuticalFormId 
		{ 
		    get { return _adminPharmaceuticalFormId; } 
			set 
			{
			    _adminPharmaceuticalFormId = value;
			}
        }

		private String _referenceMedicinalProduct;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="REFERENCE_MEDICINAL_PRODUCT" )]		public String ReferenceMedicinalProduct 
		{ 
		    get { return _referenceMedicinalProduct; } 
			set 
			{
			    _referenceMedicinalProduct = value;
			}
        }

		private String _reportTypeDescription;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="REPORT_TYPE_DESCRIPTION" )]		public String ReportTypeDescription 
		{ 
		    get { return _reportTypeDescription; } 
			set 
			{
			    _reportTypeDescription = value;
			}
        }

		private Decimal? _rmsCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RMS_COUNTRY_ID" )]		public Decimal? RmsCountryId 
		{ 
		    get { return _rmsCountryId; } 
			set 
			{
			    _rmsCountryId = value;
			}
        }

		private Decimal _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_ID" )]		public Decimal ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }


	}

	public partial class DossierApiManufacturerRepository : Repository<DossierApiManufacturer> 
	{
		public DossierApiManufacturerRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class DossierApiManufacturerFields
	{
		public const string DossierId = "DossierId";
		public const string RossCode = "RossCode";
		public const string CreatedBy = "CreatedBy";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string DossierStatusId = "DossierStatusId";
		public const string ProductName = "ProductName";
		public const string PharmaceuticalForm = "PharmaceuticalForm";
		public const string AdminPharmaceuticalForm = "AdminPharmaceuticalForm";
		public const string InitialDossierFormat = "InitialDossierFormat";
		public const string IsDossierCopy = "IsDossierCopy";
		public const string IsDossierCopyType = "IsDossierCopyType";
		public const string FutureClient = "FutureClient";
		public const string IsDuplicatedFastTrack = "IsDuplicatedFastTrack";
		public const string FastTrackDeadLine = "FastTrackDeadLine";
		public const string MktAuthProdedureId = "MktAuthProdedureId";
		public const string IsDossierExtApplication = "IsDossierExtApplication";
		public const string AuthorisationProcedureValue = "AuthorisationProcedureValue";
		public const string CreatorName = "CreatorName";
		public const string ModificatorName = "ModificatorName";
		public const string StatusName = "StatusName";
		public const string LegalBasisId = "LegalBasisId";
		public const string MedicinalProductBe = "MedicinalProductBe";
		public const string IsBeReport = "IsBeReport";
		public const string BeReportType = "BeReportType";
		public const string LegaBasisValue = "LegaBasisValue";
		public const string GroupId = "GroupId";
		public const string ResponsibleId = "ResponsibleId";
		public const string GroupName = "GroupName";
		public const string ResponsibleName = "ResponsibleName";
		public const string PharmaceuticalFormId = "PharmaceuticalFormId";
		public const string AdminPharmaceuticalFormId = "AdminPharmaceuticalFormId";
		public const string ReferenceMedicinalProduct = "ReferenceMedicinalProduct";
		public const string ReportTypeDescription = "ReportTypeDescription";
		public const string RmsCountryId = "RmsCountryId";
		public const string ManufacturerId = "ManufacturerId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class DossierMaterial
	{
		private Decimal _materialId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MATERIAL_ID" )]		public Decimal MaterialId 
		{ 
		    get { return _materialId; } 
			set 
			{
			    _materialId = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }


	}

	public partial class DossierMaterialRepository : Repository<DossierMaterial> 
	{
		public DossierMaterialRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class DossierMaterialFields
	{
		public const string MaterialId = "MaterialId";
		public const string DossierId = "DossierId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MONTH_PERIODS")]
	public partial class MonthPeriod
	{
		private Decimal _monthId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="MONTH_ID", BaseColumnName ="MONTH_ID", BaseTableName = "MONTH_PERIODS" )]		public Decimal MonthId 
		{ 
		    get { return _monthId; } 
			set 
			{
			    _monthId = value;
			}
        }

		private String _monthName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MONTH_NAME", BaseColumnName ="MONTH_NAME", BaseTableName = "MONTH_PERIODS" )]		public String MonthName 
		{ 
		    get { return _monthName; } 
			set 
			{
			    _monthName = value;
			}
        }


	}

	public partial class MonthPeriodRepository : Repository<MonthPeriod> 
	{
		public MonthPeriodRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MonthPeriod Get(string projectionName, System.Decimal monthId)
		{
			return ((IRepository<MonthPeriod>)this).Get(projectionName, monthId, FetchMode.UseIdentityMap);
		}

		public MonthPeriod Get(string projectionName, System.Decimal monthId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MonthPeriod>)this).Get(projectionName, monthId, fetchMode);
		}

		public MonthPeriod Get(Projection projection, System.Decimal monthId)
		{
			return ((IRepository<MonthPeriod>)this).Get(projection, monthId, FetchMode.UseIdentityMap);
		}

		public MonthPeriod Get(Projection projection, System.Decimal monthId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MonthPeriod>)this).Get(projection, monthId, fetchMode);
		}

		public MonthPeriod Get(string projectionName, System.Decimal monthId, params string[] fields)
		{
			return ((IRepository<MonthPeriod>)this).Get(projectionName, monthId, fields);
		}

		public MonthPeriod Get(Projection projection, System.Decimal monthId, params string[] fields)
		{
			return ((IRepository<MonthPeriod>)this).Get(projection, monthId, fields);
		}

		public bool Delete(System.Decimal monthId)
		{
			var entity = new MonthPeriod { MonthId = monthId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MonthPeriodFields
	{
		public const string MonthId = "MonthId";
		public const string MonthName = "MonthName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="API_SUBSTATUSES")]
	public partial class ApiSubstatus
	{
		private Decimal _apiSubstatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="API_SUBSTATUS_ID", BaseColumnName ="API_SUBSTATUS_ID", BaseTableName = "API_SUBSTATUSES" )]		public Decimal ApiSubstatusId 
		{ 
		    get { return _apiSubstatusId; } 
			set 
			{
			    _apiSubstatusId = value;
			}
        }

		private String _apiSubstatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="API_SUBSTATUS_NAME", BaseColumnName ="API_SUBSTATUS_NAME", BaseTableName = "API_SUBSTATUSES" )]		public String ApiSubstatusName 
		{ 
		    get { return _apiSubstatusName; } 
			set 
			{
			    _apiSubstatusName = value;
			}
        }

		private Decimal _apiStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="API_STATUS_ID", BaseColumnName ="API_STATUS_ID", BaseTableName = "API_SUBSTATUSES" )]		public Decimal ApiStatusId 
		{ 
		    get { return _apiStatusId; } 
			set 
			{
			    _apiStatusId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "API_SUBSTATUSES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "API_SUBSTATUSES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "API_SUBSTATUSES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "API_SUBSTATUSES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class ApiSubstatusRepository : Repository<ApiSubstatus> 
	{
		public ApiSubstatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ApiSubstatus Get(string projectionName, System.Decimal apiSubstatusId)
		{
			return ((IRepository<ApiSubstatus>)this).Get(projectionName, apiSubstatusId, FetchMode.UseIdentityMap);
		}

		public ApiSubstatus Get(string projectionName, System.Decimal apiSubstatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiSubstatus>)this).Get(projectionName, apiSubstatusId, fetchMode);
		}

		public ApiSubstatus Get(Projection projection, System.Decimal apiSubstatusId)
		{
			return ((IRepository<ApiSubstatus>)this).Get(projection, apiSubstatusId, FetchMode.UseIdentityMap);
		}

		public ApiSubstatus Get(Projection projection, System.Decimal apiSubstatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ApiSubstatus>)this).Get(projection, apiSubstatusId, fetchMode);
		}

		public ApiSubstatus Get(string projectionName, System.Decimal apiSubstatusId, params string[] fields)
		{
			return ((IRepository<ApiSubstatus>)this).Get(projectionName, apiSubstatusId, fields);
		}

		public ApiSubstatus Get(Projection projection, System.Decimal apiSubstatusId, params string[] fields)
		{
			return ((IRepository<ApiSubstatus>)this).Get(projection, apiSubstatusId, fields);
		}

		public bool Delete(System.Decimal apiSubstatusId)
		{
			var entity = new ApiSubstatus { ApiSubstatusId = apiSubstatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ApiSubstatusFields
	{
		public const string ApiSubstatusId = "ApiSubstatusId";
		public const string ApiSubstatusName = "ApiSubstatusName";
		public const string ApiStatusId = "ApiStatusId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class DossierCountryPres
	{
		private Decimal _dossierCountryPresId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_PRES_ID" )]		public Decimal DossierCountryPresId 
		{ 
		    get { return _dossierCountryPresId; } 
			set 
			{
			    _dossierCountryPresId = value;
			}
        }

		private Decimal? _atReleaseShelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="AT_RELEASE_SHELF_LIFE" )]		public Decimal? AtReleaseShelfLife 
		{ 
		    get { return _atReleaseShelfLife; } 
			set 
			{
			    _atReleaseShelfLife = value;
			}
        }

		private String _atReleaseMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="AT_RELEASE_MEASUREMENT" )]		public String AtReleaseMeasurement 
		{ 
		    get { return _atReleaseMeasurement; } 
			set 
			{
			    _atReleaseMeasurement = value;
			}
        }

		private String _atReleaseStorageConditions;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="AT_RELEASE_STORAGE_CONDITIONS" )]		public String AtReleaseStorageConditions 
		{ 
		    get { return _atReleaseStorageConditions; } 
			set 
			{
			    _atReleaseStorageConditions = value;
			}
        }

		private Decimal? _openingShelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OPENING_SHELF_LIFE" )]		public Decimal? OpeningShelfLife 
		{ 
		    get { return _openingShelfLife; } 
			set 
			{
			    _openingShelfLife = value;
			}
        }

		private String _openingMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="OPENING_MEASUREMENT" )]		public String OpeningMeasurement 
		{ 
		    get { return _openingMeasurement; } 
			set 
			{
			    _openingMeasurement = value;
			}
        }

		private String _openingStorageConditions;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="OPENING_STORAGE_CONDITIONS" )]		public String OpeningStorageConditions 
		{ 
		    get { return _openingStorageConditions; } 
			set 
			{
			    _openingStorageConditions = value;
			}
        }

		private Decimal? _reconsShelfLife;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RECONS_SHELF_LIFE" )]		public Decimal? ReconsShelfLife 
		{ 
		    get { return _reconsShelfLife; } 
			set 
			{
			    _reconsShelfLife = value;
			}
        }

		private String _reconsMeasurement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="RECONS_MEASUREMENT" )]		public String ReconsMeasurement 
		{ 
		    get { return _reconsMeasurement; } 
			set 
			{
			    _reconsMeasurement = value;
			}
        }

		private String _reconsStorageConditions;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="RECONS_STORAGE_CONDITIONS" )]		public String ReconsStorageConditions 
		{ 
		    get { return _reconsStorageConditions; } 
			set 
			{
			    _reconsStorageConditions = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _atReleaseStorageNames;
		[DataMember]
		[SqlField(DbType.String, 1024, ColumnName ="AT_RELEASE_STORAGE_NAMES" )]		public String AtReleaseStorageNames 
		{ 
		    get { return _atReleaseStorageNames; } 
			set 
			{
			    _atReleaseStorageNames = value;
			}
        }

		private String _hasAtRelease;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_AT_RELEASE" )]		public String HasAtRelease 
		{ 
		    get { return _hasAtRelease; } 
			set 
			{
			    _hasAtRelease = value;
			}
        }

		private String _hasOpening;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_OPENING" )]		public String HasOpening 
		{ 
		    get { return _hasOpening; } 
			set 
			{
			    _hasOpening = value;
			}
        }

		private String _hasRecons;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="HAS_RECONS" )]		public String HasRecons 
		{ 
		    get { return _hasRecons; } 
			set 
			{
			    _hasRecons = value;
			}
        }

		private String _presentationName;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="PRESENTATION_NAME" )]		public String PresentationName 
		{ 
		    get { return _presentationName; } 
			set 
			{
			    _presentationName = value;
			}
        }

		private String _nationalCodeNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NATIONAL_CODE_NUMBER" )]		public String NationalCodeNumber 
		{ 
		    get { return _nationalCodeNumber; } 
			set 
			{
			    _nationalCodeNumber = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _countryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COUNTRY_ID" )]		public Decimal CountryId 
		{ 
		    get { return _countryId; } 
			set 
			{
			    _countryId = value;
			}
        }

		private Decimal? _occurrences;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="OCCURRENCES" )]		public Decimal? Occurrences 
		{ 
		    get { return _occurrences; } 
			set 
			{
			    _occurrences = value;
			}
        }

		private Decimal _dossierCountrySctId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_SCT_ID" )]		public Decimal DossierCountrySctId 
		{ 
		    get { return _dossierCountrySctId; } 
			set 
			{
			    _dossierCountrySctId = value;
			}
        }

		private Decimal _storageConditionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="STORAGE_CONDITION_ID" )]		public Decimal StorageConditionId 
		{ 
		    get { return _storageConditionId; } 
			set 
			{
			    _storageConditionId = value;
			}
        }


	}

	public partial class DossierCountryPresRepository : Repository<DossierCountryPres> 
	{
		public DossierCountryPresRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryPresFields
	{
		public const string DossierCountryPresId = "DossierCountryPresId";
		public const string AtReleaseShelfLife = "AtReleaseShelfLife";
		public const string AtReleaseMeasurement = "AtReleaseMeasurement";
		public const string AtReleaseStorageConditions = "AtReleaseStorageConditions";
		public const string OpeningShelfLife = "OpeningShelfLife";
		public const string OpeningMeasurement = "OpeningMeasurement";
		public const string OpeningStorageConditions = "OpeningStorageConditions";
		public const string ReconsShelfLife = "ReconsShelfLife";
		public const string ReconsMeasurement = "ReconsMeasurement";
		public const string ReconsStorageConditions = "ReconsStorageConditions";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierCountryId = "DossierCountryId";
		public const string AtReleaseStorageNames = "AtReleaseStorageNames";
		public const string HasAtRelease = "HasAtRelease";
		public const string HasOpening = "HasOpening";
		public const string HasRecons = "HasRecons";
		public const string PresentationName = "PresentationName";
		public const string NationalCodeNumber = "NationalCodeNumber";
		public const string DossierId = "DossierId";
		public const string CountryId = "CountryId";
		public const string Occurrences = "Occurrences";
		public const string DossierCountrySctId = "DossierCountrySctId";
		public const string StorageConditionId = "StorageConditionId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_DOSSIERS")]
	public partial class ModificationDossier
	{
		private Decimal _modificationDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_DOSSIER_ID", ColumnName ="MODIFICATION_DOSSIER_ID", BaseColumnName ="MODIFICATION_DOSSIER_ID", BaseTableName = "MODIFICATION_DOSSIERS" )]		public Decimal ModificationDossierId 
		{ 
		    get { return _modificationDossierId; } 
			set 
			{
			    _modificationDossierId = value;
			}
        }

		private Decimal _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_DOSSIER_ID", BaseColumnName ="MP_DOSSIER_ID", BaseTableName = "MODIFICATION_DOSSIERS" )]		public Decimal MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_DOSSIERS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_DOSSIERS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_DOSSIERS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_DOSSIERS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID", BaseColumnName ="MODIFICATION_ID", BaseTableName = "MODIFICATION_DOSSIERS" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _medicinalProductName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="MEDICINAL_PRODUCT_NAME" )]		public String MedicinalProductName 
		{ 
		    get { return _medicinalProductName; } 
			set 
			{
			    _medicinalProductName = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _groupName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUP_NAME" )]		public String GroupName 
		{ 
		    get { return _groupName; } 
			set 
			{
			    _groupName = value;
			}
        }

		private String _responsibleName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="RESPONSIBLE_NAME" )]		public String ResponsibleName 
		{ 
		    get { return _responsibleName; } 
			set 
			{
			    _responsibleName = value;
			}
        }

		private Decimal _mktAuthProdedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MKT_AUTH_PRODEDURE_ID" )]		public Decimal MktAuthProdedureId 
		{ 
		    get { return _mktAuthProdedureId; } 
			set 
			{
			    _mktAuthProdedureId = value;
			}
        }

		private Decimal _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="GROUP_ID" )]		public Decimal GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }


	}

	public partial class ModificationDossierRepository : Repository<ModificationDossier> 
	{
		public ModificationDossierRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationDossier Get(string projectionName, System.Decimal modificationDossierId)
		{
			return ((IRepository<ModificationDossier>)this).Get(projectionName, modificationDossierId, FetchMode.UseIdentityMap);
		}

		public ModificationDossier Get(string projectionName, System.Decimal modificationDossierId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationDossier>)this).Get(projectionName, modificationDossierId, fetchMode);
		}

		public ModificationDossier Get(Projection projection, System.Decimal modificationDossierId)
		{
			return ((IRepository<ModificationDossier>)this).Get(projection, modificationDossierId, FetchMode.UseIdentityMap);
		}

		public ModificationDossier Get(Projection projection, System.Decimal modificationDossierId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationDossier>)this).Get(projection, modificationDossierId, fetchMode);
		}

		public ModificationDossier Get(string projectionName, System.Decimal modificationDossierId, params string[] fields)
		{
			return ((IRepository<ModificationDossier>)this).Get(projectionName, modificationDossierId, fields);
		}

		public ModificationDossier Get(Projection projection, System.Decimal modificationDossierId, params string[] fields)
		{
			return ((IRepository<ModificationDossier>)this).Get(projection, modificationDossierId, fields);
		}

		public bool Delete(System.Decimal modificationDossierId)
		{
			var entity = new ModificationDossier { ModificationDossierId = modificationDossierId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationDossierFields
	{
		public const string ModificationDossierId = "ModificationDossierId";
		public const string MpDossierId = "MpDossierId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ModificationId = "ModificationId";
		public const string DossierId = "DossierId";
		public const string MedicinalProductId = "MedicinalProductId";
		public const string MedicinalProductName = "MedicinalProductName";
		public const string ProductName = "ProductName";
		public const string GroupName = "GroupName";
		public const string ResponsibleName = "ResponsibleName";
		public const string MktAuthProdedureId = "MktAuthProdedureId";
		public const string GroupId = "GroupId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_SUBMISSIONS")]
	public partial class ModificationSubmission
	{
		private Decimal _modificationSubmissionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_SUBMISSION_ID", ColumnName ="MODIFICATION_SUBMISSION_ID", BaseColumnName ="MODIFICATION_SUBMISSION_ID", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public Decimal ModificationSubmissionId 
		{ 
		    get { return _modificationSubmissionId; } 
			set 
			{
			    _modificationSubmissionId = value;
			}
        }

		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID", BaseColumnName ="MODIFICATION_ID", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private Decimal _modificationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_TYPE_ID", BaseColumnName ="MODIFICATION_TYPE_ID", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public Decimal ModificationTypeId 
		{ 
		    get { return _modificationTypeId; } 
			set 
			{
			    _modificationTypeId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isVariationGrouping;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_VARIATION_GROUPING", BaseColumnName ="IS_VARIATION_GROUPING", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsVariationGrouping 
		{ 
		    get { return _isVariationGrouping; } 
			set 
			{
			    _isVariationGrouping = value;
			}
        }

		private String _isNaAuthorisationDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_AUTHORISATION_DATE", BaseColumnName ="IS_NA_AUTHORISATION_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaAuthorisationDate 
		{ 
		    get { return _isNaAuthorisationDate; } 
			set 
			{
			    _isNaAuthorisationDate = value;
			}
        }

		private String _isCommunicationAuthority;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_COMMUNICATION_AUTHORITY", BaseColumnName ="IS_COMMUNICATION_AUTHORITY", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsCommunicationAuthority 
		{ 
		    get { return _isCommunicationAuthority; } 
			set 
			{
			    _isCommunicationAuthority = value;
			}
        }

		private Decimal? _communicationType;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMUNICATION_TYPE", BaseColumnName ="COMMUNICATION_TYPE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public Decimal? CommunicationType 
		{ 
		    get { return _communicationType; } 
			set 
			{
			    _communicationType = value;
			}
        }

		private String _groupingNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUPING_NUMBER", BaseColumnName ="GROUPING_NUMBER", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String GroupingNumber 
		{ 
		    get { return _groupingNumber; } 
			set 
			{
			    _groupingNumber = value;
			}
        }

		private DateTime? _clientDispatchDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLIENT_DISPATCH_DATE", BaseColumnName ="CLIENT_DISPATCH_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? ClientDispatchDate 
		{ 
		    get { return _clientDispatchDate; } 
			set 
			{
			    _clientDispatchDate = value;
			}
        }

		private DateTime? _expectedSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_SUBMISSION_DATE", BaseColumnName ="EXPECTED_SUBMISSION_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? ExpectedSubmissionDate 
		{ 
		    get { return _expectedSubmissionDate; } 
			set 
			{
			    _expectedSubmissionDate = value;
			}
        }

		private DateTime? _submissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DATE", BaseColumnName ="SUBMISSION_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? SubmissionDate 
		{ 
		    get { return _submissionDate; } 
			set 
			{
			    _submissionDate = value;
			}
        }

		private DateTime? _uploadSpanishPortalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="UPLOAD_SPANISH_PORTAL_DATE", BaseColumnName ="UPLOAD_SPANISH_PORTAL_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? UploadSpanishPortalDate 
		{ 
		    get { return _uploadSpanishPortalDate; } 
			set 
			{
			    _uploadSpanishPortalDate = value;
			}
        }

		private DateTime? _validationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VALIDATION_DATE", BaseColumnName ="VALIDATION_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? ValidationDate 
		{ 
		    get { return _validationDate; } 
			set 
			{
			    _validationDate = value;
			}
        }

		private DateTime? _expectedDispatchClientDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DISPATCH_CLIENT_DATE", BaseColumnName ="EXPECTED_DISPATCH_CLIENT_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? ExpectedDispatchClientDate 
		{ 
		    get { return _expectedDispatchClientDate; } 
			set 
			{
			    _expectedDispatchClientDate = value;
			}
        }

		private DateTime? _raefarInclusionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RAEFAR_INCLUSION_DATE", BaseColumnName ="RAEFAR_INCLUSION_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? RaefarInclusionDate 
		{ 
		    get { return _raefarInclusionDate; } 
			set 
			{
			    _raefarInclusionDate = value;
			}
        }

		private DateTime? _finalOpinionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FINAL_OPINION_DATE", BaseColumnName ="FINAL_OPINION_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? FinalOpinionDate 
		{ 
		    get { return _finalOpinionDate; } 
			set 
			{
			    _finalOpinionDate = value;
			}
        }

		private DateTime? _renewalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_DATE", BaseColumnName ="RENEWAL_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? RenewalDate 
		{ 
		    get { return _renewalDate; } 
			set 
			{
			    _renewalDate = value;
			}
        }

		private DateTime? _clientInformedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLIENT_INFORMED_DATE", BaseColumnName ="CLIENT_INFORMED_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? ClientInformedDate 
		{ 
		    get { return _clientInformedDate; } 
			set 
			{
			    _clientInformedDate = value;
			}
        }

		private String _isApplicationSubmitted;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_APPLICATION_SUBMITTED", BaseColumnName ="IS_APPLICATION_SUBMITTED", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsApplicationSubmitted 
		{ 
		    get { return _isApplicationSubmitted; } 
			set 
			{
			    _isApplicationSubmitted = value;
			}
        }

		private DateTime? _d0ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D0_EXPECTED_DATE", BaseColumnName ="D0_EXPECTED_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D0ExpectedDate 
		{ 
		    get { return _d0ExpectedDate; } 
			set 
			{
			    _d0ExpectedDate = value;
			}
        }

		private DateTime? _d0RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D0_REAL_DATE", BaseColumnName ="D0_REAL_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D0RealDate 
		{ 
		    get { return _d0RealDate; } 
			set 
			{
			    _d0RealDate = value;
			}
        }

		private DateTime? _d10ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D10_EXPECTED_DATE", BaseColumnName ="D10_EXPECTED_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D10ExpectedDate 
		{ 
		    get { return _d10ExpectedDate; } 
			set 
			{
			    _d10ExpectedDate = value;
			}
        }

		private DateTime? _d10RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D10_REAL_DATE", BaseColumnName ="D10_REAL_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D10RealDate 
		{ 
		    get { return _d10RealDate; } 
			set 
			{
			    _d10RealDate = value;
			}
        }

		private DateTime? _d25ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D25_EXPECTED_DATE", BaseColumnName ="D25_EXPECTED_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D25ExpectedDate 
		{ 
		    get { return _d25ExpectedDate; } 
			set 
			{
			    _d25ExpectedDate = value;
			}
        }

		private DateTime? _d25RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D25_REAL_DATE", BaseColumnName ="D25_REAL_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D25RealDate 
		{ 
		    get { return _d25RealDate; } 
			set 
			{
			    _d25RealDate = value;
			}
        }

		private DateTime? _d35ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D35_EXPECTED_DATE", BaseColumnName ="D35_EXPECTED_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D35ExpectedDate 
		{ 
		    get { return _d35ExpectedDate; } 
			set 
			{
			    _d35ExpectedDate = value;
			}
        }

		private DateTime? _d35RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D35_REAL_DATE", BaseColumnName ="D35_REAL_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D35RealDate 
		{ 
		    get { return _d35RealDate; } 
			set 
			{
			    _d35RealDate = value;
			}
        }

		private DateTime? _d55ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D55_EXPECTED_DATE", BaseColumnName ="D55_EXPECTED_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D55ExpectedDate 
		{ 
		    get { return _d55ExpectedDate; } 
			set 
			{
			    _d55ExpectedDate = value;
			}
        }

		private DateTime? _d55RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D55_REAL_DATE", BaseColumnName ="D55_REAL_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D55RealDate 
		{ 
		    get { return _d55RealDate; } 
			set 
			{
			    _d55RealDate = value;
			}
        }

		private DateTime? _d60ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D60_EXPECTED_DATE", BaseColumnName ="D60_EXPECTED_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D60ExpectedDate 
		{ 
		    get { return _d60ExpectedDate; } 
			set 
			{
			    _d60ExpectedDate = value;
			}
        }

		private DateTime? _d60RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D60_REAL_DATE", BaseColumnName ="D60_REAL_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? D60RealDate 
		{ 
		    get { return _d60RealDate; } 
			set 
			{
			    _d60RealDate = value;
			}
        }

		private String _isNaExpected0;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED0", BaseColumnName ="IS_NA_EXPECTED0", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpected0 
		{ 
		    get { return _isNaExpected0; } 
			set 
			{
			    _isNaExpected0 = value;
			}
        }

		private String _isNaExpected10;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED10", BaseColumnName ="IS_NA_EXPECTED10", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpected10 
		{ 
		    get { return _isNaExpected10; } 
			set 
			{
			    _isNaExpected10 = value;
			}
        }

		private String _isNaExpected25;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED25", BaseColumnName ="IS_NA_EXPECTED25", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpected25 
		{ 
		    get { return _isNaExpected25; } 
			set 
			{
			    _isNaExpected25 = value;
			}
        }

		private String _isNaExpected35;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED35", BaseColumnName ="IS_NA_EXPECTED35", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpected35 
		{ 
		    get { return _isNaExpected35; } 
			set 
			{
			    _isNaExpected35 = value;
			}
        }

		private String _isNaExpected55;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED55", BaseColumnName ="IS_NA_EXPECTED55", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpected55 
		{ 
		    get { return _isNaExpected55; } 
			set 
			{
			    _isNaExpected55 = value;
			}
        }

		private String _isNaExpected60;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED60", BaseColumnName ="IS_NA_EXPECTED60", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpected60 
		{ 
		    get { return _isNaExpected60; } 
			set 
			{
			    _isNaExpected60 = value;
			}
        }

		private String _isNaReal0;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL0", BaseColumnName ="IS_NA_REAL0", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaReal0 
		{ 
		    get { return _isNaReal0; } 
			set 
			{
			    _isNaReal0 = value;
			}
        }

		private String _isNaReal10;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL10", BaseColumnName ="IS_NA_REAL10", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaReal10 
		{ 
		    get { return _isNaReal10; } 
			set 
			{
			    _isNaReal10 = value;
			}
        }

		private String _isNaReal25;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL25", BaseColumnName ="IS_NA_REAL25", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaReal25 
		{ 
		    get { return _isNaReal25; } 
			set 
			{
			    _isNaReal25 = value;
			}
        }

		private String _isNaReal35;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL35", BaseColumnName ="IS_NA_REAL35", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaReal35 
		{ 
		    get { return _isNaReal35; } 
			set 
			{
			    _isNaReal35 = value;
			}
        }

		private String _isNaReal55;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL55", BaseColumnName ="IS_NA_REAL55", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaReal55 
		{ 
		    get { return _isNaReal55; } 
			set 
			{
			    _isNaReal55 = value;
			}
        }

		private String _isNaReal60;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL60", BaseColumnName ="IS_NA_REAL60", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaReal60 
		{ 
		    get { return _isNaReal60; } 
			set 
			{
			    _isNaReal60 = value;
			}
        }

		private String _isNaClientDispatch;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_CLIENT_DISPATCH", BaseColumnName ="IS_NA_CLIENT_DISPATCH", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaClientDispatch 
		{ 
		    get { return _isNaClientDispatch; } 
			set 
			{
			    _isNaClientDispatch = value;
			}
        }

		private String _isNaExpectedSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_SUBMISSION", BaseColumnName ="IS_NA_EXPECTED_SUBMISSION", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpectedSubmission 
		{ 
		    get { return _isNaExpectedSubmission; } 
			set 
			{
			    _isNaExpectedSubmission = value;
			}
        }

		private String _isNaUploadSpanish;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_UPLOAD_SPANISH", BaseColumnName ="IS_NA_UPLOAD_SPANISH", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaUploadSpanish 
		{ 
		    get { return _isNaUploadSpanish; } 
			set 
			{
			    _isNaUploadSpanish = value;
			}
        }

		private String _isNaValidation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_VALIDATION", BaseColumnName ="IS_NA_VALIDATION", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaValidation 
		{ 
		    get { return _isNaValidation; } 
			set 
			{
			    _isNaValidation = value;
			}
        }

		private String _isNaExpectedDispatch;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DISPATCH", BaseColumnName ="IS_NA_EXPECTED_DISPATCH", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpectedDispatch 
		{ 
		    get { return _isNaExpectedDispatch; } 
			set 
			{
			    _isNaExpectedDispatch = value;
			}
        }

		private String _isNaRaefarInclusion;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RAEFAR_INCLUSION", BaseColumnName ="IS_NA_RAEFAR_INCLUSION", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaRaefarInclusion 
		{ 
		    get { return _isNaRaefarInclusion; } 
			set 
			{
			    _isNaRaefarInclusion = value;
			}
        }

		private String _isNaFinalOpinion;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_FINAL_OPINION", BaseColumnName ="IS_NA_FINAL_OPINION", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaFinalOpinion 
		{ 
		    get { return _isNaFinalOpinion; } 
			set 
			{
			    _isNaFinalOpinion = value;
			}
        }

		private String _isNaRenewal;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RENEWAL", BaseColumnName ="IS_NA_RENEWAL", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaRenewal 
		{ 
		    get { return _isNaRenewal; } 
			set 
			{
			    _isNaRenewal = value;
			}
        }

		private String _isNaClientInformed;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_CLIENT_INFORMED", BaseColumnName ="IS_NA_CLIENT_INFORMED", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaClientInformed 
		{ 
		    get { return _isNaClientInformed; } 
			set 
			{
			    _isNaClientInformed = value;
			}
        }

		private String _isNaSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUBMISSION", BaseColumnName ="IS_NA_SUBMISSION", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaSubmission 
		{ 
		    get { return _isNaSubmission; } 
			set 
			{
			    _isNaSubmission = value;
			}
        }

		private String _isNaDeadline;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DEADLINE", BaseColumnName ="IS_NA_DEADLINE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaDeadline 
		{ 
		    get { return _isNaDeadline; } 
			set 
			{
			    _isNaDeadline = value;
			}
        }

		private DateTime? _deadlineDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DEADLINE_DATE", BaseColumnName ="DEADLINE_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? DeadlineDate 
		{ 
		    get { return _deadlineDate; } 
			set 
			{
			    _deadlineDate = value;
			}
        }

		private DateTime? _expectedResolutionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_RESOLUTION_DATE", BaseColumnName ="EXPECTED_RESOLUTION_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? ExpectedResolutionDate 
		{ 
		    get { return _expectedResolutionDate; } 
			set 
			{
			    _expectedResolutionDate = value;
			}
        }

		private String _isNaExpectedResolution;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_RESOLUTION", BaseColumnName ="IS_NA_EXPECTED_RESOLUTION", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpectedResolution 
		{ 
		    get { return _isNaExpectedResolution; } 
			set 
			{
			    _isNaExpectedResolution = value;
			}
        }

		private String _requirements;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="REQUIREMENTS", BaseColumnName ="REQUIREMENTS", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String Requirements 
		{ 
		    get { return _requirements; } 
			set 
			{
			    _requirements = value;
			}
        }

		private Decimal? _normonClientDecisionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="NORMON_CLIENT_DECISION_ID", BaseColumnName ="NORMON_CLIENT_DECISION_ID", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public Decimal? NormonClientDecisionId 
		{ 
		    get { return _normonClientDecisionId; } 
			set 
			{
			    _normonClientDecisionId = value;
			}
        }

		private DateTime? _normonClientDecisionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="NORMON_CLIENT_DECISION_DATE", BaseColumnName ="NORMON_CLIENT_DECISION_DATE", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? NormonClientDecisionDate 
		{ 
		    get { return _normonClientDecisionDate; } 
			set 
			{
			    _normonClientDecisionDate = value;
			}
        }

		private String _isNaNormonClientDecision;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_NORMON_CLIENT_DECISION", BaseColumnName ="IS_NA_NORMON_CLIENT_DECISION", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaNormonClientDecision 
		{ 
		    get { return _isNaNormonClientDecision; } 
			set 
			{
			    _isNaNormonClientDecision = value;
			}
        }

		private String _isNaExpectedFinal;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_FINAL", BaseColumnName ="IS_NA_EXPECTED_FINAL", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public String IsNaExpectedFinal 
		{ 
		    get { return _isNaExpectedFinal; } 
			set 
			{
			    _isNaExpectedFinal = value;
			}
        }

		private DateTime? _expectedFinalOpinion;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_FINAL_OPINION", BaseColumnName ="EXPECTED_FINAL_OPINION", BaseTableName = "MODIFICATION_SUBMISSIONS" )]		public DateTime? ExpectedFinalOpinion 
		{ 
		    get { return _expectedFinalOpinion; } 
			set 
			{
			    _expectedFinalOpinion = value;
			}
        }

		private String _modificationTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATION_TYPE_NAME" )]		public String ModificationTypeName 
		{ 
		    get { return _modificationTypeName; } 
			set 
			{
			    _modificationTypeName = value;
			}
        }

		private String _normonClientDecisionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NORMON_CLIENT_DECISION_NAME" )]		public String NormonClientDecisionName 
		{ 
		    get { return _normonClientDecisionName; } 
			set 
			{
			    _normonClientDecisionName = value;
			}
        }

		private Decimal? _clientDispatchYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CLIENT_DISPATCH_YEAR" )]		public Decimal? ClientDispatchYear 
		{ 
		    get { return _clientDispatchYear; } 
			set 
			{
			    _clientDispatchYear = value;
			}
        }

		private Decimal? _clientDispatchMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CLIENT_DISPATCH_MONTH" )]		public Decimal? ClientDispatchMonth 
		{ 
		    get { return _clientDispatchMonth; } 
			set 
			{
			    _clientDispatchMonth = value;
			}
        }

		private Decimal? _submissionYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SUBMISSION_YEAR" )]		public Decimal? SubmissionYear 
		{ 
		    get { return _submissionYear; } 
			set 
			{
			    _submissionYear = value;
			}
        }

		private Decimal? _submissionMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SUBMISSION_MONTH" )]		public Decimal? SubmissionMonth 
		{ 
		    get { return _submissionMonth; } 
			set 
			{
			    _submissionMonth = value;
			}
        }

		private Decimal? _finalOpinionYear;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="FINAL_OPINION_YEAR" )]		public Decimal? FinalOpinionYear 
		{ 
		    get { return _finalOpinionYear; } 
			set 
			{
			    _finalOpinionYear = value;
			}
        }

		private Decimal? _finalOpinionMonth;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="FINAL_OPINION_MONTH" )]		public Decimal? FinalOpinionMonth 
		{ 
		    get { return _finalOpinionMonth; } 
			set 
			{
			    _finalOpinionMonth = value;
			}
        }


	}

	public partial class ModificationSubmissionRepository : Repository<ModificationSubmission> 
	{
		public ModificationSubmissionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationSubmission Get(string projectionName, System.Decimal modificationSubmissionId)
		{
			return ((IRepository<ModificationSubmission>)this).Get(projectionName, modificationSubmissionId, FetchMode.UseIdentityMap);
		}

		public ModificationSubmission Get(string projectionName, System.Decimal modificationSubmissionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationSubmission>)this).Get(projectionName, modificationSubmissionId, fetchMode);
		}

		public ModificationSubmission Get(Projection projection, System.Decimal modificationSubmissionId)
		{
			return ((IRepository<ModificationSubmission>)this).Get(projection, modificationSubmissionId, FetchMode.UseIdentityMap);
		}

		public ModificationSubmission Get(Projection projection, System.Decimal modificationSubmissionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationSubmission>)this).Get(projection, modificationSubmissionId, fetchMode);
		}

		public ModificationSubmission Get(string projectionName, System.Decimal modificationSubmissionId, params string[] fields)
		{
			return ((IRepository<ModificationSubmission>)this).Get(projectionName, modificationSubmissionId, fields);
		}

		public ModificationSubmission Get(Projection projection, System.Decimal modificationSubmissionId, params string[] fields)
		{
			return ((IRepository<ModificationSubmission>)this).Get(projection, modificationSubmissionId, fields);
		}

		public bool Delete(System.Decimal modificationSubmissionId)
		{
			var entity = new ModificationSubmission { ModificationSubmissionId = modificationSubmissionId };
			return this.Delete(entity);
		}

		
		public void DeleteModSubmission(Decimal? subId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteModSubmissionProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "SUB_ID"].Value = subId == null ? (object) DBNull.Value : subId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationSubmissionFields
	{
		public const string ModificationSubmissionId = "ModificationSubmissionId";
		public const string ModificationId = "ModificationId";
		public const string ModificationTypeId = "ModificationTypeId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsVariationGrouping = "IsVariationGrouping";
		public const string IsNaAuthorisationDate = "IsNaAuthorisationDate";
		public const string IsCommunicationAuthority = "IsCommunicationAuthority";
		public const string CommunicationType = "CommunicationType";
		public const string GroupingNumber = "GroupingNumber";
		public const string ClientDispatchDate = "ClientDispatchDate";
		public const string ExpectedSubmissionDate = "ExpectedSubmissionDate";
		public const string SubmissionDate = "SubmissionDate";
		public const string UploadSpanishPortalDate = "UploadSpanishPortalDate";
		public const string ValidationDate = "ValidationDate";
		public const string ExpectedDispatchClientDate = "ExpectedDispatchClientDate";
		public const string RaefarInclusionDate = "RaefarInclusionDate";
		public const string FinalOpinionDate = "FinalOpinionDate";
		public const string RenewalDate = "RenewalDate";
		public const string ClientInformedDate = "ClientInformedDate";
		public const string IsApplicationSubmitted = "IsApplicationSubmitted";
		public const string D0ExpectedDate = "D0ExpectedDate";
		public const string D0RealDate = "D0RealDate";
		public const string D10ExpectedDate = "D10ExpectedDate";
		public const string D10RealDate = "D10RealDate";
		public const string D25ExpectedDate = "D25ExpectedDate";
		public const string D25RealDate = "D25RealDate";
		public const string D35ExpectedDate = "D35ExpectedDate";
		public const string D35RealDate = "D35RealDate";
		public const string D55ExpectedDate = "D55ExpectedDate";
		public const string D55RealDate = "D55RealDate";
		public const string D60ExpectedDate = "D60ExpectedDate";
		public const string D60RealDate = "D60RealDate";
		public const string IsNaExpected0 = "IsNaExpected0";
		public const string IsNaExpected10 = "IsNaExpected10";
		public const string IsNaExpected25 = "IsNaExpected25";
		public const string IsNaExpected35 = "IsNaExpected35";
		public const string IsNaExpected55 = "IsNaExpected55";
		public const string IsNaExpected60 = "IsNaExpected60";
		public const string IsNaReal0 = "IsNaReal0";
		public const string IsNaReal10 = "IsNaReal10";
		public const string IsNaReal25 = "IsNaReal25";
		public const string IsNaReal35 = "IsNaReal35";
		public const string IsNaReal55 = "IsNaReal55";
		public const string IsNaReal60 = "IsNaReal60";
		public const string IsNaClientDispatch = "IsNaClientDispatch";
		public const string IsNaExpectedSubmission = "IsNaExpectedSubmission";
		public const string IsNaUploadSpanish = "IsNaUploadSpanish";
		public const string IsNaValidation = "IsNaValidation";
		public const string IsNaExpectedDispatch = "IsNaExpectedDispatch";
		public const string IsNaRaefarInclusion = "IsNaRaefarInclusion";
		public const string IsNaFinalOpinion = "IsNaFinalOpinion";
		public const string IsNaRenewal = "IsNaRenewal";
		public const string IsNaClientInformed = "IsNaClientInformed";
		public const string IsNaSubmission = "IsNaSubmission";
		public const string IsNaDeadline = "IsNaDeadline";
		public const string DeadlineDate = "DeadlineDate";
		public const string ExpectedResolutionDate = "ExpectedResolutionDate";
		public const string IsNaExpectedResolution = "IsNaExpectedResolution";
		public const string Requirements = "Requirements";
		public const string NormonClientDecisionId = "NormonClientDecisionId";
		public const string NormonClientDecisionDate = "NormonClientDecisionDate";
		public const string IsNaNormonClientDecision = "IsNaNormonClientDecision";
		public const string IsNaExpectedFinal = "IsNaExpectedFinal";
		public const string ExpectedFinalOpinion = "ExpectedFinalOpinion";
		public const string ModificationTypeName = "ModificationTypeName";
		public const string NormonClientDecisionName = "NormonClientDecisionName";
		public const string ClientDispatchYear = "ClientDispatchYear";
		public const string ClientDispatchMonth = "ClientDispatchMonth";
		public const string SubmissionYear = "SubmissionYear";
		public const string SubmissionMonth = "SubmissionMonth";
		public const string FinalOpinionYear = "FinalOpinionYear";
		public const string FinalOpinionMonth = "FinalOpinionMonth";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="QPPV_CODES")]
	public partial class QppvCode
	{
		private String _qppvCodeId;
		[DataMember]
		[SqlField(DbType.String, 128, IsKey=true, ColumnName ="QPPV_CODE_ID", BaseColumnName ="QPPV_CODE_ID", BaseTableName = "QPPV_CODES" )]		public String QppvCodeId 
		{ 
		    get { return _qppvCodeId; } 
			set 
			{
			    _qppvCodeId = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "QPPV_CODES" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _organisationId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ORGANISATION_ID", BaseColumnName ="ORGANISATION_ID", BaseTableName = "QPPV_CODES" )]		public String OrganisationId 
		{ 
		    get { return _organisationId; } 
			set 
			{
			    _organisationId = value;
			}
        }

		private String _firstName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FIRST_NAME", BaseColumnName ="FIRST_NAME", BaseTableName = "QPPV_CODES" )]		public String FirstName 
		{ 
		    get { return _firstName; } 
			set 
			{
			    _firstName = value;
			}
        }

		private String _familyName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FAMILY_NAME", BaseColumnName ="FAMILY_NAME", BaseTableName = "QPPV_CODES" )]		public String FamilyName 
		{ 
		    get { return _familyName; } 
			set 
			{
			    _familyName = value;
			}
        }

		private String _fullName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="FULL_NAME", BaseColumnName ="FULL_NAME", BaseTableName = "QPPV_CODES" )]		public String FullName 
		{ 
		    get { return _fullName; } 
			set 
			{
			    _fullName = value;
			}
        }

		private String _organisationValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ORGANISATION_VALUE" )]		public String OrganisationValue 
		{ 
		    get { return _organisationValue; } 
			set 
			{
			    _organisationValue = value;
			}
        }

		private Decimal? _iterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ITERATIONS" )]		public Decimal? Iterations 
		{ 
		    get { return _iterations; } 
			set 
			{
			    _iterations = value;
			}
        }

		private Decimal? _isOpen;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="IS_OPEN" )]		public Decimal? IsOpen 
		{ 
		    get { return _isOpen; } 
			set 
			{
			    _isOpen = value;
			}
        }


	}

	public partial class QppvCodeRepository : Repository<QppvCode> 
	{
		public QppvCodeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public QppvCode Get(string projectionName, System.String qppvCodeId)
		{
			return ((IRepository<QppvCode>)this).Get(projectionName, qppvCodeId, FetchMode.UseIdentityMap);
		}

		public QppvCode Get(string projectionName, System.String qppvCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<QppvCode>)this).Get(projectionName, qppvCodeId, fetchMode);
		}

		public QppvCode Get(Projection projection, System.String qppvCodeId)
		{
			return ((IRepository<QppvCode>)this).Get(projection, qppvCodeId, FetchMode.UseIdentityMap);
		}

		public QppvCode Get(Projection projection, System.String qppvCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<QppvCode>)this).Get(projection, qppvCodeId, fetchMode);
		}

		public QppvCode Get(string projectionName, System.String qppvCodeId, params string[] fields)
		{
			return ((IRepository<QppvCode>)this).Get(projectionName, qppvCodeId, fields);
		}

		public QppvCode Get(Projection projection, System.String qppvCodeId, params string[] fields)
		{
			return ((IRepository<QppvCode>)this).Get(projection, qppvCodeId, fields);
		}

		public bool Delete(System.String qppvCodeId)
		{
			var entity = new QppvCode { QppvCodeId = qppvCodeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class QppvCodeFields
	{
		public const string QppvCodeId = "QppvCodeId";
		public const string XevmpdCode = "XevmpdCode";
		public const string OrganisationId = "OrganisationId";
		public const string FirstName = "FirstName";
		public const string FamilyName = "FamilyName";
		public const string FullName = "FullName";
		public const string OrganisationValue = "OrganisationValue";
		public const string Iterations = "Iterations";
		public const string IsOpen = "IsOpen";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="ORGANISATIONS")]
	public partial class Organisation
	{
		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "ORGANISATIONS" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _organisationValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ORGANISATION_VALUE", BaseColumnName ="ORGANISATION_VALUE", BaseTableName = "ORGANISATIONS" )]		public String OrganisationValue 
		{ 
		    get { return _organisationValue; } 
			set 
			{
			    _organisationValue = value;
			}
        }

		private String _organisationAddress;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ORGANISATION_ADDRESS", BaseColumnName ="ORGANISATION_ADDRESS", BaseTableName = "ORGANISATIONS" )]		public String OrganisationAddress 
		{ 
		    get { return _organisationAddress; } 
			set 
			{
			    _organisationAddress = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "ORGANISATIONS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "ORGANISATIONS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private String _status;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATUS", BaseColumnName ="STATUS", BaseTableName = "ORGANISATIONS" )]		public String Status 
		{ 
		    get { return _status; } 
			set 
			{
			    _status = value;
			}
        }

		private String _fullName;
		[DataMember]
		[SqlField(DbType.String, 771, ColumnName ="FULL_NAME" )]		public String FullName 
		{ 
		    get { return _fullName; } 
			set 
			{
			    _fullName = value;
			}
        }


	}

	public partial class OrganisationRepository : Repository<Organisation> 
	{
		public OrganisationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class OrganisationFields
	{
		public const string XevmpdCode = "XevmpdCode";
		public const string OrganisationValue = "OrganisationValue";
		public const string OrganisationAddress = "OrganisationAddress";
		public const string CreatedDate = "CreatedDate";
		public const string ModifiedDate = "ModifiedDate";
		public const string Status = "Status";
		public const string FullName = "FullName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PSMFL_CODES")]
	public partial class PsmflCode
	{
		private String _psmflCodeId;
		[DataMember]
		[SqlField(DbType.String, 128, IsKey=true, ColumnName ="PSMFL_CODE_ID", BaseColumnName ="PSMFL_CODE_ID", BaseTableName = "PSMFL_CODES" )]		public String PsmflCodeId 
		{ 
		    get { return _psmflCodeId; } 
			set 
			{
			    _psmflCodeId = value;
			}
        }

		private String _psmflName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PSMFL_NAME", BaseColumnName ="PSMFL_NAME", BaseTableName = "PSMFL_CODES" )]		public String PsmflName 
		{ 
		    get { return _psmflName; } 
			set 
			{
			    _psmflName = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "PSMFL_CODES" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _building;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="BUILDING", BaseColumnName ="BUILDING", BaseTableName = "PSMFL_CODES" )]		public String Building 
		{ 
		    get { return _building; } 
			set 
			{
			    _building = value;
			}
        }

		private String _street;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STREET", BaseColumnName ="STREET", BaseTableName = "PSMFL_CODES" )]		public String Street 
		{ 
		    get { return _street; } 
			set 
			{
			    _street = value;
			}
        }

		private String _city;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CITY", BaseColumnName ="CITY", BaseTableName = "PSMFL_CODES" )]		public String City 
		{ 
		    get { return _city; } 
			set 
			{
			    _city = value;
			}
        }

		private String _state;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STATE", BaseColumnName ="STATE", BaseTableName = "PSMFL_CODES" )]		public String State 
		{ 
		    get { return _state; } 
			set 
			{
			    _state = value;
			}
        }

		private String _postalCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="POSTAL_CODE", BaseColumnName ="POSTAL_CODE", BaseTableName = "PSMFL_CODES" )]		public String PostalCode 
		{ 
		    get { return _postalCode; } 
			set 
			{
			    _postalCode = value;
			}
        }

		private String _countryCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="COUNTRY_CODE", BaseColumnName ="COUNTRY_CODE", BaseTableName = "PSMFL_CODES" )]		public String CountryCode 
		{ 
		    get { return _countryCode; } 
			set 
			{
			    _countryCode = value;
			}
        }

		private Decimal? _iterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ITERATIONS" )]		public Decimal? Iterations 
		{ 
		    get { return _iterations; } 
			set 
			{
			    _iterations = value;
			}
        }

		private Decimal? _isOpen;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="IS_OPEN" )]		public Decimal? IsOpen 
		{ 
		    get { return _isOpen; } 
			set 
			{
			    _isOpen = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }


	}

	public partial class PsmflCodeRepository : Repository<PsmflCode> 
	{
		public PsmflCodeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public PsmflCode Get(string projectionName, System.String psmflCodeId)
		{
			return ((IRepository<PsmflCode>)this).Get(projectionName, psmflCodeId, FetchMode.UseIdentityMap);
		}

		public PsmflCode Get(string projectionName, System.String psmflCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PsmflCode>)this).Get(projectionName, psmflCodeId, fetchMode);
		}

		public PsmflCode Get(Projection projection, System.String psmflCodeId)
		{
			return ((IRepository<PsmflCode>)this).Get(projection, psmflCodeId, FetchMode.UseIdentityMap);
		}

		public PsmflCode Get(Projection projection, System.String psmflCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PsmflCode>)this).Get(projection, psmflCodeId, fetchMode);
		}

		public PsmflCode Get(string projectionName, System.String psmflCodeId, params string[] fields)
		{
			return ((IRepository<PsmflCode>)this).Get(projectionName, psmflCodeId, fields);
		}

		public PsmflCode Get(Projection projection, System.String psmflCodeId, params string[] fields)
		{
			return ((IRepository<PsmflCode>)this).Get(projection, psmflCodeId, fields);
		}

		public bool Delete(System.String psmflCodeId)
		{
			var entity = new PsmflCode { PsmflCodeId = psmflCodeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PsmflCodeFields
	{
		public const string PsmflCodeId = "PsmflCodeId";
		public const string PsmflName = "PsmflName";
		public const string XevmpdCode = "XevmpdCode";
		public const string Building = "Building";
		public const string Street = "Street";
		public const string City = "City";
		public const string State = "State";
		public const string PostalCode = "PostalCode";
		public const string CountryCode = "CountryCode";
		public const string Iterations = "Iterations";
		public const string IsOpen = "IsOpen";
		public const string TwoLettersCode = "TwoLettersCode";
		public const string CountryName = "CountryName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PHV_EMAILS")]
	public partial class PhvEmail
	{
		private Decimal _phvEmailId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "PHV_EMAIL_ID", ColumnName ="PHV_EMAIL_ID", BaseColumnName ="PHV_EMAIL_ID", BaseTableName = "PHV_EMAILS" )]		public Decimal PhvEmailId 
		{ 
		    get { return _phvEmailId; } 
			set 
			{
			    _phvEmailId = value;
			}
        }

		private String _email;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="EMAIL", BaseColumnName ="EMAIL", BaseTableName = "PHV_EMAILS" )]		public String Email 
		{ 
		    get { return _email; } 
			set 
			{
			    _email = value;
			}
        }


	}

	public partial class PhvEmailRepository : Repository<PhvEmail> 
	{
		public PhvEmailRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public PhvEmail Get(string projectionName, System.Decimal phvEmailId)
		{
			return ((IRepository<PhvEmail>)this).Get(projectionName, phvEmailId, FetchMode.UseIdentityMap);
		}

		public PhvEmail Get(string projectionName, System.Decimal phvEmailId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PhvEmail>)this).Get(projectionName, phvEmailId, fetchMode);
		}

		public PhvEmail Get(Projection projection, System.Decimal phvEmailId)
		{
			return ((IRepository<PhvEmail>)this).Get(projection, phvEmailId, FetchMode.UseIdentityMap);
		}

		public PhvEmail Get(Projection projection, System.Decimal phvEmailId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PhvEmail>)this).Get(projection, phvEmailId, fetchMode);
		}

		public PhvEmail Get(string projectionName, System.Decimal phvEmailId, params string[] fields)
		{
			return ((IRepository<PhvEmail>)this).Get(projectionName, phvEmailId, fields);
		}

		public PhvEmail Get(Projection projection, System.Decimal phvEmailId, params string[] fields)
		{
			return ((IRepository<PhvEmail>)this).Get(projection, phvEmailId, fields);
		}

		public bool Delete(System.Decimal phvEmailId)
		{
			var entity = new PhvEmail { PhvEmailId = phvEmailId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PhvEmailFields
	{
		public const string PhvEmailId = "PhvEmailId";
		public const string Email = "Email";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="PHV_PHONES")]
	public partial class PhvPhone
	{
		private Decimal _phvPhoneId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "PHV_PHONE_ID", ColumnName ="PHV_PHONE_ID", BaseColumnName ="PHV_PHONE_ID", BaseTableName = "PHV_PHONES" )]		public Decimal PhvPhoneId 
		{ 
		    get { return _phvPhoneId; } 
			set 
			{
			    _phvPhoneId = value;
			}
        }

		private String _phoneNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PHONE_NUMBER", BaseColumnName ="PHONE_NUMBER", BaseTableName = "PHV_PHONES" )]		public String PhoneNumber 
		{ 
		    get { return _phoneNumber; } 
			set 
			{
			    _phoneNumber = value;
			}
        }


	}

	public partial class PhvPhoneRepository : Repository<PhvPhone> 
	{
		public PhvPhoneRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public PhvPhone Get(string projectionName, System.Decimal phvPhoneId)
		{
			return ((IRepository<PhvPhone>)this).Get(projectionName, phvPhoneId, FetchMode.UseIdentityMap);
		}

		public PhvPhone Get(string projectionName, System.Decimal phvPhoneId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PhvPhone>)this).Get(projectionName, phvPhoneId, fetchMode);
		}

		public PhvPhone Get(Projection projection, System.Decimal phvPhoneId)
		{
			return ((IRepository<PhvPhone>)this).Get(projection, phvPhoneId, FetchMode.UseIdentityMap);
		}

		public PhvPhone Get(Projection projection, System.Decimal phvPhoneId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<PhvPhone>)this).Get(projection, phvPhoneId, fetchMode);
		}

		public PhvPhone Get(string projectionName, System.Decimal phvPhoneId, params string[] fields)
		{
			return ((IRepository<PhvPhone>)this).Get(projectionName, phvPhoneId, fields);
		}

		public PhvPhone Get(Projection projection, System.Decimal phvPhoneId, params string[] fields)
		{
			return ((IRepository<PhvPhone>)this).Get(projection, phvPhoneId, fields);
		}

		public bool Delete(System.Decimal phvPhoneId)
		{
			var entity = new PhvPhone { PhvPhoneId = phvPhoneId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class PhvPhoneFields
	{
		public const string PhvPhoneId = "PhvPhoneId";
		public const string PhoneNumber = "PhoneNumber";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_STATUSES")]
	public partial class ModificationStatus
	{
		private Decimal _modificationStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="MODIFICATION_STATUS_ID", BaseColumnName ="MODIFICATION_STATUS_ID", BaseTableName = "MODIFICATION_STATUSES" )]		public Decimal ModificationStatusId 
		{ 
		    get { return _modificationStatusId; } 
			set 
			{
			    _modificationStatusId = value;
			}
        }

		private String _modificationStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATION_STATUS_NAME", BaseColumnName ="MODIFICATION_STATUS_NAME", BaseTableName = "MODIFICATION_STATUSES" )]		public String ModificationStatusName 
		{ 
		    get { return _modificationStatusName; } 
			set 
			{
			    _modificationStatusName = value;
			}
        }


	}

	public partial class ModificationStatusRepository : Repository<ModificationStatus> 
	{
		public ModificationStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationStatus Get(string projectionName, System.Decimal modificationStatusId)
		{
			return ((IRepository<ModificationStatus>)this).Get(projectionName, modificationStatusId, FetchMode.UseIdentityMap);
		}

		public ModificationStatus Get(string projectionName, System.Decimal modificationStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationStatus>)this).Get(projectionName, modificationStatusId, fetchMode);
		}

		public ModificationStatus Get(Projection projection, System.Decimal modificationStatusId)
		{
			return ((IRepository<ModificationStatus>)this).Get(projection, modificationStatusId, FetchMode.UseIdentityMap);
		}

		public ModificationStatus Get(Projection projection, System.Decimal modificationStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationStatus>)this).Get(projection, modificationStatusId, fetchMode);
		}

		public ModificationStatus Get(string projectionName, System.Decimal modificationStatusId, params string[] fields)
		{
			return ((IRepository<ModificationStatus>)this).Get(projectionName, modificationStatusId, fields);
		}

		public ModificationStatus Get(Projection projection, System.Decimal modificationStatusId, params string[] fields)
		{
			return ((IRepository<ModificationStatus>)this).Get(projection, modificationStatusId, fields);
		}

		public bool Delete(System.Decimal modificationStatusId)
		{
			var entity = new ModificationStatus { ModificationStatusId = modificationStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationStatusFields
	{
		public const string ModificationStatusId = "ModificationStatusId";
		public const string ModificationStatusName = "ModificationStatusName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DEFICIENCY_DATE_TYPES")]
	public partial class DeficiencyDateType
	{
		private Decimal _deficiencyDateTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="DEFICIENCY_DATE_TYPE_ID", BaseColumnName ="DEFICIENCY_DATE_TYPE_ID", BaseTableName = "DEFICIENCY_DATE_TYPES" )]		public Decimal DeficiencyDateTypeId 
		{ 
		    get { return _deficiencyDateTypeId; } 
			set 
			{
			    _deficiencyDateTypeId = value;
			}
        }

		private String _dateName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="DATE_NAME", BaseColumnName ="DATE_NAME", BaseTableName = "DEFICIENCY_DATE_TYPES" )]		public String DateName 
		{ 
		    get { return _dateName; } 
			set 
			{
			    _dateName = value;
			}
        }


	}

	public partial class DeficiencyDateTypeRepository : Repository<DeficiencyDateType> 
	{
		public DeficiencyDateTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DeficiencyDateType Get(string projectionName, System.Decimal deficiencyDateTypeId)
		{
			return ((IRepository<DeficiencyDateType>)this).Get(projectionName, deficiencyDateTypeId, FetchMode.UseIdentityMap);
		}

		public DeficiencyDateType Get(string projectionName, System.Decimal deficiencyDateTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DeficiencyDateType>)this).Get(projectionName, deficiencyDateTypeId, fetchMode);
		}

		public DeficiencyDateType Get(Projection projection, System.Decimal deficiencyDateTypeId)
		{
			return ((IRepository<DeficiencyDateType>)this).Get(projection, deficiencyDateTypeId, FetchMode.UseIdentityMap);
		}

		public DeficiencyDateType Get(Projection projection, System.Decimal deficiencyDateTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DeficiencyDateType>)this).Get(projection, deficiencyDateTypeId, fetchMode);
		}

		public DeficiencyDateType Get(string projectionName, System.Decimal deficiencyDateTypeId, params string[] fields)
		{
			return ((IRepository<DeficiencyDateType>)this).Get(projectionName, deficiencyDateTypeId, fields);
		}

		public DeficiencyDateType Get(Projection projection, System.Decimal deficiencyDateTypeId, params string[] fields)
		{
			return ((IRepository<DeficiencyDateType>)this).Get(projection, deficiencyDateTypeId, fields);
		}

		public bool Delete(System.Decimal deficiencyDateTypeId)
		{
			var entity = new DeficiencyDateType { DeficiencyDateTypeId = deficiencyDateTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DeficiencyDateTypeFields
	{
		public const string DeficiencyDateTypeId = "DeficiencyDateTypeId";
		public const string DateName = "DateName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_DEFICIENCIES")]
	public partial class ModificationDeficiency
	{
		private Decimal _modificationDeficiencyId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_DEFICIENCY_ID", ColumnName ="MODIFICATION_DEFICIENCY_ID", BaseColumnName ="MODIFICATION_DEFICIENCY_ID", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public Decimal ModificationDeficiencyId 
		{ 
		    get { return _modificationDeficiencyId; } 
			set 
			{
			    _modificationDeficiencyId = value;
			}
        }

		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID", BaseColumnName ="MODIFICATION_ID", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private Decimal _deficiencyDateTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DEFICIENCY_DATE_TYPE_ID", BaseColumnName ="DEFICIENCY_DATE_TYPE_ID", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public Decimal DeficiencyDateTypeId 
		{ 
		    get { return _deficiencyDateTypeId; } 
			set 
			{
			    _deficiencyDateTypeId = value;
			}
        }

		private DateTime _deficiencyDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="DEFICIENCY_DATE", BaseColumnName ="DEFICIENCY_DATE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime DeficiencyDate 
		{ 
		    get { return _deficiencyDate; } 
			set 
			{
			    _deficiencyDate = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS", BaseColumnName ="COMMENTS", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_ID", BaseColumnName ="DOSSIER_ID", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public Decimal? DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private DateTime? _receptionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RECEPTION_DATE", BaseColumnName ="RECEPTION_DATE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ReceptionDate 
		{ 
		    get { return _receptionDate; } 
			set 
			{
			    _receptionDate = value;
			}
        }

		private DateTime? _deadlineDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DEADLINE_DATE", BaseColumnName ="DEADLINE_DATE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? DeadlineDate 
		{ 
		    get { return _deadlineDate; } 
			set 
			{
			    _deadlineDate = value;
			}
        }

		private DateTime? _responsesDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RESPONSES_DATE", BaseColumnName ="RESPONSES_DATE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ResponsesDate 
		{ 
		    get { return _responsesDate; } 
			set 
			{
			    _responsesDate = value;
			}
        }

		private DateTime? _expectedDay15;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DAY15", BaseColumnName ="EXPECTED_DAY15", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ExpectedDay15 
		{ 
		    get { return _expectedDay15; } 
			set 
			{
			    _expectedDay15 = value;
			}
        }

		private DateTime? _day15;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DAY15", BaseColumnName ="DAY15", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? Day15 
		{ 
		    get { return _day15; } 
			set 
			{
			    _day15 = value;
			}
        }

		private DateTime? _expectedDay20;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DAY20", BaseColumnName ="EXPECTED_DAY20", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ExpectedDay20 
		{ 
		    get { return _expectedDay20; } 
			set 
			{
			    _expectedDay20 = value;
			}
        }

		private DateTime? _day20;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DAY20", BaseColumnName ="DAY20", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? Day20 
		{ 
		    get { return _day20; } 
			set 
			{
			    _day20 = value;
			}
        }

		private DateTime? _expectedDay40;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DAY40", BaseColumnName ="EXPECTED_DAY40", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ExpectedDay40 
		{ 
		    get { return _expectedDay40; } 
			set 
			{
			    _expectedDay40 = value;
			}
        }

		private DateTime? _day40;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DAY40", BaseColumnName ="DAY40", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? Day40 
		{ 
		    get { return _day40; } 
			set 
			{
			    _day40 = value;
			}
        }

		private DateTime? _expectedDay55;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DAY55", BaseColumnName ="EXPECTED_DAY55", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ExpectedDay55 
		{ 
		    get { return _expectedDay55; } 
			set 
			{
			    _expectedDay55 = value;
			}
        }

		private DateTime? _day55;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DAY55", BaseColumnName ="DAY55", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? Day55 
		{ 
		    get { return _day55; } 
			set 
			{
			    _day55 = value;
			}
        }

		private DateTime? _expectedDay70;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DAY70", BaseColumnName ="EXPECTED_DAY70", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ExpectedDay70 
		{ 
		    get { return _expectedDay70; } 
			set 
			{
			    _expectedDay70 = value;
			}
        }

		private DateTime? _day70;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DAY70", BaseColumnName ="DAY70", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? Day70 
		{ 
		    get { return _day70; } 
			set 
			{
			    _day70 = value;
			}
        }

		private DateTime? _expectedDay85;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DAY85", BaseColumnName ="EXPECTED_DAY85", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ExpectedDay85 
		{ 
		    get { return _expectedDay85; } 
			set 
			{
			    _expectedDay85 = value;
			}
        }

		private DateTime? _day85;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DAY85", BaseColumnName ="DAY85", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? Day85 
		{ 
		    get { return _day85; } 
			set 
			{
			    _day85 = value;
			}
        }

		private DateTime? _renewalReceivedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_RECEIVED_DATE", BaseColumnName ="RENEWAL_RECEIVED_DATE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? RenewalReceivedDate 
		{ 
		    get { return _renewalReceivedDate; } 
			set 
			{
			    _renewalReceivedDate = value;
			}
        }

		private DateTime? _renewalDispatchClient;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_DISPATCH_CLIENT", BaseColumnName ="RENEWAL_DISPATCH_CLIENT", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? RenewalDispatchClient 
		{ 
		    get { return _renewalDispatchClient; } 
			set 
			{
			    _renewalDispatchClient = value;
			}
        }

		private DateTime? _renewalResponseDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_RESPONSE_DATE", BaseColumnName ="RENEWAL_RESPONSE_DATE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? RenewalResponseDate 
		{ 
		    get { return _renewalResponseDate; } 
			set 
			{
			    _renewalResponseDate = value;
			}
        }

		private String _isNaDeficiency;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DEFICIENCY", BaseColumnName ="IS_NA_DEFICIENCY", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaDeficiency 
		{ 
		    get { return _isNaDeficiency; } 
			set 
			{
			    _isNaDeficiency = value;
			}
        }

		private String _isNaReception;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RECEPTION", BaseColumnName ="IS_NA_RECEPTION", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaReception 
		{ 
		    get { return _isNaReception; } 
			set 
			{
			    _isNaReception = value;
			}
        }

		private String _isNaDeadline;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DEADLINE", BaseColumnName ="IS_NA_DEADLINE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaDeadline 
		{ 
		    get { return _isNaDeadline; } 
			set 
			{
			    _isNaDeadline = value;
			}
        }

		private String _isNaResponses;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RESPONSES", BaseColumnName ="IS_NA_RESPONSES", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaResponses 
		{ 
		    get { return _isNaResponses; } 
			set 
			{
			    _isNaResponses = value;
			}
        }

		private String _isNaExpectedDay15;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DAY15", BaseColumnName ="IS_NA_EXPECTED_DAY15", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaExpectedDay15 
		{ 
		    get { return _isNaExpectedDay15; } 
			set 
			{
			    _isNaExpectedDay15 = value;
			}
        }

		private String _isNaDay15;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DAY15", BaseColumnName ="IS_NA_DAY15", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaDay15 
		{ 
		    get { return _isNaDay15; } 
			set 
			{
			    _isNaDay15 = value;
			}
        }

		private String _isNaExpectedDay20;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DAY20", BaseColumnName ="IS_NA_EXPECTED_DAY20", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaExpectedDay20 
		{ 
		    get { return _isNaExpectedDay20; } 
			set 
			{
			    _isNaExpectedDay20 = value;
			}
        }

		private String _isNaDay20;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DAY20", BaseColumnName ="IS_NA_DAY20", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaDay20 
		{ 
		    get { return _isNaDay20; } 
			set 
			{
			    _isNaDay20 = value;
			}
        }

		private String _isNaExpectedDay40;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DAY40", BaseColumnName ="IS_NA_EXPECTED_DAY40", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaExpectedDay40 
		{ 
		    get { return _isNaExpectedDay40; } 
			set 
			{
			    _isNaExpectedDay40 = value;
			}
        }

		private String _isNaDay40;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DAY40", BaseColumnName ="IS_NA_DAY40", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaDay40 
		{ 
		    get { return _isNaDay40; } 
			set 
			{
			    _isNaDay40 = value;
			}
        }

		private String _isNaExpectedDay55;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DAY55", BaseColumnName ="IS_NA_EXPECTED_DAY55", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaExpectedDay55 
		{ 
		    get { return _isNaExpectedDay55; } 
			set 
			{
			    _isNaExpectedDay55 = value;
			}
        }

		private String _isNaDay55;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DAY55", BaseColumnName ="IS_NA_DAY55", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaDay55 
		{ 
		    get { return _isNaDay55; } 
			set 
			{
			    _isNaDay55 = value;
			}
        }

		private String _isNaExpectedDay70;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DAY70", BaseColumnName ="IS_NA_EXPECTED_DAY70", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaExpectedDay70 
		{ 
		    get { return _isNaExpectedDay70; } 
			set 
			{
			    _isNaExpectedDay70 = value;
			}
        }

		private String _isNaDay70;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DAY70", BaseColumnName ="IS_NA_DAY70", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaDay70 
		{ 
		    get { return _isNaDay70; } 
			set 
			{
			    _isNaDay70 = value;
			}
        }

		private String _isNaExpectedDay85;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DAY85", BaseColumnName ="IS_NA_EXPECTED_DAY85", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaExpectedDay85 
		{ 
		    get { return _isNaExpectedDay85; } 
			set 
			{
			    _isNaExpectedDay85 = value;
			}
        }

		private String _isNaDay85;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DAY85", BaseColumnName ="IS_NA_DAY85", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaDay85 
		{ 
		    get { return _isNaDay85; } 
			set 
			{
			    _isNaDay85 = value;
			}
        }

		private String _isNaRenewalReceived;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RENEWAL_RECEIVED", BaseColumnName ="IS_NA_RENEWAL_RECEIVED", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaRenewalReceived 
		{ 
		    get { return _isNaRenewalReceived; } 
			set 
			{
			    _isNaRenewalReceived = value;
			}
        }

		private String _isNaRenewalDispatch;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RENEWAL_DISPATCH", BaseColumnName ="IS_NA_RENEWAL_DISPATCH", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaRenewalDispatch 
		{ 
		    get { return _isNaRenewalDispatch; } 
			set 
			{
			    _isNaRenewalDispatch = value;
			}
        }

		private String _isNaRenewalResponse;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RENEWAL_RESPONSE", BaseColumnName ="IS_NA_RENEWAL_RESPONSE", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaRenewalResponse 
		{ 
		    get { return _isNaRenewalResponse; } 
			set 
			{
			    _isNaRenewalResponse = value;
			}
        }

		private String _deficiencyTypeText;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DEFICIENCY_TYPE_TEXT", BaseColumnName ="DEFICIENCY_TYPE_TEXT", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String DeficiencyTypeText 
		{ 
		    get { return _deficiencyTypeText; } 
			set 
			{
			    _deficiencyTypeText = value;
			}
        }

		private Decimal? _modificationSubmissionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFICATION_SUBMISSION_ID", BaseColumnName ="MODIFICATION_SUBMISSION_ID", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public Decimal? ModificationSubmissionId 
		{ 
		    get { return _modificationSubmissionId; } 
			set 
			{
			    _modificationSubmissionId = value;
			}
        }

		private DateTime? _expectedDay59;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DAY59", BaseColumnName ="EXPECTED_DAY59", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? ExpectedDay59 
		{ 
		    get { return _expectedDay59; } 
			set 
			{
			    _expectedDay59 = value;
			}
        }

		private DateTime? _day59;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DAY59", BaseColumnName ="DAY59", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public DateTime? Day59 
		{ 
		    get { return _day59; } 
			set 
			{
			    _day59 = value;
			}
        }

		private String _isNaExpectedDay59;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DAY59", BaseColumnName ="IS_NA_EXPECTED_DAY59", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaExpectedDay59 
		{ 
		    get { return _isNaExpectedDay59; } 
			set 
			{
			    _isNaExpectedDay59 = value;
			}
        }

		private String _isNaDay59;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DAY59", BaseColumnName ="IS_NA_DAY59", BaseTableName = "MODIFICATION_DEFICIENCIES" )]		public String IsNaDay59 
		{ 
		    get { return _isNaDay59; } 
			set 
			{
			    _isNaDay59 = value;
			}
        }

		private String _dateName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="DATE_NAME" )]		public String DateName 
		{ 
		    get { return _dateName; } 
			set 
			{
			    _dateName = value;
			}
        }


	}

	public partial class ModificationDeficiencyRepository : Repository<ModificationDeficiency> 
	{
		public ModificationDeficiencyRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationDeficiency Get(string projectionName, System.Decimal modificationDeficiencyId)
		{
			return ((IRepository<ModificationDeficiency>)this).Get(projectionName, modificationDeficiencyId, FetchMode.UseIdentityMap);
		}

		public ModificationDeficiency Get(string projectionName, System.Decimal modificationDeficiencyId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationDeficiency>)this).Get(projectionName, modificationDeficiencyId, fetchMode);
		}

		public ModificationDeficiency Get(Projection projection, System.Decimal modificationDeficiencyId)
		{
			return ((IRepository<ModificationDeficiency>)this).Get(projection, modificationDeficiencyId, FetchMode.UseIdentityMap);
		}

		public ModificationDeficiency Get(Projection projection, System.Decimal modificationDeficiencyId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationDeficiency>)this).Get(projection, modificationDeficiencyId, fetchMode);
		}

		public ModificationDeficiency Get(string projectionName, System.Decimal modificationDeficiencyId, params string[] fields)
		{
			return ((IRepository<ModificationDeficiency>)this).Get(projectionName, modificationDeficiencyId, fields);
		}

		public ModificationDeficiency Get(Projection projection, System.Decimal modificationDeficiencyId, params string[] fields)
		{
			return ((IRepository<ModificationDeficiency>)this).Get(projection, modificationDeficiencyId, fields);
		}

		public bool Delete(System.Decimal modificationDeficiencyId)
		{
			var entity = new ModificationDeficiency { ModificationDeficiencyId = modificationDeficiencyId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationDeficiencyFields
	{
		public const string ModificationDeficiencyId = "ModificationDeficiencyId";
		public const string ModificationId = "ModificationId";
		public const string DeficiencyDateTypeId = "DeficiencyDateTypeId";
		public const string DeficiencyDate = "DeficiencyDate";
		public const string Comments = "Comments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierId = "DossierId";
		public const string ReceptionDate = "ReceptionDate";
		public const string DeadlineDate = "DeadlineDate";
		public const string ResponsesDate = "ResponsesDate";
		public const string ExpectedDay15 = "ExpectedDay15";
		public const string Day15 = "Day15";
		public const string ExpectedDay20 = "ExpectedDay20";
		public const string Day20 = "Day20";
		public const string ExpectedDay40 = "ExpectedDay40";
		public const string Day40 = "Day40";
		public const string ExpectedDay55 = "ExpectedDay55";
		public const string Day55 = "Day55";
		public const string ExpectedDay70 = "ExpectedDay70";
		public const string Day70 = "Day70";
		public const string ExpectedDay85 = "ExpectedDay85";
		public const string Day85 = "Day85";
		public const string RenewalReceivedDate = "RenewalReceivedDate";
		public const string RenewalDispatchClient = "RenewalDispatchClient";
		public const string RenewalResponseDate = "RenewalResponseDate";
		public const string IsNaDeficiency = "IsNaDeficiency";
		public const string IsNaReception = "IsNaReception";
		public const string IsNaDeadline = "IsNaDeadline";
		public const string IsNaResponses = "IsNaResponses";
		public const string IsNaExpectedDay15 = "IsNaExpectedDay15";
		public const string IsNaDay15 = "IsNaDay15";
		public const string IsNaExpectedDay20 = "IsNaExpectedDay20";
		public const string IsNaDay20 = "IsNaDay20";
		public const string IsNaExpectedDay40 = "IsNaExpectedDay40";
		public const string IsNaDay40 = "IsNaDay40";
		public const string IsNaExpectedDay55 = "IsNaExpectedDay55";
		public const string IsNaDay55 = "IsNaDay55";
		public const string IsNaExpectedDay70 = "IsNaExpectedDay70";
		public const string IsNaDay70 = "IsNaDay70";
		public const string IsNaExpectedDay85 = "IsNaExpectedDay85";
		public const string IsNaDay85 = "IsNaDay85";
		public const string IsNaRenewalReceived = "IsNaRenewalReceived";
		public const string IsNaRenewalDispatch = "IsNaRenewalDispatch";
		public const string IsNaRenewalResponse = "IsNaRenewalResponse";
		public const string DeficiencyTypeText = "DeficiencyTypeText";
		public const string ModificationSubmissionId = "ModificationSubmissionId";
		public const string ExpectedDay59 = "ExpectedDay59";
		public const string Day59 = "Day59";
		public const string IsNaExpectedDay59 = "IsNaExpectedDay59";
		public const string IsNaDay59 = "IsNaDay59";
		public const string DateName = "DateName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_CODES")]
	public partial class ModificationCode
	{
		private Decimal _modificationCodeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_CODE_ID", ColumnName ="MODIFICATION_CODE_ID", BaseColumnName ="MODIFICATION_CODE_ID", BaseTableName = "MODIFICATION_CODES" )]		public Decimal ModificationCodeId 
		{ 
		    get { return _modificationCodeId; } 
			set 
			{
			    _modificationCodeId = value;
			}
        }

		private String _code;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CODE", BaseColumnName ="CODE", BaseTableName = "MODIFICATION_CODES" )]		public String Code 
		{ 
		    get { return _code; } 
			set 
			{
			    _code = value;
			}
        }

		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID", BaseColumnName ="MODIFICATION_ID", BaseTableName = "MODIFICATION_CODES" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_CODES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_CODES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_CODES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_CODES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class ModificationCodeRepository : Repository<ModificationCode> 
	{
		public ModificationCodeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationCode Get(string projectionName, System.Decimal modificationCodeId)
		{
			return ((IRepository<ModificationCode>)this).Get(projectionName, modificationCodeId, FetchMode.UseIdentityMap);
		}

		public ModificationCode Get(string projectionName, System.Decimal modificationCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCode>)this).Get(projectionName, modificationCodeId, fetchMode);
		}

		public ModificationCode Get(Projection projection, System.Decimal modificationCodeId)
		{
			return ((IRepository<ModificationCode>)this).Get(projection, modificationCodeId, FetchMode.UseIdentityMap);
		}

		public ModificationCode Get(Projection projection, System.Decimal modificationCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCode>)this).Get(projection, modificationCodeId, fetchMode);
		}

		public ModificationCode Get(string projectionName, System.Decimal modificationCodeId, params string[] fields)
		{
			return ((IRepository<ModificationCode>)this).Get(projectionName, modificationCodeId, fields);
		}

		public ModificationCode Get(Projection projection, System.Decimal modificationCodeId, params string[] fields)
		{
			return ((IRepository<ModificationCode>)this).Get(projection, modificationCodeId, fields);
		}

		public bool Delete(System.Decimal modificationCodeId)
		{
			var entity = new ModificationCode { ModificationCodeId = modificationCodeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationCodeFields
	{
		public const string ModificationCodeId = "ModificationCodeId";
		public const string Code = "Code";
		public const string ModificationId = "ModificationId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_CODE_RESPS")]
	public partial class ModificationCodeResp
	{
		private Decimal _modificationCodeRespId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_CODE_RESP_ID", ColumnName ="MODIFICATION_CODE_RESP_ID", BaseColumnName ="MODIFICATION_CODE_RESP_ID", BaseTableName = "MODIFICATION_CODE_RESPS" )]		public Decimal ModificationCodeRespId 
		{ 
		    get { return _modificationCodeRespId; } 
			set 
			{
			    _modificationCodeRespId = value;
			}
        }

		private Decimal _groupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="GROUP_ID", BaseColumnName ="GROUP_ID", BaseTableName = "MODIFICATION_CODE_RESPS" )]		public Decimal GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private Decimal? _responsibleId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="RESPONSIBLE_ID", BaseColumnName ="RESPONSIBLE_ID", BaseTableName = "MODIFICATION_CODE_RESPS" )]		public Decimal? ResponsibleId 
		{ 
		    get { return _responsibleId; } 
			set 
			{
			    _responsibleId = value;
			}
        }

		private Decimal _modificationCodeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_CODE_ID", BaseColumnName ="MODIFICATION_CODE_ID", BaseTableName = "MODIFICATION_CODE_RESPS" )]		public Decimal ModificationCodeId 
		{ 
		    get { return _modificationCodeId; } 
			set 
			{
			    _modificationCodeId = value;
			}
        }

		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private String _groupName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUP_NAME" )]		public String GroupName 
		{ 
		    get { return _groupName; } 
			set 
			{
			    _groupName = value;
			}
        }

		private String _userName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="USER_NAME" )]		public String UserName 
		{ 
		    get { return _userName; } 
			set 
			{
			    _userName = value;
			}
        }


	}

	public partial class ModificationCodeRespRepository : Repository<ModificationCodeResp> 
	{
		public ModificationCodeRespRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationCodeResp Get(string projectionName, System.Decimal modificationCodeRespId)
		{
			return ((IRepository<ModificationCodeResp>)this).Get(projectionName, modificationCodeRespId, FetchMode.UseIdentityMap);
		}

		public ModificationCodeResp Get(string projectionName, System.Decimal modificationCodeRespId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCodeResp>)this).Get(projectionName, modificationCodeRespId, fetchMode);
		}

		public ModificationCodeResp Get(Projection projection, System.Decimal modificationCodeRespId)
		{
			return ((IRepository<ModificationCodeResp>)this).Get(projection, modificationCodeRespId, FetchMode.UseIdentityMap);
		}

		public ModificationCodeResp Get(Projection projection, System.Decimal modificationCodeRespId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCodeResp>)this).Get(projection, modificationCodeRespId, fetchMode);
		}

		public ModificationCodeResp Get(string projectionName, System.Decimal modificationCodeRespId, params string[] fields)
		{
			return ((IRepository<ModificationCodeResp>)this).Get(projectionName, modificationCodeRespId, fields);
		}

		public ModificationCodeResp Get(Projection projection, System.Decimal modificationCodeRespId, params string[] fields)
		{
			return ((IRepository<ModificationCodeResp>)this).Get(projection, modificationCodeRespId, fields);
		}

		public bool Delete(System.Decimal modificationCodeRespId)
		{
			var entity = new ModificationCodeResp { ModificationCodeRespId = modificationCodeRespId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationCodeRespFields
	{
		public const string ModificationCodeRespId = "ModificationCodeRespId";
		public const string GroupId = "GroupId";
		public const string ResponsibleId = "ResponsibleId";
		public const string ModificationCodeId = "ModificationCodeId";
		public const string ModificationId = "ModificationId";
		public const string GroupName = "GroupName";
		public const string UserName = "UserName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_DOSSIERS_APP")]
	public partial class ModificationDossierApp
	{
		private Decimal _modificationDossierAppId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_DOSSIER_APP_ID", ColumnName ="MODIFICATION_DOSSIER_APP_ID", BaseColumnName ="MODIFICATION_DOSSIER_APP_ID", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public Decimal ModificationDossierAppId 
		{ 
		    get { return _modificationDossierAppId; } 
			set 
			{
			    _modificationDossierAppId = value;
			}
        }

		private Decimal _modificationApplicationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_APPLICATION_ID", BaseColumnName ="MODIFICATION_APPLICATION_ID", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public Decimal ModificationApplicationId 
		{ 
		    get { return _modificationApplicationId; } 
			set 
			{
			    _modificationApplicationId = value;
			}
        }

		private Decimal _mpDossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MP_DOSSIER_ID", BaseColumnName ="MP_DOSSIER_ID", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public Decimal MpDossierId 
		{ 
		    get { return _mpDossierId; } 
			set 
			{
			    _mpDossierId = value;
			}
        }

		private String _procedureNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PROCEDURE_NUMBER", BaseColumnName ="PROCEDURE_NUMBER", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String ProcedureNumber 
		{ 
		    get { return _procedureNumber; } 
			set 
			{
			    _procedureNumber = value;
			}
        }

		private DateTime? _clientDispatchDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLIENT_DISPATCH_DATE", BaseColumnName ="CLIENT_DISPATCH_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? ClientDispatchDate 
		{ 
		    get { return _clientDispatchDate; } 
			set 
			{
			    _clientDispatchDate = value;
			}
        }

		private DateTime? _expectedSubmissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_SUBMISSION_DATE", BaseColumnName ="EXPECTED_SUBMISSION_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? ExpectedSubmissionDate 
		{ 
		    get { return _expectedSubmissionDate; } 
			set 
			{
			    _expectedSubmissionDate = value;
			}
        }

		private DateTime? _submissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DATE", BaseColumnName ="SUBMISSION_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? SubmissionDate 
		{ 
		    get { return _submissionDate; } 
			set 
			{
			    _submissionDate = value;
			}
        }

		private DateTime? _uploadSpanishPortalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="UPLOAD_SPANISH_PORTAL_DATE", BaseColumnName ="UPLOAD_SPANISH_PORTAL_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? UploadSpanishPortalDate 
		{ 
		    get { return _uploadSpanishPortalDate; } 
			set 
			{
			    _uploadSpanishPortalDate = value;
			}
        }

		private DateTime? _validationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VALIDATION_DATE", BaseColumnName ="VALIDATION_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? ValidationDate 
		{ 
		    get { return _validationDate; } 
			set 
			{
			    _validationDate = value;
			}
        }

		private DateTime? _expectedDispatchClientDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXPECTED_DISPATCH_CLIENT_DATE", BaseColumnName ="EXPECTED_DISPATCH_CLIENT_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? ExpectedDispatchClientDate 
		{ 
		    get { return _expectedDispatchClientDate; } 
			set 
			{
			    _expectedDispatchClientDate = value;
			}
        }

		private DateTime? _raefarInclusionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RAEFAR_INCLUSION_DATE", BaseColumnName ="RAEFAR_INCLUSION_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? RaefarInclusionDate 
		{ 
		    get { return _raefarInclusionDate; } 
			set 
			{
			    _raefarInclusionDate = value;
			}
        }

		private DateTime? _finalOpinionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FINAL_OPINION_DATE", BaseColumnName ="FINAL_OPINION_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? FinalOpinionDate 
		{ 
		    get { return _finalOpinionDate; } 
			set 
			{
			    _finalOpinionDate = value;
			}
        }

		private DateTime? _renewalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="RENEWAL_DATE", BaseColumnName ="RENEWAL_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? RenewalDate 
		{ 
		    get { return _renewalDate; } 
			set 
			{
			    _renewalDate = value;
			}
        }

		private DateTime? _clientInformedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLIENT_INFORMED_DATE", BaseColumnName ="CLIENT_INFORMED_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? ClientInformedDate 
		{ 
		    get { return _clientInformedDate; } 
			set 
			{
			    _clientInformedDate = value;
			}
        }

		private String _isApplicationSubmitted;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_APPLICATION_SUBMITTED", BaseColumnName ="IS_APPLICATION_SUBMITTED", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsApplicationSubmitted 
		{ 
		    get { return _isApplicationSubmitted; } 
			set 
			{
			    _isApplicationSubmitted = value;
			}
        }

		private DateTime? _d0ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D0_EXPECTED_DATE", BaseColumnName ="D0_EXPECTED_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D0ExpectedDate 
		{ 
		    get { return _d0ExpectedDate; } 
			set 
			{
			    _d0ExpectedDate = value;
			}
        }

		private DateTime? _d0RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D0_REAL_DATE", BaseColumnName ="D0_REAL_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D0RealDate 
		{ 
		    get { return _d0RealDate; } 
			set 
			{
			    _d0RealDate = value;
			}
        }

		private DateTime? _d10ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D10_EXPECTED_DATE", BaseColumnName ="D10_EXPECTED_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D10ExpectedDate 
		{ 
		    get { return _d10ExpectedDate; } 
			set 
			{
			    _d10ExpectedDate = value;
			}
        }

		private DateTime? _d10RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D10_REAL_DATE", BaseColumnName ="D10_REAL_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D10RealDate 
		{ 
		    get { return _d10RealDate; } 
			set 
			{
			    _d10RealDate = value;
			}
        }

		private DateTime? _d25ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D25_EXPECTED_DATE", BaseColumnName ="D25_EXPECTED_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D25ExpectedDate 
		{ 
		    get { return _d25ExpectedDate; } 
			set 
			{
			    _d25ExpectedDate = value;
			}
        }

		private DateTime? _d25RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D25_REAL_DATE", BaseColumnName ="D25_REAL_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D25RealDate 
		{ 
		    get { return _d25RealDate; } 
			set 
			{
			    _d25RealDate = value;
			}
        }

		private DateTime? _d35ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D35_EXPECTED_DATE", BaseColumnName ="D35_EXPECTED_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D35ExpectedDate 
		{ 
		    get { return _d35ExpectedDate; } 
			set 
			{
			    _d35ExpectedDate = value;
			}
        }

		private DateTime? _d35RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D35_REAL_DATE", BaseColumnName ="D35_REAL_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D35RealDate 
		{ 
		    get { return _d35RealDate; } 
			set 
			{
			    _d35RealDate = value;
			}
        }

		private DateTime? _d55ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D55_EXPECTED_DATE", BaseColumnName ="D55_EXPECTED_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D55ExpectedDate 
		{ 
		    get { return _d55ExpectedDate; } 
			set 
			{
			    _d55ExpectedDate = value;
			}
        }

		private DateTime? _d55RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D55_REAL_DATE", BaseColumnName ="D55_REAL_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D55RealDate 
		{ 
		    get { return _d55RealDate; } 
			set 
			{
			    _d55RealDate = value;
			}
        }

		private DateTime? _d60ExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D60_EXPECTED_DATE", BaseColumnName ="D60_EXPECTED_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D60ExpectedDate 
		{ 
		    get { return _d60ExpectedDate; } 
			set 
			{
			    _d60ExpectedDate = value;
			}
        }

		private DateTime? _d60RealDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="D60_REAL_DATE", BaseColumnName ="D60_REAL_DATE", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public DateTime? D60RealDate 
		{ 
		    get { return _d60RealDate; } 
			set 
			{
			    _d60RealDate = value;
			}
        }

		private String _isNaExpected0;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED0", BaseColumnName ="IS_NA_EXPECTED0", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaExpected0 
		{ 
		    get { return _isNaExpected0; } 
			set 
			{
			    _isNaExpected0 = value;
			}
        }

		private String _isNaExpected10;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED10", BaseColumnName ="IS_NA_EXPECTED10", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaExpected10 
		{ 
		    get { return _isNaExpected10; } 
			set 
			{
			    _isNaExpected10 = value;
			}
        }

		private String _isNaExpected25;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED25", BaseColumnName ="IS_NA_EXPECTED25", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaExpected25 
		{ 
		    get { return _isNaExpected25; } 
			set 
			{
			    _isNaExpected25 = value;
			}
        }

		private String _isNaExpected35;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED35", BaseColumnName ="IS_NA_EXPECTED35", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaExpected35 
		{ 
		    get { return _isNaExpected35; } 
			set 
			{
			    _isNaExpected35 = value;
			}
        }

		private String _isNaExpected55;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED55", BaseColumnName ="IS_NA_EXPECTED55", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaExpected55 
		{ 
		    get { return _isNaExpected55; } 
			set 
			{
			    _isNaExpected55 = value;
			}
        }

		private String _isNaExpected60;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED60", BaseColumnName ="IS_NA_EXPECTED60", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaExpected60 
		{ 
		    get { return _isNaExpected60; } 
			set 
			{
			    _isNaExpected60 = value;
			}
        }

		private String _isNaReal0;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL0", BaseColumnName ="IS_NA_REAL0", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaReal0 
		{ 
		    get { return _isNaReal0; } 
			set 
			{
			    _isNaReal0 = value;
			}
        }

		private String _isNaReal10;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL10", BaseColumnName ="IS_NA_REAL10", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaReal10 
		{ 
		    get { return _isNaReal10; } 
			set 
			{
			    _isNaReal10 = value;
			}
        }

		private String _isNaReal25;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL25", BaseColumnName ="IS_NA_REAL25", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaReal25 
		{ 
		    get { return _isNaReal25; } 
			set 
			{
			    _isNaReal25 = value;
			}
        }

		private String _isNaReal35;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL35", BaseColumnName ="IS_NA_REAL35", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaReal35 
		{ 
		    get { return _isNaReal35; } 
			set 
			{
			    _isNaReal35 = value;
			}
        }

		private String _isNaReal55;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL55", BaseColumnName ="IS_NA_REAL55", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaReal55 
		{ 
		    get { return _isNaReal55; } 
			set 
			{
			    _isNaReal55 = value;
			}
        }

		private String _isNaReal60;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_REAL60", BaseColumnName ="IS_NA_REAL60", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaReal60 
		{ 
		    get { return _isNaReal60; } 
			set 
			{
			    _isNaReal60 = value;
			}
        }

		private String _isNaClientDispatch;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_CLIENT_DISPATCH", BaseColumnName ="IS_NA_CLIENT_DISPATCH", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaClientDispatch 
		{ 
		    get { return _isNaClientDispatch; } 
			set 
			{
			    _isNaClientDispatch = value;
			}
        }

		private String _isNaExpectedSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_SUBMISSION", BaseColumnName ="IS_NA_EXPECTED_SUBMISSION", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaExpectedSubmission 
		{ 
		    get { return _isNaExpectedSubmission; } 
			set 
			{
			    _isNaExpectedSubmission = value;
			}
        }

		private String _isNaUploadSpanish;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_UPLOAD_SPANISH", BaseColumnName ="IS_NA_UPLOAD_SPANISH", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaUploadSpanish 
		{ 
		    get { return _isNaUploadSpanish; } 
			set 
			{
			    _isNaUploadSpanish = value;
			}
        }

		private String _isNaValidation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_VALIDATION", BaseColumnName ="IS_NA_VALIDATION", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaValidation 
		{ 
		    get { return _isNaValidation; } 
			set 
			{
			    _isNaValidation = value;
			}
        }

		private String _isNaExpectedDispatch;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_EXPECTED_DISPATCH", BaseColumnName ="IS_NA_EXPECTED_DISPATCH", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaExpectedDispatch 
		{ 
		    get { return _isNaExpectedDispatch; } 
			set 
			{
			    _isNaExpectedDispatch = value;
			}
        }

		private String _isNaRaefarInclusion;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RAEFAR_INCLUSION", BaseColumnName ="IS_NA_RAEFAR_INCLUSION", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaRaefarInclusion 
		{ 
		    get { return _isNaRaefarInclusion; } 
			set 
			{
			    _isNaRaefarInclusion = value;
			}
        }

		private String _isNaFinalOpinion;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_FINAL_OPINION", BaseColumnName ="IS_NA_FINAL_OPINION", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaFinalOpinion 
		{ 
		    get { return _isNaFinalOpinion; } 
			set 
			{
			    _isNaFinalOpinion = value;
			}
        }

		private String _isNaRenewal;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_RENEWAL", BaseColumnName ="IS_NA_RENEWAL", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaRenewal 
		{ 
		    get { return _isNaRenewal; } 
			set 
			{
			    _isNaRenewal = value;
			}
        }

		private String _isNaClientInformed;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_CLIENT_INFORMED", BaseColumnName ="IS_NA_CLIENT_INFORMED", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaClientInformed 
		{ 
		    get { return _isNaClientInformed; } 
			set 
			{
			    _isNaClientInformed = value;
			}
        }

		private String _isNaSubmission;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_SUBMISSION", BaseColumnName ="IS_NA_SUBMISSION", BaseTableName = "MODIFICATION_DOSSIERS_APP" )]		public String IsNaSubmission 
		{ 
		    get { return _isNaSubmission; } 
			set 
			{
			    _isNaSubmission = value;
			}
        }

		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal _mktAuthProdedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MKT_AUTH_PRODEDURE_ID" )]		public Decimal MktAuthProdedureId 
		{ 
		    get { return _mktAuthProdedureId; } 
			set 
			{
			    _mktAuthProdedureId = value;
			}
        }


	}

	public partial class ModificationDossierAppRepository : Repository<ModificationDossierApp> 
	{
		public ModificationDossierAppRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationDossierApp Get(string projectionName, System.Decimal modificationDossierAppId)
		{
			return ((IRepository<ModificationDossierApp>)this).Get(projectionName, modificationDossierAppId, FetchMode.UseIdentityMap);
		}

		public ModificationDossierApp Get(string projectionName, System.Decimal modificationDossierAppId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationDossierApp>)this).Get(projectionName, modificationDossierAppId, fetchMode);
		}

		public ModificationDossierApp Get(Projection projection, System.Decimal modificationDossierAppId)
		{
			return ((IRepository<ModificationDossierApp>)this).Get(projection, modificationDossierAppId, FetchMode.UseIdentityMap);
		}

		public ModificationDossierApp Get(Projection projection, System.Decimal modificationDossierAppId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationDossierApp>)this).Get(projection, modificationDossierAppId, fetchMode);
		}

		public ModificationDossierApp Get(string projectionName, System.Decimal modificationDossierAppId, params string[] fields)
		{
			return ((IRepository<ModificationDossierApp>)this).Get(projectionName, modificationDossierAppId, fields);
		}

		public ModificationDossierApp Get(Projection projection, System.Decimal modificationDossierAppId, params string[] fields)
		{
			return ((IRepository<ModificationDossierApp>)this).Get(projection, modificationDossierAppId, fields);
		}

		public bool Delete(System.Decimal modificationDossierAppId)
		{
			var entity = new ModificationDossierApp { ModificationDossierAppId = modificationDossierAppId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationDossierAppFields
	{
		public const string ModificationDossierAppId = "ModificationDossierAppId";
		public const string ModificationApplicationId = "ModificationApplicationId";
		public const string MpDossierId = "MpDossierId";
		public const string ProcedureNumber = "ProcedureNumber";
		public const string ClientDispatchDate = "ClientDispatchDate";
		public const string ExpectedSubmissionDate = "ExpectedSubmissionDate";
		public const string SubmissionDate = "SubmissionDate";
		public const string UploadSpanishPortalDate = "UploadSpanishPortalDate";
		public const string ValidationDate = "ValidationDate";
		public const string ExpectedDispatchClientDate = "ExpectedDispatchClientDate";
		public const string RaefarInclusionDate = "RaefarInclusionDate";
		public const string FinalOpinionDate = "FinalOpinionDate";
		public const string RenewalDate = "RenewalDate";
		public const string ClientInformedDate = "ClientInformedDate";
		public const string IsApplicationSubmitted = "IsApplicationSubmitted";
		public const string D0ExpectedDate = "D0ExpectedDate";
		public const string D0RealDate = "D0RealDate";
		public const string D10ExpectedDate = "D10ExpectedDate";
		public const string D10RealDate = "D10RealDate";
		public const string D25ExpectedDate = "D25ExpectedDate";
		public const string D25RealDate = "D25RealDate";
		public const string D35ExpectedDate = "D35ExpectedDate";
		public const string D35RealDate = "D35RealDate";
		public const string D55ExpectedDate = "D55ExpectedDate";
		public const string D55RealDate = "D55RealDate";
		public const string D60ExpectedDate = "D60ExpectedDate";
		public const string D60RealDate = "D60RealDate";
		public const string IsNaExpected0 = "IsNaExpected0";
		public const string IsNaExpected10 = "IsNaExpected10";
		public const string IsNaExpected25 = "IsNaExpected25";
		public const string IsNaExpected35 = "IsNaExpected35";
		public const string IsNaExpected55 = "IsNaExpected55";
		public const string IsNaExpected60 = "IsNaExpected60";
		public const string IsNaReal0 = "IsNaReal0";
		public const string IsNaReal10 = "IsNaReal10";
		public const string IsNaReal25 = "IsNaReal25";
		public const string IsNaReal35 = "IsNaReal35";
		public const string IsNaReal55 = "IsNaReal55";
		public const string IsNaReal60 = "IsNaReal60";
		public const string IsNaClientDispatch = "IsNaClientDispatch";
		public const string IsNaExpectedSubmission = "IsNaExpectedSubmission";
		public const string IsNaUploadSpanish = "IsNaUploadSpanish";
		public const string IsNaValidation = "IsNaValidation";
		public const string IsNaExpectedDispatch = "IsNaExpectedDispatch";
		public const string IsNaRaefarInclusion = "IsNaRaefarInclusion";
		public const string IsNaFinalOpinion = "IsNaFinalOpinion";
		public const string IsNaRenewal = "IsNaRenewal";
		public const string IsNaClientInformed = "IsNaClientInformed";
		public const string IsNaSubmission = "IsNaSubmission";
		public const string ModificationId = "ModificationId";
		public const string ProductName = "ProductName";
		public const string DossierId = "DossierId";
		public const string MktAuthProdedureId = "MktAuthProdedureId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DEFICIENCY_DATE_TYPE_MAP")]
	public partial class DeficiencyDateTypeMap
	{
		private Decimal _ddtmapId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="DDTMAP_ID", BaseColumnName ="DDTMAP_ID", BaseTableName = "DEFICIENCY_DATE_TYPE_MAP" )]		public Decimal DdtmapId 
		{ 
		    get { return _ddtmapId; } 
			set 
			{
			    _ddtmapId = value;
			}
        }

		private Decimal _deficiencyDateTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DEFICIENCY_DATE_TYPE_ID", BaseColumnName ="DEFICIENCY_DATE_TYPE_ID", BaseTableName = "DEFICIENCY_DATE_TYPE_MAP" )]		public Decimal DeficiencyDateTypeId 
		{ 
		    get { return _deficiencyDateTypeId; } 
			set 
			{
			    _deficiencyDateTypeId = value;
			}
        }

		private Decimal _authorisationProcedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="AUTHORISATION_PROCEDURE_ID", BaseColumnName ="AUTHORISATION_PROCEDURE_ID", BaseTableName = "DEFICIENCY_DATE_TYPE_MAP" )]		public Decimal AuthorisationProcedureId 
		{ 
		    get { return _authorisationProcedureId; } 
			set 
			{
			    _authorisationProcedureId = value;
			}
        }


	}

	public partial class DeficiencyDateTypeMapRepository : Repository<DeficiencyDateTypeMap> 
	{
		public DeficiencyDateTypeMapRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DeficiencyDateTypeMap Get(string projectionName, System.Decimal ddtmapId)
		{
			return ((IRepository<DeficiencyDateTypeMap>)this).Get(projectionName, ddtmapId, FetchMode.UseIdentityMap);
		}

		public DeficiencyDateTypeMap Get(string projectionName, System.Decimal ddtmapId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DeficiencyDateTypeMap>)this).Get(projectionName, ddtmapId, fetchMode);
		}

		public DeficiencyDateTypeMap Get(Projection projection, System.Decimal ddtmapId)
		{
			return ((IRepository<DeficiencyDateTypeMap>)this).Get(projection, ddtmapId, FetchMode.UseIdentityMap);
		}

		public DeficiencyDateTypeMap Get(Projection projection, System.Decimal ddtmapId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DeficiencyDateTypeMap>)this).Get(projection, ddtmapId, fetchMode);
		}

		public DeficiencyDateTypeMap Get(string projectionName, System.Decimal ddtmapId, params string[] fields)
		{
			return ((IRepository<DeficiencyDateTypeMap>)this).Get(projectionName, ddtmapId, fields);
		}

		public DeficiencyDateTypeMap Get(Projection projection, System.Decimal ddtmapId, params string[] fields)
		{
			return ((IRepository<DeficiencyDateTypeMap>)this).Get(projection, ddtmapId, fields);
		}

		public bool Delete(System.Decimal ddtmapId)
		{
			var entity = new DeficiencyDateTypeMap { DdtmapId = ddtmapId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DeficiencyDateTypeMapFields
	{
		public const string DdtmapId = "DdtmapId";
		public const string DeficiencyDateTypeId = "DeficiencyDateTypeId";
		public const string AuthorisationProcedureId = "AuthorisationProcedureId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="TEMPORARY_SUSPENSION_TYPES")]
	public partial class TemporarySuspensionType
	{
		private Decimal _temporarySuspensionTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="TEMPORARY_SUSPENSION_TYPE_ID", BaseColumnName ="TEMPORARY_SUSPENSION_TYPE_ID", BaseTableName = "TEMPORARY_SUSPENSION_TYPES" )]		public Decimal TemporarySuspensionTypeId 
		{ 
		    get { return _temporarySuspensionTypeId; } 
			set 
			{
			    _temporarySuspensionTypeId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "TEMPORARY_SUSPENSION_TYPES" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }


	}

	public partial class TemporarySuspensionTypeRepository : Repository<TemporarySuspensionType> 
	{
		public TemporarySuspensionTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public TemporarySuspensionType Get(string projectionName, System.Decimal temporarySuspensionTypeId)
		{
			return ((IRepository<TemporarySuspensionType>)this).Get(projectionName, temporarySuspensionTypeId, FetchMode.UseIdentityMap);
		}

		public TemporarySuspensionType Get(string projectionName, System.Decimal temporarySuspensionTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<TemporarySuspensionType>)this).Get(projectionName, temporarySuspensionTypeId, fetchMode);
		}

		public TemporarySuspensionType Get(Projection projection, System.Decimal temporarySuspensionTypeId)
		{
			return ((IRepository<TemporarySuspensionType>)this).Get(projection, temporarySuspensionTypeId, FetchMode.UseIdentityMap);
		}

		public TemporarySuspensionType Get(Projection projection, System.Decimal temporarySuspensionTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<TemporarySuspensionType>)this).Get(projection, temporarySuspensionTypeId, fetchMode);
		}

		public TemporarySuspensionType Get(string projectionName, System.Decimal temporarySuspensionTypeId, params string[] fields)
		{
			return ((IRepository<TemporarySuspensionType>)this).Get(projectionName, temporarySuspensionTypeId, fields);
		}

		public TemporarySuspensionType Get(Projection projection, System.Decimal temporarySuspensionTypeId, params string[] fields)
		{
			return ((IRepository<TemporarySuspensionType>)this).Get(projection, temporarySuspensionTypeId, fields);
		}

		public bool Delete(System.Decimal temporarySuspensionTypeId)
		{
			var entity = new TemporarySuspensionType { TemporarySuspensionTypeId = temporarySuspensionTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class TemporarySuspensionTypeFields
	{
		public const string TemporarySuspensionTypeId = "TemporarySuspensionTypeId";
		public const string Name = "Name";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_TERMS")]
	public partial class DossierCountryTerm
	{
		private Decimal _dossierCountryTermId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_TERM_ID", ColumnName ="DOSSIER_COUNTRY_TERM_ID", BaseColumnName ="DOSSIER_COUNTRY_TERM_ID", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal DossierCountryTermId 
		{ 
		    get { return _dossierCountryTermId; } 
			set 
			{
			    _dossierCountryTermId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID", BaseColumnName ="DOSSIER_COUNTRY_ID", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private Decimal? _lltCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LLT_CODE", BaseColumnName ="LLT_CODE", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal? LltCode 
		{ 
		    get { return _lltCode; } 
			set 
			{
			    _lltCode = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _ptCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PT_CODE", BaseColumnName ="PT_CODE", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal? PtCode 
		{ 
		    get { return _ptCode; } 
			set 
			{
			    _ptCode = value;
			}
        }

		private Decimal? _hltCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="HLT_CODE", BaseColumnName ="HLT_CODE", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal? HltCode 
		{ 
		    get { return _hltCode; } 
			set 
			{
			    _hltCode = value;
			}
        }

		private Decimal? _hlgtCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="HLGT_CODE", BaseColumnName ="HLGT_CODE", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal? HlgtCode 
		{ 
		    get { return _hlgtCode; } 
			set 
			{
			    _hlgtCode = value;
			}
        }

		private Decimal? _socCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SOC_CODE", BaseColumnName ="SOC_CODE", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal? SocCode 
		{ 
		    get { return _socCode; } 
			set 
			{
			    _socCode = value;
			}
        }

		private String _lltName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LLT_NAME", BaseColumnName ="LLT_NAME", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public String LltName 
		{ 
		    get { return _lltName; } 
			set 
			{
			    _lltName = value;
			}
        }

		private String _ptName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PT_NAME", BaseColumnName ="PT_NAME", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public String PtName 
		{ 
		    get { return _ptName; } 
			set 
			{
			    _ptName = value;
			}
        }

		private String _hltName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="HLT_NAME", BaseColumnName ="HLT_NAME", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public String HltName 
		{ 
		    get { return _hltName; } 
			set 
			{
			    _hltName = value;
			}
        }

		private String _hlgtName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="HLGT_NAME", BaseColumnName ="HLGT_NAME", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public String HlgtName 
		{ 
		    get { return _hlgtName; } 
			set 
			{
			    _hlgtName = value;
			}
        }

		private String _socName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SOC_NAME", BaseColumnName ="SOC_NAME", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public String SocName 
		{ 
		    get { return _socName; } 
			set 
			{
			    _socName = value;
			}
        }

		private Decimal _meddraTermTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDDRA_TERM_TYPE_ID", BaseColumnName ="MEDDRA_TERM_TYPE_ID", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public Decimal MeddraTermTypeId 
		{ 
		    get { return _meddraTermTypeId; } 
			set 
			{
			    _meddraTermTypeId = value;
			}
        }

		private String _isPreferredTerm;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_PREFERRED_TERM", BaseColumnName ="IS_PREFERRED_TERM", BaseTableName = "DOSSIER_COUNTRY_TERMS" )]		public String IsPreferredTerm 
		{ 
		    get { return _isPreferredTerm; } 
			set 
			{
			    _isPreferredTerm = value;
			}
        }

		private String _lltFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="LLT_FULL_NAME" )]		public String LltFullName 
		{ 
		    get { return _lltFullName; } 
			set 
			{
			    _lltFullName = value;
			}
        }

		private String _ptFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="PT_FULL_NAME" )]		public String PtFullName 
		{ 
		    get { return _ptFullName; } 
			set 
			{
			    _ptFullName = value;
			}
        }

		private String _hltFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="HLT_FULL_NAME" )]		public String HltFullName 
		{ 
		    get { return _hltFullName; } 
			set 
			{
			    _hltFullName = value;
			}
        }

		private String _hlgtFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="HLGT_FULL_NAME" )]		public String HlgtFullName 
		{ 
		    get { return _hlgtFullName; } 
			set 
			{
			    _hlgtFullName = value;
			}
        }

		private String _socFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="SOC_FULL_NAME" )]		public String SocFullName 
		{ 
		    get { return _socFullName; } 
			set 
			{
			    _socFullName = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }


	}

	public partial class DossierCountryTermRepository : Repository<DossierCountryTerm> 
	{
		public DossierCountryTermRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryTerm Get(string projectionName, System.Decimal dossierCountryTermId)
		{
			return ((IRepository<DossierCountryTerm>)this).Get(projectionName, dossierCountryTermId, FetchMode.UseIdentityMap);
		}

		public DossierCountryTerm Get(string projectionName, System.Decimal dossierCountryTermId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryTerm>)this).Get(projectionName, dossierCountryTermId, fetchMode);
		}

		public DossierCountryTerm Get(Projection projection, System.Decimal dossierCountryTermId)
		{
			return ((IRepository<DossierCountryTerm>)this).Get(projection, dossierCountryTermId, FetchMode.UseIdentityMap);
		}

		public DossierCountryTerm Get(Projection projection, System.Decimal dossierCountryTermId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryTerm>)this).Get(projection, dossierCountryTermId, fetchMode);
		}

		public DossierCountryTerm Get(string projectionName, System.Decimal dossierCountryTermId, params string[] fields)
		{
			return ((IRepository<DossierCountryTerm>)this).Get(projectionName, dossierCountryTermId, fields);
		}

		public DossierCountryTerm Get(Projection projection, System.Decimal dossierCountryTermId, params string[] fields)
		{
			return ((IRepository<DossierCountryTerm>)this).Get(projection, dossierCountryTermId, fields);
		}

		public bool Delete(System.Decimal dossierCountryTermId)
		{
			var entity = new DossierCountryTerm { DossierCountryTermId = dossierCountryTermId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryTermFields
	{
		public const string DossierCountryTermId = "DossierCountryTermId";
		public const string DossierCountryId = "DossierCountryId";
		public const string LltCode = "LltCode";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string PtCode = "PtCode";
		public const string HltCode = "HltCode";
		public const string HlgtCode = "HlgtCode";
		public const string SocCode = "SocCode";
		public const string LltName = "LltName";
		public const string PtName = "PtName";
		public const string HltName = "HltName";
		public const string HlgtName = "HlgtName";
		public const string SocName = "SocName";
		public const string MeddraTermTypeId = "MeddraTermTypeId";
		public const string IsPreferredTerm = "IsPreferredTerm";
		public const string LltFullName = "LltFullName";
		public const string PtFullName = "PtFullName";
		public const string HltFullName = "HltFullName";
		public const string HlgtFullName = "HlgtFullName";
		public const string SocFullName = "SocFullName";
		public const string DossierId = "DossierId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="SME_STATUSES")]
	public partial class SmeStatus
	{
		private Decimal _smeStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="SME_STATUS_ID", BaseColumnName ="SME_STATUS_ID", BaseTableName = "SME_STATUSES" )]		public Decimal SmeStatusId 
		{ 
		    get { return _smeStatusId; } 
			set 
			{
			    _smeStatusId = value;
			}
        }

		private String _smeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="SME_NAME", BaseColumnName ="SME_NAME", BaseTableName = "SME_STATUSES" )]		public String SmeName 
		{ 
		    get { return _smeName; } 
			set 
			{
			    _smeName = value;
			}
        }


	}

	public partial class SmeStatusRepository : Repository<SmeStatus> 
	{
		public SmeStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public SmeStatus Get(string projectionName, System.Decimal smeStatusId)
		{
			return ((IRepository<SmeStatus>)this).Get(projectionName, smeStatusId, FetchMode.UseIdentityMap);
		}

		public SmeStatus Get(string projectionName, System.Decimal smeStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SmeStatus>)this).Get(projectionName, smeStatusId, fetchMode);
		}

		public SmeStatus Get(Projection projection, System.Decimal smeStatusId)
		{
			return ((IRepository<SmeStatus>)this).Get(projection, smeStatusId, FetchMode.UseIdentityMap);
		}

		public SmeStatus Get(Projection projection, System.Decimal smeStatusId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SmeStatus>)this).Get(projection, smeStatusId, fetchMode);
		}

		public SmeStatus Get(string projectionName, System.Decimal smeStatusId, params string[] fields)
		{
			return ((IRepository<SmeStatus>)this).Get(projectionName, smeStatusId, fields);
		}

		public SmeStatus Get(Projection projection, System.Decimal smeStatusId, params string[] fields)
		{
			return ((IRepository<SmeStatus>)this).Get(projection, smeStatusId, fields);
		}

		public bool Delete(System.Decimal smeStatusId)
		{
			var entity = new SmeStatus { SmeStatusId = smeStatusId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class SmeStatusFields
	{
		public const string SmeStatusId = "SmeStatusId";
		public const string SmeName = "SmeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EXCEL_FIELDS")]
	public partial class ExcelField
	{
		private Decimal _excelFieldId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="EXCEL_FIELD_ID", BaseColumnName ="EXCEL_FIELD_ID", BaseTableName = "EXCEL_FIELDS" )]		public Decimal ExcelFieldId 
		{ 
		    get { return _excelFieldId; } 
			set 
			{
			    _excelFieldId = value;
			}
        }

		private String _fieldName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FIELD_NAME", BaseColumnName ="FIELD_NAME", BaseTableName = "EXCEL_FIELDS" )]		public String FieldName 
		{ 
		    get { return _fieldName; } 
			set 
			{
			    _fieldName = value;
			}
        }

		private String _searchType;
		[DataMember]
		[SqlField(DbType.String, 10, ColumnName ="SEARCH_TYPE", BaseColumnName ="SEARCH_TYPE", BaseTableName = "EXCEL_FIELDS" )]		public String SearchType 
		{ 
		    get { return _searchType; } 
			set 
			{
			    _searchType = value;
			}
        }

		private String _fieldLabel;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="FIELD_LABEL", BaseColumnName ="FIELD_LABEL", BaseTableName = "EXCEL_FIELDS" )]		public String FieldLabel 
		{ 
		    get { return _fieldLabel; } 
			set 
			{
			    _fieldLabel = value;
			}
        }

		private Decimal? _fieldTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="FIELD_TYPE_ID", BaseColumnName ="FIELD_TYPE_ID", BaseTableName = "EXCEL_FIELDS" )]		public Decimal? FieldTypeId 
		{ 
		    get { return _fieldTypeId; } 
			set 
			{
			    _fieldTypeId = value;
			}
        }

		private String _category;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CATEGORY", BaseColumnName ="CATEGORY", BaseTableName = "EXCEL_FIELDS" )]		public String Category 
		{ 
		    get { return _category; } 
			set 
			{
			    _category = value;
			}
        }

		private Decimal? _categoryOrder;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, AllowNull = true, ColumnName ="CATEGORY_ORDER", BaseColumnName ="CATEGORY_ORDER", BaseTableName = "EXCEL_FIELDS" )]		public Decimal? CategoryOrder 
		{ 
		    get { return _categoryOrder; } 
			set 
			{
			    _categoryOrder = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE", BaseColumnName ="IS_ACTIVE", BaseTableName = "EXCEL_FIELDS" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class ExcelFieldRepository : Repository<ExcelField> 
	{
		public ExcelFieldRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ExcelField Get(string projectionName, System.Decimal excelFieldId)
		{
			return ((IRepository<ExcelField>)this).Get(projectionName, excelFieldId, FetchMode.UseIdentityMap);
		}

		public ExcelField Get(string projectionName, System.Decimal excelFieldId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ExcelField>)this).Get(projectionName, excelFieldId, fetchMode);
		}

		public ExcelField Get(Projection projection, System.Decimal excelFieldId)
		{
			return ((IRepository<ExcelField>)this).Get(projection, excelFieldId, FetchMode.UseIdentityMap);
		}

		public ExcelField Get(Projection projection, System.Decimal excelFieldId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ExcelField>)this).Get(projection, excelFieldId, fetchMode);
		}

		public ExcelField Get(string projectionName, System.Decimal excelFieldId, params string[] fields)
		{
			return ((IRepository<ExcelField>)this).Get(projectionName, excelFieldId, fields);
		}

		public ExcelField Get(Projection projection, System.Decimal excelFieldId, params string[] fields)
		{
			return ((IRepository<ExcelField>)this).Get(projection, excelFieldId, fields);
		}

		public bool Delete(System.Decimal excelFieldId)
		{
			var entity = new ExcelField { ExcelFieldId = excelFieldId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ExcelFieldFields
	{
		public const string ExcelFieldId = "ExcelFieldId";
		public const string FieldName = "FieldName";
		public const string SearchType = "SearchType";
		public const string FieldLabel = "FieldLabel";
		public const string FieldTypeId = "FieldTypeId";
		public const string Category = "Category";
		public const string CategoryOrder = "CategoryOrder";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class MpExcelField
	{
		private Decimal _medicinalProductId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MEDICINAL_PRODUCT_ID" )]		public Decimal MedicinalProductId 
		{ 
		    get { return _medicinalProductId; } 
			set 
			{
			    _medicinalProductId = value;
			}
        }

		private String _medicinalProductName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="MEDICINAL_PRODUCT_NAME" )]		public String MedicinalProductName 
		{ 
		    get { return _medicinalProductName; } 
			set 
			{
			    _medicinalProductName = value;
			}
        }

		private String _pharmaceuticalDoseFormValue;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="PHARMACEUTICAL_DOSE_FORM_VALUE" )]		public String PharmaceuticalDoseFormValue 
		{ 
		    get { return _pharmaceuticalDoseFormValue; } 
			set 
			{
			    _pharmaceuticalDoseFormValue = value;
			}
        }

		private String _processType;
		[DataMember]
		[SqlField(DbType.String, 12, ColumnName ="PROCESS_TYPE" )]		public String ProcessType 
		{ 
		    get { return _processType; } 
			set 
			{
			    _processType = value;
			}
        }

		private String _developmentTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DEVELOPMENT_TYPE_NAME" )]		public String DevelopmentTypeName 
		{ 
		    get { return _developmentTypeName; } 
			set 
			{
			    _developmentTypeName = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _mandatoryStatement;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="MANDATORY_STATEMENT" )]		public String MandatoryStatement 
		{ 
		    get { return _mandatoryStatement; } 
			set 
			{
			    _mandatoryStatement = value;
			}
        }

		private String _origin;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="ORIGIN" )]		public String Origin 
		{ 
		    get { return _origin; } 
			set 
			{
			    _origin = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }

		private String _batchNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="BATCH_NUMBER" )]		public String BatchNumber 
		{ 
		    get { return _batchNumber; } 
			set 
			{
			    _batchNumber = value;
			}
        }

		private String _batchSize;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="BATCH_SIZE" )]		public String BatchSize 
		{ 
		    get { return _batchSize; } 
			set 
			{
			    _batchSize = value;
			}
        }

		private String _presentation;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PRESENTATION" )]		public String Presentation 
		{ 
		    get { return _presentation; } 
			set 
			{
			    _presentation = value;
			}
        }

		private String _isInverted;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="IS_INVERTED" )]		public String IsInverted 
		{ 
		    get { return _isInverted; } 
			set 
			{
			    _isInverted = value;
			}
        }

		private String _packagingMaterialName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PACKAGING_MATERIAL_NAME" )]		public String PackagingMaterialName 
		{ 
		    get { return _packagingMaterialName; } 
			set 
			{
			    _packagingMaterialName = value;
			}
        }

		private String _apiManufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="API_MANUFACTURER_NAME" )]		public String ApiManufacturerName 
		{ 
		    get { return _apiManufacturerName; } 
			set 
			{
			    _apiManufacturerName = value;
			}
        }

		private String _studyTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="STUDY_TYPE_NAME" )]		public String StudyTypeName 
		{ 
		    get { return _studyTypeName; } 
			set 
			{
			    _studyTypeName = value;
			}
        }

		private String _assessedConditionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="ASSESSED_CONDITION_NAME" )]		public String AssessedConditionName 
		{ 
		    get { return _assessedConditionName; } 
			set 
			{
			    _assessedConditionName = value;
			}
        }

		private DateTime? _c25StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C25_START_DATE" )]		public DateTime? C25StartDate 
		{ 
		    get { return _c25StartDate; } 
			set 
			{
			    _c25StartDate = value;
			}
        }

		private DateTime? _c30StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C30_START_DATE" )]		public DateTime? C30StartDate 
		{ 
		    get { return _c30StartDate; } 
			set 
			{
			    _c30StartDate = value;
			}
        }

		private DateTime? _c20StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C20_START_DATE" )]		public DateTime? C20StartDate 
		{ 
		    get { return _c20StartDate; } 
			set 
			{
			    _c20StartDate = value;
			}
        }

		private DateTime? _c3075StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C3075_START_DATE" )]		public DateTime? C3075StartDate 
		{ 
		    get { return _c3075StartDate; } 
			set 
			{
			    _c3075StartDate = value;
			}
        }

		private DateTime? _c40StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C40_START_DATE" )]		public DateTime? C40StartDate 
		{ 
		    get { return _c40StartDate; } 
			set 
			{
			    _c40StartDate = value;
			}
        }

		private DateTime? _c2StartDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="C2_START_DATE" )]		public DateTime? C2StartDate 
		{ 
		    get { return _c2StartDate; } 
			set 
			{
			    _c2StartDate = value;
			}
        }

		private String _c25MonthName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C25_MONTH_NAME" )]		public String C25MonthName 
		{ 
		    get { return _c25MonthName; } 
			set 
			{
			    _c25MonthName = value;
			}
        }

		private String _c30MonthName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C30_MONTH_NAME" )]		public String C30MonthName 
		{ 
		    get { return _c30MonthName; } 
			set 
			{
			    _c30MonthName = value;
			}
        }

		private String _c20MonthName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C20_MONTH_NAME" )]		public String C20MonthName 
		{ 
		    get { return _c20MonthName; } 
			set 
			{
			    _c20MonthName = value;
			}
        }

		private String _c3075MonthName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C3075_MONTH_NAME" )]		public String C3075MonthName 
		{ 
		    get { return _c3075MonthName; } 
			set 
			{
			    _c3075MonthName = value;
			}
        }

		private String _c40MonthName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C40_MONTH_NAME" )]		public String C40MonthName 
		{ 
		    get { return _c40MonthName; } 
			set 
			{
			    _c40MonthName = value;
			}
        }

		private String _c2MonthName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="C2_MONTH_NAME" )]		public String C2MonthName 
		{ 
		    get { return _c2MonthName; } 
			set 
			{
			    _c2MonthName = value;
			}
        }

		private String _containerVolumeName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CONTAINER_VOLUME_NAME" )]		public String ContainerVolumeName 
		{ 
		    get { return _containerVolumeName; } 
			set 
			{
			    _containerVolumeName = value;
			}
        }

		private String _developerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="DEVELOPER_NAME" )]		public String DeveloperName 
		{ 
		    get { return _developerName; } 
			set 
			{
			    _developerName = value;
			}
        }

		private String _manufacturerFunctionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MANUFACTURER_FUNCTION_NAME" )]		public String ManufacturerFunctionName 
		{ 
		    get { return _manufacturerFunctionName; } 
			set 
			{
			    _manufacturerFunctionName = value;
			}
        }


	}

	public partial class MpExcelFieldRepository : Repository<MpExcelField> 
	{
		public MpExcelFieldRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class MpExcelFieldFields
	{
		public const string MedicinalProductId = "MedicinalProductId";
		public const string MedicinalProductName = "MedicinalProductName";
		public const string PharmaceuticalDoseFormValue = "PharmaceuticalDoseFormValue";
		public const string ProcessType = "ProcessType";
		public const string DevelopmentTypeName = "DevelopmentTypeName";
		public const string SubstanceName = "SubstanceName";
		public const string MandatoryStatement = "MandatoryStatement";
		public const string Origin = "Origin";
		public const string ManufacturerName = "ManufacturerName";
		public const string Address = "Address";
		public const string BatchNumber = "BatchNumber";
		public const string BatchSize = "BatchSize";
		public const string Presentation = "Presentation";
		public const string IsInverted = "IsInverted";
		public const string PackagingMaterialName = "PackagingMaterialName";
		public const string ApiManufacturerName = "ApiManufacturerName";
		public const string StudyTypeName = "StudyTypeName";
		public const string AssessedConditionName = "AssessedConditionName";
		public const string C25StartDate = "C25StartDate";
		public const string C30StartDate = "C30StartDate";
		public const string C20StartDate = "C20StartDate";
		public const string C3075StartDate = "C3075StartDate";
		public const string C40StartDate = "C40StartDate";
		public const string C2StartDate = "C2StartDate";
		public const string C25MonthName = "C25MonthName";
		public const string C30MonthName = "C30MonthName";
		public const string C20MonthName = "C20MonthName";
		public const string C3075MonthName = "C3075MonthName";
		public const string C40MonthName = "C40MonthName";
		public const string C2MonthName = "C2MonthName";
		public const string ContainerVolumeName = "ContainerVolumeName";
		public const string DeveloperName = "DeveloperName";
		public const string ManufacturerFunctionName = "ManufacturerFunctionName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_LLT_TERMS")]
	public partial class MedraLltTerm
	{
		private Decimal _lltCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="LLT_CODE", BaseColumnName ="LLT_CODE", BaseTableName = "MEDRA_LLT_TERMS" )]		public Decimal LltCode 
		{ 
		    get { return _lltCode; } 
			set 
			{
			    _lltCode = value;
			}
        }

		private String _lltName;
		[DataMember]
		[SqlField(DbType.String, 100, ColumnName ="LLT_NAME", BaseColumnName ="LLT_NAME", BaseTableName = "MEDRA_LLT_TERMS" )]		public String LltName 
		{ 
		    get { return _lltName; } 
			set 
			{
			    _lltName = value;
			}
        }

		private Decimal? _ptCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PT_CODE", BaseColumnName ="PT_CODE", BaseTableName = "MEDRA_LLT_TERMS" )]		public Decimal? PtCode 
		{ 
		    get { return _ptCode; } 
			set 
			{
			    _ptCode = value;
			}
        }

		private String _lltWhoartCode;
		[DataMember]
		[SqlField(DbType.String, 7, ColumnName ="LLT_WHOART_CODE", BaseColumnName ="LLT_WHOART_CODE", BaseTableName = "MEDRA_LLT_TERMS" )]		public String LltWhoartCode 
		{ 
		    get { return _lltWhoartCode; } 
			set 
			{
			    _lltWhoartCode = value;
			}
        }

		private Decimal? _lltHartsCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LLT_HARTS_CODE", BaseColumnName ="LLT_HARTS_CODE", BaseTableName = "MEDRA_LLT_TERMS" )]		public Decimal? LltHartsCode 
		{ 
		    get { return _lltHartsCode; } 
			set 
			{
			    _lltHartsCode = value;
			}
        }

		private String _lltCostartSym;
		[DataMember]
		[SqlField(DbType.String, 21, ColumnName ="LLT_COSTART_SYM", BaseColumnName ="LLT_COSTART_SYM", BaseTableName = "MEDRA_LLT_TERMS" )]		public String LltCostartSym 
		{ 
		    get { return _lltCostartSym; } 
			set 
			{
			    _lltCostartSym = value;
			}
        }

		private String _lltIcd9Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="LLT_ICD9_CODE", BaseColumnName ="LLT_ICD9_CODE", BaseTableName = "MEDRA_LLT_TERMS" )]		public String LltIcd9Code 
		{ 
		    get { return _lltIcd9Code; } 
			set 
			{
			    _lltIcd9Code = value;
			}
        }

		private String _lltIcd9cmCode;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="LLT_ICD9CM_CODE", BaseColumnName ="LLT_ICD9CM_CODE", BaseTableName = "MEDRA_LLT_TERMS" )]		public String LltIcd9cmCode 
		{ 
		    get { return _lltIcd9cmCode; } 
			set 
			{
			    _lltIcd9cmCode = value;
			}
        }

		private String _lltIcd10Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="LLT_ICD10_CODE", BaseColumnName ="LLT_ICD10_CODE", BaseTableName = "MEDRA_LLT_TERMS" )]		public String LltIcd10Code 
		{ 
		    get { return _lltIcd10Code; } 
			set 
			{
			    _lltIcd10Code = value;
			}
        }

		private String _lltCurrency;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="LLT_CURRENCY", BaseColumnName ="LLT_CURRENCY", BaseTableName = "MEDRA_LLT_TERMS" )]		public String LltCurrency 
		{ 
		    get { return _lltCurrency; } 
			set 
			{
			    _lltCurrency = value;
			}
        }

		private String _lltJartCode;
		[DataMember]
		[SqlField(DbType.String, 6, ColumnName ="LLT_JART_CODE", BaseColumnName ="LLT_JART_CODE", BaseTableName = "MEDRA_LLT_TERMS" )]		public String LltJartCode 
		{ 
		    get { return _lltJartCode; } 
			set 
			{
			    _lltJartCode = value;
			}
        }

		private String _fullName;
		[DataMember]
		[SqlField(DbType.String, 143, ColumnName ="FULL_NAME" )]		public String FullName 
		{ 
		    get { return _fullName; } 
			set 
			{
			    _fullName = value;
			}
        }

		private Decimal? _rowNumber;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ROW_NUMBER" )]		public Decimal? RowNumber 
		{ 
		    get { return _rowNumber; } 
			set 
			{
			    _rowNumber = value;
			}
        }


	}

	public partial class MedraLltTermRepository : Repository<MedraLltTerm> 
	{
		public MedraLltTermRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedraLltTerm Get(string projectionName, System.Decimal lltCode)
		{
			return ((IRepository<MedraLltTerm>)this).Get(projectionName, lltCode, FetchMode.UseIdentityMap);
		}

		public MedraLltTerm Get(string projectionName, System.Decimal lltCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraLltTerm>)this).Get(projectionName, lltCode, fetchMode);
		}

		public MedraLltTerm Get(Projection projection, System.Decimal lltCode)
		{
			return ((IRepository<MedraLltTerm>)this).Get(projection, lltCode, FetchMode.UseIdentityMap);
		}

		public MedraLltTerm Get(Projection projection, System.Decimal lltCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraLltTerm>)this).Get(projection, lltCode, fetchMode);
		}

		public MedraLltTerm Get(string projectionName, System.Decimal lltCode, params string[] fields)
		{
			return ((IRepository<MedraLltTerm>)this).Get(projectionName, lltCode, fields);
		}

		public MedraLltTerm Get(Projection projection, System.Decimal lltCode, params string[] fields)
		{
			return ((IRepository<MedraLltTerm>)this).Get(projection, lltCode, fields);
		}

		public bool Delete(System.Decimal lltCode)
		{
			var entity = new MedraLltTerm { LltCode = lltCode };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MedraLltTermFields
	{
		public const string LltCode = "LltCode";
		public const string LltName = "LltName";
		public const string PtCode = "PtCode";
		public const string LltWhoartCode = "LltWhoartCode";
		public const string LltHartsCode = "LltHartsCode";
		public const string LltCostartSym = "LltCostartSym";
		public const string LltIcd9Code = "LltIcd9Code";
		public const string LltIcd9cmCode = "LltIcd9cmCode";
		public const string LltIcd10Code = "LltIcd10Code";
		public const string LltCurrency = "LltCurrency";
		public const string LltJartCode = "LltJartCode";
		public const string FullName = "FullName";
		public const string RowNumber = "RowNumber";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_PT_TERMS")]
	public partial class MedraPtTerm
	{
		private Decimal _ptCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="PT_CODE", BaseColumnName ="PT_CODE", BaseTableName = "MEDRA_PT_TERMS" )]		public Decimal PtCode 
		{ 
		    get { return _ptCode; } 
			set 
			{
			    _ptCode = value;
			}
        }

		private String _ptName;
		[DataMember]
		[SqlField(DbType.String, 100, ColumnName ="PT_NAME", BaseColumnName ="PT_NAME", BaseTableName = "MEDRA_PT_TERMS" )]		public String PtName 
		{ 
		    get { return _ptName; } 
			set 
			{
			    _ptName = value;
			}
        }

		private String _nullField;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="NULL_FIELD", BaseColumnName ="NULL_FIELD", BaseTableName = "MEDRA_PT_TERMS" )]		public String NullField 
		{ 
		    get { return _nullField; } 
			set 
			{
			    _nullField = value;
			}
        }

		private Decimal? _ptSocCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PT_SOC_CODE", BaseColumnName ="PT_SOC_CODE", BaseTableName = "MEDRA_PT_TERMS" )]		public Decimal? PtSocCode 
		{ 
		    get { return _ptSocCode; } 
			set 
			{
			    _ptSocCode = value;
			}
        }

		private String _ptWhoartCode;
		[DataMember]
		[SqlField(DbType.String, 7, ColumnName ="PT_WHOART_CODE", BaseColumnName ="PT_WHOART_CODE", BaseTableName = "MEDRA_PT_TERMS" )]		public String PtWhoartCode 
		{ 
		    get { return _ptWhoartCode; } 
			set 
			{
			    _ptWhoartCode = value;
			}
        }

		private Decimal? _ptHartsCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="PT_HARTS_CODE", BaseColumnName ="PT_HARTS_CODE", BaseTableName = "MEDRA_PT_TERMS" )]		public Decimal? PtHartsCode 
		{ 
		    get { return _ptHartsCode; } 
			set 
			{
			    _ptHartsCode = value;
			}
        }

		private String _ptCostartSym;
		[DataMember]
		[SqlField(DbType.String, 21, ColumnName ="PT_COSTART_SYM", BaseColumnName ="PT_COSTART_SYM", BaseTableName = "MEDRA_PT_TERMS" )]		public String PtCostartSym 
		{ 
		    get { return _ptCostartSym; } 
			set 
			{
			    _ptCostartSym = value;
			}
        }

		private String _ptIcd9Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="PT_ICD9_CODE", BaseColumnName ="PT_ICD9_CODE", BaseTableName = "MEDRA_PT_TERMS" )]		public String PtIcd9Code 
		{ 
		    get { return _ptIcd9Code; } 
			set 
			{
			    _ptIcd9Code = value;
			}
        }

		private String _ptIcd9cmCode;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="PT_ICD9CM_CODE", BaseColumnName ="PT_ICD9CM_CODE", BaseTableName = "MEDRA_PT_TERMS" )]		public String PtIcd9cmCode 
		{ 
		    get { return _ptIcd9cmCode; } 
			set 
			{
			    _ptIcd9cmCode = value;
			}
        }

		private String _ptIcd10Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="PT_ICD10_CODE", BaseColumnName ="PT_ICD10_CODE", BaseTableName = "MEDRA_PT_TERMS" )]		public String PtIcd10Code 
		{ 
		    get { return _ptIcd10Code; } 
			set 
			{
			    _ptIcd10Code = value;
			}
        }

		private String _ptJartCode;
		[DataMember]
		[SqlField(DbType.String, 6, ColumnName ="PT_JART_CODE", BaseColumnName ="PT_JART_CODE", BaseTableName = "MEDRA_PT_TERMS" )]		public String PtJartCode 
		{ 
		    get { return _ptJartCode; } 
			set 
			{
			    _ptJartCode = value;
			}
        }

		private String _fullName;
		[DataMember]
		[SqlField(DbType.String, 143, ColumnName ="FULL_NAME" )]		public String FullName 
		{ 
		    get { return _fullName; } 
			set 
			{
			    _fullName = value;
			}
        }

		private Decimal? _rowNumber;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ROW_NUMBER" )]		public Decimal? RowNumber 
		{ 
		    get { return _rowNumber; } 
			set 
			{
			    _rowNumber = value;
			}
        }


	}

	public partial class MedraPtTermRepository : Repository<MedraPtTerm> 
	{
		public MedraPtTermRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedraPtTerm Get(string projectionName, System.Decimal ptCode)
		{
			return ((IRepository<MedraPtTerm>)this).Get(projectionName, ptCode, FetchMode.UseIdentityMap);
		}

		public MedraPtTerm Get(string projectionName, System.Decimal ptCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraPtTerm>)this).Get(projectionName, ptCode, fetchMode);
		}

		public MedraPtTerm Get(Projection projection, System.Decimal ptCode)
		{
			return ((IRepository<MedraPtTerm>)this).Get(projection, ptCode, FetchMode.UseIdentityMap);
		}

		public MedraPtTerm Get(Projection projection, System.Decimal ptCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraPtTerm>)this).Get(projection, ptCode, fetchMode);
		}

		public MedraPtTerm Get(string projectionName, System.Decimal ptCode, params string[] fields)
		{
			return ((IRepository<MedraPtTerm>)this).Get(projectionName, ptCode, fields);
		}

		public MedraPtTerm Get(Projection projection, System.Decimal ptCode, params string[] fields)
		{
			return ((IRepository<MedraPtTerm>)this).Get(projection, ptCode, fields);
		}

		public bool Delete(System.Decimal ptCode)
		{
			var entity = new MedraPtTerm { PtCode = ptCode };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MedraPtTermFields
	{
		public const string PtCode = "PtCode";
		public const string PtName = "PtName";
		public const string NullField = "NullField";
		public const string PtSocCode = "PtSocCode";
		public const string PtWhoartCode = "PtWhoartCode";
		public const string PtHartsCode = "PtHartsCode";
		public const string PtCostartSym = "PtCostartSym";
		public const string PtIcd9Code = "PtIcd9Code";
		public const string PtIcd9cmCode = "PtIcd9cmCode";
		public const string PtIcd10Code = "PtIcd10Code";
		public const string PtJartCode = "PtJartCode";
		public const string FullName = "FullName";
		public const string RowNumber = "RowNumber";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_HLT_TERMS")]
	public partial class MedraHltTerm
	{
		private Decimal _hltCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="HLT_CODE", BaseColumnName ="HLT_CODE", BaseTableName = "MEDRA_HLT_TERMS" )]		public Decimal HltCode 
		{ 
		    get { return _hltCode; } 
			set 
			{
			    _hltCode = value;
			}
        }

		private String _hltName;
		[DataMember]
		[SqlField(DbType.String, 100, ColumnName ="HLT_NAME", BaseColumnName ="HLT_NAME", BaseTableName = "MEDRA_HLT_TERMS" )]		public String HltName 
		{ 
		    get { return _hltName; } 
			set 
			{
			    _hltName = value;
			}
        }

		private String _hltWhoartCode;
		[DataMember]
		[SqlField(DbType.String, 7, ColumnName ="HLT_WHOART_CODE", BaseColumnName ="HLT_WHOART_CODE", BaseTableName = "MEDRA_HLT_TERMS" )]		public String HltWhoartCode 
		{ 
		    get { return _hltWhoartCode; } 
			set 
			{
			    _hltWhoartCode = value;
			}
        }

		private Decimal? _hltHartsCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="HLT_HARTS_CODE", BaseColumnName ="HLT_HARTS_CODE", BaseTableName = "MEDRA_HLT_TERMS" )]		public Decimal? HltHartsCode 
		{ 
		    get { return _hltHartsCode; } 
			set 
			{
			    _hltHartsCode = value;
			}
        }

		private String _hltCostartSym;
		[DataMember]
		[SqlField(DbType.String, 21, ColumnName ="HLT_COSTART_SYM", BaseColumnName ="HLT_COSTART_SYM", BaseTableName = "MEDRA_HLT_TERMS" )]		public String HltCostartSym 
		{ 
		    get { return _hltCostartSym; } 
			set 
			{
			    _hltCostartSym = value;
			}
        }

		private String _hltIcd9Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="HLT_ICD9_CODE", BaseColumnName ="HLT_ICD9_CODE", BaseTableName = "MEDRA_HLT_TERMS" )]		public String HltIcd9Code 
		{ 
		    get { return _hltIcd9Code; } 
			set 
			{
			    _hltIcd9Code = value;
			}
        }

		private String _hltIcd9cmCode;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="HLT_ICD9CM_CODE", BaseColumnName ="HLT_ICD9CM_CODE", BaseTableName = "MEDRA_HLT_TERMS" )]		public String HltIcd9cmCode 
		{ 
		    get { return _hltIcd9cmCode; } 
			set 
			{
			    _hltIcd9cmCode = value;
			}
        }

		private String _hltIcd10Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="HLT_ICD10_CODE", BaseColumnName ="HLT_ICD10_CODE", BaseTableName = "MEDRA_HLT_TERMS" )]		public String HltIcd10Code 
		{ 
		    get { return _hltIcd10Code; } 
			set 
			{
			    _hltIcd10Code = value;
			}
        }

		private String _hltJartCode;
		[DataMember]
		[SqlField(DbType.String, 6, ColumnName ="HLT_JART_CODE", BaseColumnName ="HLT_JART_CODE", BaseTableName = "MEDRA_HLT_TERMS" )]		public String HltJartCode 
		{ 
		    get { return _hltJartCode; } 
			set 
			{
			    _hltJartCode = value;
			}
        }

		private String _fullName;
		[DataMember]
		[SqlField(DbType.String, 143, ColumnName ="FULL_NAME" )]		public String FullName 
		{ 
		    get { return _fullName; } 
			set 
			{
			    _fullName = value;
			}
        }

		private Decimal? _rowNumber;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ROW_NUMBER" )]		public Decimal? RowNumber 
		{ 
		    get { return _rowNumber; } 
			set 
			{
			    _rowNumber = value;
			}
        }


	}

	public partial class MedraHltTermRepository : Repository<MedraHltTerm> 
	{
		public MedraHltTermRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedraHltTerm Get(string projectionName, System.Decimal hltCode)
		{
			return ((IRepository<MedraHltTerm>)this).Get(projectionName, hltCode, FetchMode.UseIdentityMap);
		}

		public MedraHltTerm Get(string projectionName, System.Decimal hltCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraHltTerm>)this).Get(projectionName, hltCode, fetchMode);
		}

		public MedraHltTerm Get(Projection projection, System.Decimal hltCode)
		{
			return ((IRepository<MedraHltTerm>)this).Get(projection, hltCode, FetchMode.UseIdentityMap);
		}

		public MedraHltTerm Get(Projection projection, System.Decimal hltCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraHltTerm>)this).Get(projection, hltCode, fetchMode);
		}

		public MedraHltTerm Get(string projectionName, System.Decimal hltCode, params string[] fields)
		{
			return ((IRepository<MedraHltTerm>)this).Get(projectionName, hltCode, fields);
		}

		public MedraHltTerm Get(Projection projection, System.Decimal hltCode, params string[] fields)
		{
			return ((IRepository<MedraHltTerm>)this).Get(projection, hltCode, fields);
		}

		public bool Delete(System.Decimal hltCode)
		{
			var entity = new MedraHltTerm { HltCode = hltCode };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MedraHltTermFields
	{
		public const string HltCode = "HltCode";
		public const string HltName = "HltName";
		public const string HltWhoartCode = "HltWhoartCode";
		public const string HltHartsCode = "HltHartsCode";
		public const string HltCostartSym = "HltCostartSym";
		public const string HltIcd9Code = "HltIcd9Code";
		public const string HltIcd9cmCode = "HltIcd9cmCode";
		public const string HltIcd10Code = "HltIcd10Code";
		public const string HltJartCode = "HltJartCode";
		public const string FullName = "FullName";
		public const string RowNumber = "RowNumber";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_HLGT_TERMS")]
	public partial class MedraHlgtTerm
	{
		private Decimal _hlgtCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="HLGT_CODE", BaseColumnName ="HLGT_CODE", BaseTableName = "MEDRA_HLGT_TERMS" )]		public Decimal HlgtCode 
		{ 
		    get { return _hlgtCode; } 
			set 
			{
			    _hlgtCode = value;
			}
        }

		private String _hlgtName;
		[DataMember]
		[SqlField(DbType.String, 100, ColumnName ="HLGT_NAME", BaseColumnName ="HLGT_NAME", BaseTableName = "MEDRA_HLGT_TERMS" )]		public String HlgtName 
		{ 
		    get { return _hlgtName; } 
			set 
			{
			    _hlgtName = value;
			}
        }

		private String _hlgtWhoartCode;
		[DataMember]
		[SqlField(DbType.String, 7, ColumnName ="HLGT_WHOART_CODE", BaseColumnName ="HLGT_WHOART_CODE", BaseTableName = "MEDRA_HLGT_TERMS" )]		public String HlgtWhoartCode 
		{ 
		    get { return _hlgtWhoartCode; } 
			set 
			{
			    _hlgtWhoartCode = value;
			}
        }

		private Decimal? _hlgtHartsCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="HLGT_HARTS_CODE", BaseColumnName ="HLGT_HARTS_CODE", BaseTableName = "MEDRA_HLGT_TERMS" )]		public Decimal? HlgtHartsCode 
		{ 
		    get { return _hlgtHartsCode; } 
			set 
			{
			    _hlgtHartsCode = value;
			}
        }

		private String _hlgtCostartSym;
		[DataMember]
		[SqlField(DbType.String, 21, ColumnName ="HLGT_COSTART_SYM", BaseColumnName ="HLGT_COSTART_SYM", BaseTableName = "MEDRA_HLGT_TERMS" )]		public String HlgtCostartSym 
		{ 
		    get { return _hlgtCostartSym; } 
			set 
			{
			    _hlgtCostartSym = value;
			}
        }

		private String _hlgtIcd9Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="HLGT_ICD9_CODE", BaseColumnName ="HLGT_ICD9_CODE", BaseTableName = "MEDRA_HLGT_TERMS" )]		public String HlgtIcd9Code 
		{ 
		    get { return _hlgtIcd9Code; } 
			set 
			{
			    _hlgtIcd9Code = value;
			}
        }

		private String _hlgtIcd9cmCode;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="HLGT_ICD9CM_CODE", BaseColumnName ="HLGT_ICD9CM_CODE", BaseTableName = "MEDRA_HLGT_TERMS" )]		public String HlgtIcd9cmCode 
		{ 
		    get { return _hlgtIcd9cmCode; } 
			set 
			{
			    _hlgtIcd9cmCode = value;
			}
        }

		private String _hlgtIcd10Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="HLGT_ICD10_CODE", BaseColumnName ="HLGT_ICD10_CODE", BaseTableName = "MEDRA_HLGT_TERMS" )]		public String HlgtIcd10Code 
		{ 
		    get { return _hlgtIcd10Code; } 
			set 
			{
			    _hlgtIcd10Code = value;
			}
        }

		private String _hlgtJartCode;
		[DataMember]
		[SqlField(DbType.String, 6, ColumnName ="HLGT_JART_CODE", BaseColumnName ="HLGT_JART_CODE", BaseTableName = "MEDRA_HLGT_TERMS" )]		public String HlgtJartCode 
		{ 
		    get { return _hlgtJartCode; } 
			set 
			{
			    _hlgtJartCode = value;
			}
        }

		private String _fullName;
		[DataMember]
		[SqlField(DbType.String, 143, ColumnName ="FULL_NAME" )]		public String FullName 
		{ 
		    get { return _fullName; } 
			set 
			{
			    _fullName = value;
			}
        }

		private Decimal? _rowNumber;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ROW_NUMBER" )]		public Decimal? RowNumber 
		{ 
		    get { return _rowNumber; } 
			set 
			{
			    _rowNumber = value;
			}
        }


	}

	public partial class MedraHlgtTermRepository : Repository<MedraHlgtTerm> 
	{
		public MedraHlgtTermRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedraHlgtTerm Get(string projectionName, System.Decimal hlgtCode)
		{
			return ((IRepository<MedraHlgtTerm>)this).Get(projectionName, hlgtCode, FetchMode.UseIdentityMap);
		}

		public MedraHlgtTerm Get(string projectionName, System.Decimal hlgtCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraHlgtTerm>)this).Get(projectionName, hlgtCode, fetchMode);
		}

		public MedraHlgtTerm Get(Projection projection, System.Decimal hlgtCode)
		{
			return ((IRepository<MedraHlgtTerm>)this).Get(projection, hlgtCode, FetchMode.UseIdentityMap);
		}

		public MedraHlgtTerm Get(Projection projection, System.Decimal hlgtCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraHlgtTerm>)this).Get(projection, hlgtCode, fetchMode);
		}

		public MedraHlgtTerm Get(string projectionName, System.Decimal hlgtCode, params string[] fields)
		{
			return ((IRepository<MedraHlgtTerm>)this).Get(projectionName, hlgtCode, fields);
		}

		public MedraHlgtTerm Get(Projection projection, System.Decimal hlgtCode, params string[] fields)
		{
			return ((IRepository<MedraHlgtTerm>)this).Get(projection, hlgtCode, fields);
		}

		public bool Delete(System.Decimal hlgtCode)
		{
			var entity = new MedraHlgtTerm { HlgtCode = hlgtCode };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MedraHlgtTermFields
	{
		public const string HlgtCode = "HlgtCode";
		public const string HlgtName = "HlgtName";
		public const string HlgtWhoartCode = "HlgtWhoartCode";
		public const string HlgtHartsCode = "HlgtHartsCode";
		public const string HlgtCostartSym = "HlgtCostartSym";
		public const string HlgtIcd9Code = "HlgtIcd9Code";
		public const string HlgtIcd9cmCode = "HlgtIcd9cmCode";
		public const string HlgtIcd10Code = "HlgtIcd10Code";
		public const string HlgtJartCode = "HlgtJartCode";
		public const string FullName = "FullName";
		public const string RowNumber = "RowNumber";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_SOC_TERMS")]
	public partial class MedraSocTerm
	{
		private Decimal _socCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="SOC_CODE", BaseColumnName ="SOC_CODE", BaseTableName = "MEDRA_SOC_TERMS" )]		public Decimal SocCode 
		{ 
		    get { return _socCode; } 
			set 
			{
			    _socCode = value;
			}
        }

		private String _socName;
		[DataMember]
		[SqlField(DbType.String, 100, ColumnName ="SOC_NAME", BaseColumnName ="SOC_NAME", BaseTableName = "MEDRA_SOC_TERMS" )]		public String SocName 
		{ 
		    get { return _socName; } 
			set 
			{
			    _socName = value;
			}
        }

		private String _socAbbrev;
		[DataMember]
		[SqlField(DbType.String, 5, ColumnName ="SOC_ABBREV", BaseColumnName ="SOC_ABBREV", BaseTableName = "MEDRA_SOC_TERMS" )]		public String SocAbbrev 
		{ 
		    get { return _socAbbrev; } 
			set 
			{
			    _socAbbrev = value;
			}
        }

		private String _socWhoartCode;
		[DataMember]
		[SqlField(DbType.String, 7, ColumnName ="SOC_WHOART_CODE", BaseColumnName ="SOC_WHOART_CODE", BaseTableName = "MEDRA_SOC_TERMS" )]		public String SocWhoartCode 
		{ 
		    get { return _socWhoartCode; } 
			set 
			{
			    _socWhoartCode = value;
			}
        }

		private Decimal? _socHartsCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="SOC_HARTS_CODE", BaseColumnName ="SOC_HARTS_CODE", BaseTableName = "MEDRA_SOC_TERMS" )]		public Decimal? SocHartsCode 
		{ 
		    get { return _socHartsCode; } 
			set 
			{
			    _socHartsCode = value;
			}
        }

		private String _socCostartCode;
		[DataMember]
		[SqlField(DbType.String, 21, ColumnName ="SOC_COSTART_CODE", BaseColumnName ="SOC_COSTART_CODE", BaseTableName = "MEDRA_SOC_TERMS" )]		public String SocCostartCode 
		{ 
		    get { return _socCostartCode; } 
			set 
			{
			    _socCostartCode = value;
			}
        }

		private String _socIcd9Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="SOC_ICD9_CODE", BaseColumnName ="SOC_ICD9_CODE", BaseTableName = "MEDRA_SOC_TERMS" )]		public String SocIcd9Code 
		{ 
		    get { return _socIcd9Code; } 
			set 
			{
			    _socIcd9Code = value;
			}
        }

		private String _socIcd9cmCode;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="SOC_ICD9CM_CODE", BaseColumnName ="SOC_ICD9CM_CODE", BaseTableName = "MEDRA_SOC_TERMS" )]		public String SocIcd9cmCode 
		{ 
		    get { return _socIcd9cmCode; } 
			set 
			{
			    _socIcd9cmCode = value;
			}
        }

		private String _socIcd10Code;
		[DataMember]
		[SqlField(DbType.String, 8, ColumnName ="SOC_ICD10_CODE", BaseColumnName ="SOC_ICD10_CODE", BaseTableName = "MEDRA_SOC_TERMS" )]		public String SocIcd10Code 
		{ 
		    get { return _socIcd10Code; } 
			set 
			{
			    _socIcd10Code = value;
			}
        }

		private String _socJartCode;
		[DataMember]
		[SqlField(DbType.String, 6, ColumnName ="SOC_JART_CODE", BaseColumnName ="SOC_JART_CODE", BaseTableName = "MEDRA_SOC_TERMS" )]		public String SocJartCode 
		{ 
		    get { return _socJartCode; } 
			set 
			{
			    _socJartCode = value;
			}
        }

		private String _fullName;
		[DataMember]
		[SqlField(DbType.String, 143, ColumnName ="FULL_NAME" )]		public String FullName 
		{ 
		    get { return _fullName; } 
			set 
			{
			    _fullName = value;
			}
        }

		private Decimal? _rowNumber;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ROW_NUMBER" )]		public Decimal? RowNumber 
		{ 
		    get { return _rowNumber; } 
			set 
			{
			    _rowNumber = value;
			}
        }


	}

	public partial class MedraSocTermRepository : Repository<MedraSocTerm> 
	{
		public MedraSocTermRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MedraSocTerm Get(string projectionName, System.Decimal socCode)
		{
			return ((IRepository<MedraSocTerm>)this).Get(projectionName, socCode, FetchMode.UseIdentityMap);
		}

		public MedraSocTerm Get(string projectionName, System.Decimal socCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraSocTerm>)this).Get(projectionName, socCode, fetchMode);
		}

		public MedraSocTerm Get(Projection projection, System.Decimal socCode)
		{
			return ((IRepository<MedraSocTerm>)this).Get(projection, socCode, FetchMode.UseIdentityMap);
		}

		public MedraSocTerm Get(Projection projection, System.Decimal socCode, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MedraSocTerm>)this).Get(projection, socCode, fetchMode);
		}

		public MedraSocTerm Get(string projectionName, System.Decimal socCode, params string[] fields)
		{
			return ((IRepository<MedraSocTerm>)this).Get(projectionName, socCode, fields);
		}

		public MedraSocTerm Get(Projection projection, System.Decimal socCode, params string[] fields)
		{
			return ((IRepository<MedraSocTerm>)this).Get(projection, socCode, fields);
		}

		public bool Delete(System.Decimal socCode)
		{
			var entity = new MedraSocTerm { SocCode = socCode };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MedraSocTermFields
	{
		public const string SocCode = "SocCode";
		public const string SocName = "SocName";
		public const string SocAbbrev = "SocAbbrev";
		public const string SocWhoartCode = "SocWhoartCode";
		public const string SocHartsCode = "SocHartsCode";
		public const string SocCostartCode = "SocCostartCode";
		public const string SocIcd9Code = "SocIcd9Code";
		public const string SocIcd9cmCode = "SocIcd9cmCode";
		public const string SocIcd10Code = "SocIcd10Code";
		public const string SocJartCode = "SocJartCode";
		public const string FullName = "FullName";
		public const string RowNumber = "RowNumber";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_HLT_PT_TERMS")]
	public partial class MedraHltPtTerm
	{
		private Decimal _medraHltCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="MEDRA_HLT_CODE", BaseColumnName ="MEDRA_HLT_CODE", BaseTableName = "MEDRA_HLT_PT_TERMS" )]		public Decimal MedraHltCode 
		{ 
		    get { return _medraHltCode; } 
			set 
			{
			    _medraHltCode = value;
			}
        }

		private Decimal _medraPtCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="MEDRA_PT_CODE", BaseColumnName ="MEDRA_PT_CODE", BaseTableName = "MEDRA_HLT_PT_TERMS" )]		public Decimal MedraPtCode 
		{ 
		    get { return _medraPtCode; } 
			set 
			{
			    _medraPtCode = value;
			}
        }


	}

	public partial class MedraHltPtTermRepository : Repository<MedraHltPtTerm> 
	{
		public MedraHltPtTermRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class MedraHltPtTermFields
	{
		public const string MedraHltCode = "MedraHltCode";
		public const string MedraPtCode = "MedraPtCode";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_HLGT_HLT_TERMS")]
	public partial class MedraHlgtHltTerm
	{
		private Decimal _hlgtCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="HLGT_CODE", BaseColumnName ="HLGT_CODE", BaseTableName = "MEDRA_HLGT_HLT_TERMS" )]		public Decimal HlgtCode 
		{ 
		    get { return _hlgtCode; } 
			set 
			{
			    _hlgtCode = value;
			}
        }

		private Decimal _hltCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="HLT_CODE", BaseColumnName ="HLT_CODE", BaseTableName = "MEDRA_HLGT_HLT_TERMS" )]		public Decimal HltCode 
		{ 
		    get { return _hltCode; } 
			set 
			{
			    _hltCode = value;
			}
        }


	}

	public partial class MedraHlgtHltTermRepository : Repository<MedraHlgtHltTerm> 
	{
		public MedraHlgtHltTermRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class MedraHlgtHltTermFields
	{
		public const string HlgtCode = "HlgtCode";
		public const string HltCode = "HltCode";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MEDRA_SOC_HLGT_TERMS")]
	public partial class MedraSocHlgtTerm
	{
		private Decimal _socCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="SOC_CODE", BaseColumnName ="SOC_CODE", BaseTableName = "MEDRA_SOC_HLGT_TERMS" )]		public Decimal SocCode 
		{ 
		    get { return _socCode; } 
			set 
			{
			    _socCode = value;
			}
        }

		private Decimal _hlgtCode;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="HLGT_CODE", BaseColumnName ="HLGT_CODE", BaseTableName = "MEDRA_SOC_HLGT_TERMS" )]		public Decimal HlgtCode 
		{ 
		    get { return _hlgtCode; } 
			set 
			{
			    _hlgtCode = value;
			}
        }


	}

	public partial class MedraSocHlgtTermRepository : Repository<MedraSocHlgtTerm> 
	{
		public MedraSocHlgtTermRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class MedraSocHlgtTermFields
	{
		public const string SocCode = "SocCode";
		public const string HlgtCode = "HlgtCode";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class DossierExcelField
	{
		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _groupName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUP_NAME" )]		public String GroupName 
		{ 
		    get { return _groupName; } 
			set 
			{
			    _groupName = value;
			}
        }

		private String _authorisationProcedureValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="AUTHORISATION_PROCEDURE_VALUE" )]		public String AuthorisationProcedureValue 
		{ 
		    get { return _authorisationProcedureValue; } 
			set 
			{
			    _authorisationProcedureValue = value;
			}
        }

		private String _countryFullName;
		[DataMember]
		[SqlField(DbType.String, 43, ColumnName ="COUNTRY_FULL_NAME" )]		public String CountryFullName 
		{ 
		    get { return _countryFullName; } 
			set 
			{
			    _countryFullName = value;
			}
        }

		private String _rmsCountry;
		[DataMember]
		[SqlField(DbType.String, 43, ColumnName ="RMS_COUNTRY" )]		public String RmsCountry 
		{ 
		    get { return _rmsCountry; } 
			set 
			{
			    _rmsCountry = value;
			}
        }

		private String _localNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOCAL_NUMBER" )]		public String LocalNumber 
		{ 
		    get { return _localNumber; } 
			set 
			{
			    _localNumber = value;
			}
        }

		private String _mktAuthNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MKT_AUTH_NUMBER" )]		public String MktAuthNumber 
		{ 
		    get { return _mktAuthNumber; } 
			set 
			{
			    _mktAuthNumber = value;
			}
        }

		private String _evcode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="EVCODE" )]		public String Evcode 
		{ 
		    get { return _evcode; } 
			set 
			{
			    _evcode = value;
			}
        }

		private String _mktStatus;
		[DataMember]
		[SqlField(DbType.String, 10, ColumnName ="MKT_STATUS" )]		public String MktStatus 
		{ 
		    get { return _mktStatus; } 
			set 
			{
			    _mktStatus = value;
			}
        }

		private String _presentationName;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="PRESENTATION_NAME" )]		public String PresentationName 
		{ 
		    get { return _presentationName; } 
			set 
			{
			    _presentationName = value;
			}
        }

		private String _procNumber;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="PROC_NUMBER" )]		public String ProcNumber 
		{ 
		    get { return _procNumber; } 
			set 
			{
			    _procNumber = value;
			}
        }

		private String _routeOfAdministrationValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ROUTE_OF_ADMINISTRATION_VALUE" )]		public String RouteOfAdministrationValue 
		{ 
		    get { return _routeOfAdministrationValue; } 
			set 
			{
			    _routeOfAdministrationValue = value;
			}
        }

		private String _dispensingClassificationName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DISPENSING_CLASSIFICATION_NAME" )]		public String DispensingClassificationName 
		{ 
		    get { return _dispensingClassificationName; } 
			set 
			{
			    _dispensingClassificationName = value;
			}
        }

		private String _antiTamperingDevice;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="ANTI_TAMPERING_DEVICE" )]		public String AntiTamperingDevice 
		{ 
		    get { return _antiTamperingDevice; } 
			set 
			{
			    _antiTamperingDevice = value;
			}
        }

		private String _uniqueIdentifier;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="UNIQUE_IDENTIFIER" )]		public String UniqueIdentifier 
		{ 
		    get { return _uniqueIdentifier; } 
			set 
			{
			    _uniqueIdentifier = value;
			}
        }

		private String _mahName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MAH_NAME" )]		public String MahName 
		{ 
		    get { return _mahName; } 
			set 
			{
			    _mahName = value;
			}
        }

		private String _providerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PROVIDER_NAME" )]		public String ProviderName 
		{ 
		    get { return _providerName; } 
			set 
			{
			    _providerName = value;
			}
        }

		private String _clientName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CLIENT_NAME" )]		public String ClientName 
		{ 
		    get { return _clientName; } 
			set 
			{
			    _clientName = value;
			}
        }

		private String _marketingAgreementName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MARKETING_AGREEMENT_NAME" )]		public String MarketingAgreementName 
		{ 
		    get { return _marketingAgreementName; } 
			set 
			{
			    _marketingAgreementName = value;
			}
        }

		private String _storageCondition;
		[DataMember]
		[SqlField(DbType.String, 1024, ColumnName ="STORAGE_CONDITION" )]		public String StorageCondition 
		{ 
		    get { return _storageCondition; } 
			set 
			{
			    _storageCondition = value;
			}
        }

		private String _shelfLife;
		[DataMember]
		[SqlField(DbType.String, 46, ColumnName ="SHELF_LIFE" )]		public String ShelfLife 
		{ 
		    get { return _shelfLife; } 
			set 
			{
			    _shelfLife = value;
			}
        }

		private String _closureSystem;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CLOSURE_SYSTEM" )]		public String ClosureSystem 
		{ 
		    get { return _closureSystem; } 
			set 
			{
			    _closureSystem = value;
			}
        }

		private String _nationalCodeNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NATIONAL_CODE_NUMBER" )]		public String NationalCodeNumber 
		{ 
		    get { return _nationalCodeNumber; } 
			set 
			{
			    _nationalCodeNumber = value;
			}
        }

		private DateTime? _reimbursementAppDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REIMBURSEMENT_APP_DATE" )]		public DateTime? ReimbursementAppDate 
		{ 
		    get { return _reimbursementAppDate; } 
			set 
			{
			    _reimbursementAppDate = value;
			}
        }

		private DateTime? _reimbursementProposalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REIMBURSEMENT_PROPOSAL_DATE" )]		public DateTime? ReimbursementProposalDate 
		{ 
		    get { return _reimbursementProposalDate; } 
			set 
			{
			    _reimbursementProposalDate = value;
			}
        }

		private DateTime? _reimbursementAcceptanceDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REIMBURSEMENT_ACCEPTANCE_DATE" )]		public DateTime? ReimbursementAcceptanceDate 
		{ 
		    get { return _reimbursementAcceptanceDate; } 
			set 
			{
			    _reimbursementAcceptanceDate = value;
			}
        }

		private DateTime? _reimbursementFinalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REIMBURSEMENT_FINAL_DATE" )]		public DateTime? ReimbursementFinalDate 
		{ 
		    get { return _reimbursementFinalDate; } 
			set 
			{
			    _reimbursementFinalDate = value;
			}
        }

		private String _reimbursementComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="REIMBURSEMENT_COMMENTS" )]		public String ReimbursementComments 
		{ 
		    get { return _reimbursementComments; } 
			set 
			{
			    _reimbursementComments = value;
			}
        }

		private String _medraVersionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MEDRA_VERSION_NAME" )]		public String MedraVersionName 
		{ 
		    get { return _medraVersionName; } 
			set 
			{
			    _medraVersionName = value;
			}
        }

		private String _lltFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="LLT_FULL_NAME" )]		public String LltFullName 
		{ 
		    get { return _lltFullName; } 
			set 
			{
			    _lltFullName = value;
			}
        }

		private String _ptFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="PT_FULL_NAME" )]		public String PtFullName 
		{ 
		    get { return _ptFullName; } 
			set 
			{
			    _ptFullName = value;
			}
        }

		private String _hltFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="HLT_FULL_NAME" )]		public String HltFullName 
		{ 
		    get { return _hltFullName; } 
			set 
			{
			    _hltFullName = value;
			}
        }

		private String _hlgtFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="HLGT_FULL_NAME" )]		public String HlgtFullName 
		{ 
		    get { return _hlgtFullName; } 
			set 
			{
			    _hlgtFullName = value;
			}
        }

		private String _socFullName;
		[DataMember]
		[SqlField(DbType.String, 171, ColumnName ="SOC_FULL_NAME" )]		public String SocFullName 
		{ 
		    get { return _socFullName; } 
			set 
			{
			    _socFullName = value;
			}
        }

		private String _processType;
		[DataMember]
		[SqlField(DbType.String, 12, ColumnName ="PROCESS_TYPE" )]		public String ProcessType 
		{ 
		    get { return _processType; } 
			set 
			{
			    _processType = value;
			}
        }

		private String _dpManufacturer;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="DP_MANUFACTURER" )]		public String DpManufacturer 
		{ 
		    get { return _dpManufacturer; } 
			set 
			{
			    _dpManufacturer = value;
			}
        }

		private String _manufacturingProcessName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURING_PROCESS_NAME" )]		public String ManufacturingProcessName 
		{ 
		    get { return _manufacturingProcessName; } 
			set 
			{
			    _manufacturingProcessName = value;
			}
        }

		private String _batchSize;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="BATCH_SIZE" )]		public String BatchSize 
		{ 
		    get { return _batchSize; } 
			set 
			{
			    _batchSize = value;
			}
        }

		private String _manufacturerFunctionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MANUFACTURER_FUNCTION_NAME" )]		public String ManufacturerFunctionName 
		{ 
		    get { return _manufacturerFunctionName; } 
			set 
			{
			    _manufacturerFunctionName = value;
			}
        }

		private String _holdingTimeValue;
		[DataMember]
		[SqlField(DbType.String, 6, ColumnName ="HOLDING_TIME_VALUE" )]		public String HoldingTimeValue 
		{ 
		    get { return _holdingTimeValue; } 
			set 
			{
			    _holdingTimeValue = value;
			}
        }

		private String _analyticResultsIncluded;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ANALYTIC_RESULTS_INCLUDED" )]		public String AnalyticResultsIncluded 
		{ 
		    get { return _analyticResultsIncluded; } 
			set 
			{
			    _analyticResultsIncluded = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1670, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _dmfVersion;
		[DataMember]
		[SqlField(DbType.String, 140, ColumnName ="DMF_VERSION" )]		public String DmfVersion 
		{ 
		    get { return _dmfVersion; } 
			set 
			{
			    _dmfVersion = value;
			}
        }

		private String _inForce;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="IN_FORCE" )]		public String InForce 
		{ 
		    get { return _inForce; } 
			set 
			{
			    _inForce = value;
			}
        }

		private String _isDossierAudited;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="IS_DOSSIER_AUDITED" )]		public String IsDossierAudited 
		{ 
		    get { return _isDossierAudited; } 
			set 
			{
			    _isDossierAudited = value;
			}
        }

		private DateTime? _dossierAuditedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DOSSIER_AUDITED_DATE" )]		public DateTime? DossierAuditedDate 
		{ 
		    get { return _dossierAuditedDate; } 
			set 
			{
			    _dossierAuditedDate = value;
			}
        }

		private DateTime? _dossierRequestDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DOSSIER_REQUEST_DATE" )]		public DateTime? DossierRequestDate 
		{ 
		    get { return _dossierRequestDate; } 
			set 
			{
			    _dossierRequestDate = value;
			}
        }

		private DateTime? _dispatchExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DISPATCH_EXPECTED_DATE" )]		public DateTime? DispatchExpectedDate 
		{ 
		    get { return _dispatchExpectedDate; } 
			set 
			{
			    _dispatchExpectedDate = value;
			}
        }

		private DateTime? _submissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DATE" )]		public DateTime? SubmissionDate 
		{ 
		    get { return _submissionDate; } 
			set 
			{
			    _submissionDate = value;
			}
        }

		private DateTime? _submissionDeadlineDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DEADLINE_DATE" )]		public DateTime? SubmissionDeadlineDate 
		{ 
		    get { return _submissionDeadlineDate; } 
			set 
			{
			    _submissionDeadlineDate = value;
			}
        }

		private DateTime? _submissionExpectedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_EXPECTED_DATE" )]		public DateTime? SubmissionExpectedDate 
		{ 
		    get { return _submissionExpectedDate; } 
			set 
			{
			    _submissionExpectedDate = value;
			}
        }

		private String _provisionalNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PROVISIONAL_NUMBER" )]		public String ProvisionalNumber 
		{ 
		    get { return _provisionalNumber; } 
			set 
			{
			    _provisionalNumber = value;
			}
        }

		private DateTime? _approvalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="APPROVAL_DATE" )]		public DateTime? ApprovalDate 
		{ 
		    get { return _approvalDate; } 
			set 
			{
			    _approvalDate = value;
			}
        }

		private DateTime? _dismissalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DISMISSAL_DATE" )]		public DateTime? DismissalDate 
		{ 
		    get { return _dismissalDate; } 
			set 
			{
			    _dismissalDate = value;
			}
        }

		private DateTime? _refusalDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REFUSAL_DATE" )]		public DateTime? RefusalDate 
		{ 
		    get { return _refusalDate; } 
			set 
			{
			    _refusalDate = value;
			}
        }

		private Decimal? _taxValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TAX_VALUE" )]		public Decimal? TaxValue 
		{ 
		    get { return _taxValue; } 
			set 
			{
			    _taxValue = value;
			}
        }

		private String _currencyName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="CURRENCY_NAME" )]		public String CurrencyName 
		{ 
		    get { return _currencyName; } 
			set 
			{
			    _currencyName = value;
			}
        }

		private String _isNormonPayer;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="IS_NORMON_PAYER" )]		public String IsNormonPayer 
		{ 
		    get { return _isNormonPayer; } 
			set 
			{
			    _isNormonPayer = value;
			}
        }

		private String _ccCode;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="CC_CODE" )]		public String CcCode 
		{ 
		    get { return _ccCode; } 
			set 
			{
			    _ccCode = value;
			}
        }

		private String _currentMarketingStatus;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CURRENT_MARKETING_STATUS" )]		public String CurrentMarketingStatus 
		{ 
		    get { return _currentMarketingStatus; } 
			set 
			{
			    _currentMarketingStatus = value;
			}
        }

		private DateTime? _patentExpiryDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="PATENT_EXPIRY_DATE" )]		public DateTime? PatentExpiryDate 
		{ 
		    get { return _patentExpiryDate; } 
			set 
			{
			    _patentExpiryDate = value;
			}
        }

		private DateTime? _launchDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LAUNCH_DATE" )]		public DateTime? LaunchDate 
		{ 
		    get { return _launchDate; } 
			set 
			{
			    _launchDate = value;
			}
        }

		private String _marketingInfoComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="MARKETING_INFO_COMMENTS" )]		public String MarketingInfoComments 
		{ 
		    get { return _marketingInfoComments; } 
			set 
			{
			    _marketingInfoComments = value;
			}
        }

		private String _medicinalProductName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="MEDICINAL_PRODUCT_NAME" )]		public String MedicinalProductName 
		{ 
		    get { return _medicinalProductName; } 
			set 
			{
			    _medicinalProductName = value;
			}
        }

		private String _medicinalProductBe;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MEDICINAL_PRODUCT_BE" )]		public String MedicinalProductBe 
		{ 
		    get { return _medicinalProductBe; } 
			set 
			{
			    _medicinalProductBe = value;
			}
        }

		private String _referenceMedicinalProduct;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="REFERENCE_MEDICINAL_PRODUCT" )]		public String ReferenceMedicinalProduct 
		{ 
		    get { return _referenceMedicinalProduct; } 
			set 
			{
			    _referenceMedicinalProduct = value;
			}
        }

		private String _legaBasisValue;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="LEGA_BASIS_VALUE" )]		public String LegaBasisValue 
		{ 
		    get { return _legaBasisValue; } 
			set 
			{
			    _legaBasisValue = value;
			}
        }

		private String _adminPharmaceuticalForm;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="ADMIN_PHARMACEUTICAL_FORM" )]		public String AdminPharmaceuticalForm 
		{ 
		    get { return _adminPharmaceuticalForm; } 
			set 
			{
			    _adminPharmaceuticalForm = value;
			}
        }

		private String _futureClient;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="FUTURE_CLIENT" )]		public String FutureClient 
		{ 
		    get { return _futureClient; } 
			set 
			{
			    _futureClient = value;
			}
        }

		private String _dossierCopyName;
		[DataMember]
		[SqlField(DbType.String, 10, ColumnName ="DOSSIER_COPY_NAME" )]		public String DossierCopyName 
		{ 
		    get { return _dossierCopyName; } 
			set 
			{
			    _dossierCopyName = value;
			}
        }

		private String _containerVolumeName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CONTAINER_VOLUME_NAME" )]		public String ContainerVolumeName 
		{ 
		    get { return _containerVolumeName; } 
			set 
			{
			    _containerVolumeName = value;
			}
        }

		private DateTime? _dossierValidationDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DOSSIER_VALIDATION_DATE" )]		public DateTime? DossierValidationDate 
		{ 
		    get { return _dossierValidationDate; } 
			set 
			{
			    _dossierValidationDate = value;
			}
        }

		private DateTime? _day106;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DAY_106" )]		public DateTime? Day106 
		{ 
		    get { return _day106; } 
			set 
			{
			    _day106 = value;
			}
        }

		private DateTime? _dismissalGrantDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DISMISSAL_GRANT_DATE" )]		public DateTime? DismissalGrantDate 
		{ 
		    get { return _dismissalGrantDate; } 
			set 
			{
			    _dismissalGrantDate = value;
			}
        }

		private DateTime? _exclusivityDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="EXCLUSIVITY_DATE" )]		public DateTime? ExclusivityDate 
		{ 
		    get { return _exclusivityDate; } 
			set 
			{
			    _exclusivityDate = value;
			}
        }


	}

	public partial class DossierExcelFieldRepository : Repository<DossierExcelField> 
	{
		public DossierExcelFieldRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class DossierExcelFieldFields
	{
		public const string DossierId = "DossierId";
		public const string ProductName = "ProductName";
		public const string GroupName = "GroupName";
		public const string AuthorisationProcedureValue = "AuthorisationProcedureValue";
		public const string CountryFullName = "CountryFullName";
		public const string RmsCountry = "RmsCountry";
		public const string LocalNumber = "LocalNumber";
		public const string MktAuthNumber = "MktAuthNumber";
		public const string Evcode = "Evcode";
		public const string MktStatus = "MktStatus";
		public const string PresentationName = "PresentationName";
		public const string ProcNumber = "ProcNumber";
		public const string RouteOfAdministrationValue = "RouteOfAdministrationValue";
		public const string DispensingClassificationName = "DispensingClassificationName";
		public const string AntiTamperingDevice = "AntiTamperingDevice";
		public const string UniqueIdentifier = "UniqueIdentifier";
		public const string MahName = "MahName";
		public const string ProviderName = "ProviderName";
		public const string ClientName = "ClientName";
		public const string MarketingAgreementName = "MarketingAgreementName";
		public const string StorageCondition = "StorageCondition";
		public const string ShelfLife = "ShelfLife";
		public const string ClosureSystem = "ClosureSystem";
		public const string NationalCodeNumber = "NationalCodeNumber";
		public const string ReimbursementAppDate = "ReimbursementAppDate";
		public const string ReimbursementProposalDate = "ReimbursementProposalDate";
		public const string ReimbursementAcceptanceDate = "ReimbursementAcceptanceDate";
		public const string ReimbursementFinalDate = "ReimbursementFinalDate";
		public const string ReimbursementComments = "ReimbursementComments";
		public const string MedraVersionName = "MedraVersionName";
		public const string LltFullName = "LltFullName";
		public const string PtFullName = "PtFullName";
		public const string HltFullName = "HltFullName";
		public const string HlgtFullName = "HlgtFullName";
		public const string SocFullName = "SocFullName";
		public const string ProcessType = "ProcessType";
		public const string DpManufacturer = "DpManufacturer";
		public const string ManufacturingProcessName = "ManufacturingProcessName";
		public const string BatchSize = "BatchSize";
		public const string ManufacturerFunctionName = "ManufacturerFunctionName";
		public const string HoldingTimeValue = "HoldingTimeValue";
		public const string AnalyticResultsIncluded = "AnalyticResultsIncluded";
		public const string SubstanceName = "SubstanceName";
		public const string DmfVersion = "DmfVersion";
		public const string InForce = "InForce";
		public const string IsDossierAudited = "IsDossierAudited";
		public const string DossierAuditedDate = "DossierAuditedDate";
		public const string DossierRequestDate = "DossierRequestDate";
		public const string DispatchExpectedDate = "DispatchExpectedDate";
		public const string SubmissionDate = "SubmissionDate";
		public const string SubmissionDeadlineDate = "SubmissionDeadlineDate";
		public const string SubmissionExpectedDate = "SubmissionExpectedDate";
		public const string ProvisionalNumber = "ProvisionalNumber";
		public const string ApprovalDate = "ApprovalDate";
		public const string DismissalDate = "DismissalDate";
		public const string RefusalDate = "RefusalDate";
		public const string TaxValue = "TaxValue";
		public const string CurrencyName = "CurrencyName";
		public const string IsNormonPayer = "IsNormonPayer";
		public const string CcCode = "CcCode";
		public const string CurrentMarketingStatus = "CurrentMarketingStatus";
		public const string PatentExpiryDate = "PatentExpiryDate";
		public const string LaunchDate = "LaunchDate";
		public const string MarketingInfoComments = "MarketingInfoComments";
		public const string MedicinalProductName = "MedicinalProductName";
		public const string MedicinalProductBe = "MedicinalProductBe";
		public const string ReferenceMedicinalProduct = "ReferenceMedicinalProduct";
		public const string LegaBasisValue = "LegaBasisValue";
		public const string AdminPharmaceuticalForm = "AdminPharmaceuticalForm";
		public const string FutureClient = "FutureClient";
		public const string DossierCopyName = "DossierCopyName";
		public const string ContainerVolumeName = "ContainerVolumeName";
		public const string DossierValidationDate = "DossierValidationDate";
		public const string Day106 = "Day106";
		public const string DismissalGrantDate = "DismissalGrantDate";
		public const string ExclusivityDate = "ExclusivityDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class Antitampering
	{
		private String _antitamperingId;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="ANTITAMPERING_ID" )]		public String AntitamperingId 
		{ 
		    get { return _antitamperingId; } 
			set 
			{
			    _antitamperingId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 7, ColumnName ="NAME" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }


	}

	public partial class AntitamperingRepository : Repository<Antitampering> 
	{
		public AntitamperingRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class AntitamperingFields
	{
		public const string AntitamperingId = "AntitamperingId";
		public const string Name = "Name";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class UniqueIdentifier
	{
		private String _uniqueIdentifierId;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="UNIQUE_IDENTIFIER_ID" )]		public String UniqueIdentifierId 
		{ 
		    get { return _uniqueIdentifierId; } 
			set 
			{
			    _uniqueIdentifierId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 7, ColumnName ="NAME" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }


	}

	public partial class UniqueIdentifierRepository : Repository<UniqueIdentifier> 
	{
		public UniqueIdentifierRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class UniqueIdentifierFields
	{
		public const string UniqueIdentifierId = "UniqueIdentifierId";
		public const string Name = "Name";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="DOSSIER_COUNTRY_PRES_STCS")]
	public partial class DossierCountryPresSct
	{
		private Decimal _dossierCountrySctId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "DOSSIER_COUNTRY_SCT_ID", ColumnName ="DOSSIER_COUNTRY_SCT_ID", BaseColumnName ="DOSSIER_COUNTRY_SCT_ID", BaseTableName = "DOSSIER_COUNTRY_PRES_STCS" )]		public Decimal DossierCountrySctId 
		{ 
		    get { return _dossierCountrySctId; } 
			set 
			{
			    _dossierCountrySctId = value;
			}
        }

		private Decimal _dossierCountryPresId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_PRES_ID", BaseColumnName ="DOSSIER_COUNTRY_PRES_ID", BaseTableName = "DOSSIER_COUNTRY_PRES_STCS" )]		public Decimal DossierCountryPresId 
		{ 
		    get { return _dossierCountryPresId; } 
			set 
			{
			    _dossierCountryPresId = value;
			}
        }

		private Decimal _storageConditionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="STORAGE_CONDITION_ID", BaseColumnName ="STORAGE_CONDITION_ID", BaseTableName = "DOSSIER_COUNTRY_PRES_STCS" )]		public Decimal StorageConditionId 
		{ 
		    get { return _storageConditionId; } 
			set 
			{
			    _storageConditionId = value;
			}
        }


	}

	public partial class DossierCountryPresSctRepository : Repository<DossierCountryPresSct> 
	{
		public DossierCountryPresSctRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public DossierCountryPresSct Get(string projectionName, System.Decimal dossierCountrySctId)
		{
			return ((IRepository<DossierCountryPresSct>)this).Get(projectionName, dossierCountrySctId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPresSct Get(string projectionName, System.Decimal dossierCountrySctId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPresSct>)this).Get(projectionName, dossierCountrySctId, fetchMode);
		}

		public DossierCountryPresSct Get(Projection projection, System.Decimal dossierCountrySctId)
		{
			return ((IRepository<DossierCountryPresSct>)this).Get(projection, dossierCountrySctId, FetchMode.UseIdentityMap);
		}

		public DossierCountryPresSct Get(Projection projection, System.Decimal dossierCountrySctId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<DossierCountryPresSct>)this).Get(projection, dossierCountrySctId, fetchMode);
		}

		public DossierCountryPresSct Get(string projectionName, System.Decimal dossierCountrySctId, params string[] fields)
		{
			return ((IRepository<DossierCountryPresSct>)this).Get(projectionName, dossierCountrySctId, fields);
		}

		public DossierCountryPresSct Get(Projection projection, System.Decimal dossierCountrySctId, params string[] fields)
		{
			return ((IRepository<DossierCountryPresSct>)this).Get(projection, dossierCountrySctId, fields);
		}

		public bool Delete(System.Decimal dossierCountrySctId)
		{
			var entity = new DossierCountryPresSct { DossierCountrySctId = dossierCountrySctId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryPresSctFields
	{
		public const string DossierCountrySctId = "DossierCountrySctId";
		public const string DossierCountryPresId = "DossierCountryPresId";
		public const string StorageConditionId = "StorageConditionId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class BeenAudited
	{
		private String _beenAuditedId;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="BEEN_AUDITED_ID" )]		public String BeenAuditedId 
		{ 
		    get { return _beenAuditedId; } 
			set 
			{
			    _beenAuditedId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="NAME" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }


	}

	public partial class BeenAuditedRepository : Repository<BeenAudited> 
	{
		public BeenAuditedRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class BeenAuditedFields
	{
		public const string BeenAuditedId = "BeenAuditedId";
		public const string Name = "Name";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class DossierCountryRpProv
	{
		private Decimal _dossierCountryRpMknumberId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_RP_MKNUMBER_ID" )]		public Decimal DossierCountryRpMknumberId 
		{ 
		    get { return _dossierCountryRpMknumberId; } 
			set 
			{
			    _dossierCountryRpMknumberId = value;
			}
        }

		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private Decimal _registrationProcessId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="REGISTRATION_PROCESS_ID" )]		public Decimal RegistrationProcessId 
		{ 
		    get { return _registrationProcessId; } 
			set 
			{
			    _registrationProcessId = value;
			}
        }

		private Decimal _dossierCountryRpId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_RP_ID" )]		public Decimal DossierCountryRpId 
		{ 
		    get { return _dossierCountryRpId; } 
			set 
			{
			    _dossierCountryRpId = value;
			}
        }

		private String _mktNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MKT_NUMBER" )]		public String MktNumber 
		{ 
		    get { return _mktNumber; } 
			set 
			{
			    _mktNumber = value;
			}
        }

		private String _comments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="COMMENTS" )]		public String Comments 
		{ 
		    get { return _comments; } 
			set 
			{
			    _comments = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_ID" )]		public Decimal DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }


	}

	public partial class DossierCountryRpProvRepository : Repository<DossierCountryRpProv> 
	{
		public DossierCountryRpProvRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class DossierCountryRpProvFields
	{
		public const string DossierCountryRpMknumberId = "DossierCountryRpMknumberId";
		public const string DossierCountryId = "DossierCountryId";
		public const string RegistrationProcessId = "RegistrationProcessId";
		public const string DossierCountryRpId = "DossierCountryRpId";
		public const string MktNumber = "MktNumber";
		public const string Comments = "Comments";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierId = "DossierId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class CurrentMarketingStatus
	{
		private String _currentMarketingStatusId;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="CURRENT_MARKETING_STATUS_ID" )]		public String CurrentMarketingStatusId 
		{ 
		    get { return _currentMarketingStatusId; } 
			set 
			{
			    _currentMarketingStatusId = value;
			}
        }

		private String _currentMarketingStatusName;
		[DataMember]
		[SqlField(DbType.String, 12, ColumnName ="CURRENT_MARKETING_STATUS_NAME" )]		public String CurrentMarketingStatusName 
		{ 
		    get { return _currentMarketingStatusName; } 
			set 
			{
			    _currentMarketingStatusName = value;
			}
        }


	}

	public partial class CurrentMarketingStatusRepository : Repository<CurrentMarketingStatus> 
	{
		public CurrentMarketingStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class CurrentMarketingStatusFields
	{
		public const string CurrentMarketingStatusId = "CurrentMarketingStatusId";
		public const string CurrentMarketingStatusName = "CurrentMarketingStatusName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="SID_ATC_CODES")]
	public partial class SidAtcCode
	{
		private Decimal _sidAtcCodeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "SID_ATC_CODE_ID", ColumnName ="SID_ATC_CODE_ID", BaseColumnName ="SID_ATC_CODE_ID", BaseTableName = "SID_ATC_CODES" )]		public Decimal SidAtcCodeId 
		{ 
		    get { return _sidAtcCodeId; } 
			set 
			{
			    _sidAtcCodeId = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "SID_ATC_CODES" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _value;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="VALUE", BaseColumnName ="VALUE", BaseTableName = "SID_ATC_CODES" )]		public String Value 
		{ 
		    get { return _value; } 
			set 
			{
			    _value = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="DESCRIPTION", BaseColumnName ="DESCRIPTION", BaseTableName = "SID_ATC_CODES" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "SID_ATC_CODES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "SID_ATC_CODES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "SID_ATC_CODES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "SID_ATC_CODES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class SidAtcCodeRepository : Repository<SidAtcCode> 
	{
		public SidAtcCodeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public SidAtcCode Get(string projectionName, System.Decimal sidAtcCodeId)
		{
			return ((IRepository<SidAtcCode>)this).Get(projectionName, sidAtcCodeId, FetchMode.UseIdentityMap);
		}

		public SidAtcCode Get(string projectionName, System.Decimal sidAtcCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SidAtcCode>)this).Get(projectionName, sidAtcCodeId, fetchMode);
		}

		public SidAtcCode Get(Projection projection, System.Decimal sidAtcCodeId)
		{
			return ((IRepository<SidAtcCode>)this).Get(projection, sidAtcCodeId, FetchMode.UseIdentityMap);
		}

		public SidAtcCode Get(Projection projection, System.Decimal sidAtcCodeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SidAtcCode>)this).Get(projection, sidAtcCodeId, fetchMode);
		}

		public SidAtcCode Get(string projectionName, System.Decimal sidAtcCodeId, params string[] fields)
		{
			return ((IRepository<SidAtcCode>)this).Get(projectionName, sidAtcCodeId, fields);
		}

		public SidAtcCode Get(Projection projection, System.Decimal sidAtcCodeId, params string[] fields)
		{
			return ((IRepository<SidAtcCode>)this).Get(projection, sidAtcCodeId, fields);
		}

		public bool Delete(System.Decimal sidAtcCodeId)
		{
			var entity = new SidAtcCode { SidAtcCodeId = sidAtcCodeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class SidAtcCodeFields
	{
		public const string SidAtcCodeId = "SidAtcCodeId";
		public const string XevmpdCode = "XevmpdCode";
		public const string Value = "Value";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class ApiExcelField
	{
		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _activeSubstanceComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ACTIVE_SUBSTANCE_COMMENTS" )]		public String ActiveSubstanceComments 
		{ 
		    get { return _activeSubstanceComments; } 
			set 
			{
			    _activeSubstanceComments = value;
			}
        }

		private String _apiManufacturer;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="API_MANUFACTURER" )]		public String ApiManufacturer 
		{ 
		    get { return _apiManufacturer; } 
			set 
			{
			    _apiManufacturer = value;
			}
        }

		private String _rossCode;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="ROSS_CODE" )]		public String RossCode 
		{ 
		    get { return _rossCode; } 
			set 
			{
			    _rossCode = value;
			}
        }

		private String _rossCodeComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="ROSS_CODE_COMMENTS" )]		public String RossCodeComments 
		{ 
		    get { return _rossCodeComments; } 
			set 
			{
			    _rossCodeComments = value;
			}
        }

		private String _versionTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION_TYPE_NAME" )]		public String VersionTypeName 
		{ 
		    get { return _versionTypeName; } 
			set 
			{
			    _versionTypeName = value;
			}
        }

		private String _version;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="VERSION" )]		public String Version 
		{ 
		    get { return _version; } 
			set 
			{
			    _version = value;
			}
        }

		private DateTime? _versionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="VERSION_DATE" )]		public DateTime? VersionDate 
		{ 
		    get { return _versionDate; } 
			set 
			{
			    _versionDate = value;
			}
        }

		private String _versionComments;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="VERSION_COMMENTS" )]		public String VersionComments 
		{ 
		    get { return _versionComments; } 
			set 
			{
			    _versionComments = value;
			}
        }

		private String _impliedManufacturer;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="IMPLIED_MANUFACTURER" )]		public String ImpliedManufacturer 
		{ 
		    get { return _impliedManufacturer; } 
			set 
			{
			    _impliedManufacturer = value;
			}
        }

		private String _manufacturerFunction;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MANUFACTURER_FUNCTION" )]		public String ManufacturerFunction 
		{ 
		    get { return _manufacturerFunction; } 
			set 
			{
			    _manufacturerFunction = value;
			}
        }

		private String _packagingMaterial;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="PACKAGING_MATERIAL" )]		public String PackagingMaterial 
		{ 
		    get { return _packagingMaterial; } 
			set 
			{
			    _packagingMaterial = value;
			}
        }

		private String _retest;
		[DataMember]
		[SqlField(DbType.String, 46, ColumnName ="RETEST" )]		public String Retest 
		{ 
		    get { return _retest; } 
			set 
			{
			    _retest = value;
			}
        }

		private String _shelfLife;
		[DataMember]
		[SqlField(DbType.String, 46, ColumnName ="SHELF_LIFE" )]		public String ShelfLife 
		{ 
		    get { return _shelfLife; } 
			set 
			{
			    _shelfLife = value;
			}
        }

		private String _retestMeasurement;
		[DataMember]
		[SqlField(DbType.String, 5, ColumnName ="RETEST_MEASUREMENT" )]		public String RetestMeasurement 
		{ 
		    get { return _retestMeasurement; } 
			set 
			{
			    _retestMeasurement = value;
			}
        }

		private String _shelfLifeMeasurement;
		[DataMember]
		[SqlField(DbType.String, 5, ColumnName ="SHELF_LIFE_MEASUREMENT" )]		public String ShelfLifeMeasurement 
		{ 
		    get { return _shelfLifeMeasurement; } 
			set 
			{
			    _shelfLifeMeasurement = value;
			}
        }

		private String _address;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="ADDRESS" )]		public String Address 
		{ 
		    get { return _address; } 
			set 
			{
			    _address = value;
			}
        }


	}

	public partial class ApiExcelFieldRepository : Repository<ApiExcelField> 
	{
		public ApiExcelFieldRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class ApiExcelFieldFields
	{
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string XevmpdCode = "XevmpdCode";
		public const string SubstanceName = "SubstanceName";
		public const string ActiveSubstanceComments = "ActiveSubstanceComments";
		public const string ApiManufacturer = "ApiManufacturer";
		public const string RossCode = "RossCode";
		public const string RossCodeComments = "RossCodeComments";
		public const string VersionTypeName = "VersionTypeName";
		public const string Version = "Version";
		public const string VersionDate = "VersionDate";
		public const string VersionComments = "VersionComments";
		public const string ImpliedManufacturer = "ImpliedManufacturer";
		public const string ManufacturerFunction = "ManufacturerFunction";
		public const string PackagingMaterial = "PackagingMaterial";
		public const string Retest = "Retest";
		public const string ShelfLife = "ShelfLife";
		public const string RetestMeasurement = "RetestMeasurement";
		public const string ShelfLifeMeasurement = "ShelfLifeMeasurement";
		public const string Address = "Address";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MODIFICATION_COUNTRY_MOCKUPS")]
	public partial class ModificationCountryMockup
	{
		private Decimal _modificationCountryMockupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MODIFICATION_COUNTRY_MOCKUP_ID", ColumnName ="MODIFICATION_COUNTRY_MOCKUP_ID", BaseColumnName ="MODIFICATION_COUNTRY_MOCKUP_ID", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public Decimal ModificationCountryMockupId 
		{ 
		    get { return _modificationCountryMockupId; } 
			set 
			{
			    _modificationCountryMockupId = value;
			}
        }

		private DateTime? _nationalSubmission;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="NATIONAL_SUBMISSION", BaseColumnName ="NATIONAL_SUBMISSION", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public DateTime? NationalSubmission 
		{ 
		    get { return _nationalSubmission; } 
			set 
			{
			    _nationalSubmission = value;
			}
        }

		private DateTime? _finalNationalSubmission;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FINAL_NATIONAL_SUBMISSION", BaseColumnName ="FINAL_NATIONAL_SUBMISSION", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public DateTime? FinalNationalSubmission 
		{ 
		    get { return _finalNationalSubmission; } 
			set 
			{
			    _finalNationalSubmission = value;
			}
        }

		private DateTime? _nationalAuthorityComments;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="NATIONAL_AUTHORITY_COMMENTS", BaseColumnName ="NATIONAL_AUTHORITY_COMMENTS", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public DateTime? NationalAuthorityComments 
		{ 
		    get { return _nationalAuthorityComments; } 
			set 
			{
			    _nationalAuthorityComments = value;
			}
        }

		private String _isNaDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DATE", BaseColumnName ="IS_NA_DATE", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public String IsNaDate 
		{ 
		    get { return _isNaDate; } 
			set 
			{
			    _isNaDate = value;
			}
        }

		private Decimal? _modificationCountryAppId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFICATION_COUNTRY_APP_ID", BaseColumnName ="MODIFICATION_COUNTRY_APP_ID", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public Decimal? ModificationCountryAppId 
		{ 
		    get { return _modificationCountryAppId; } 
			set 
			{
			    _modificationCountryAppId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _reminderDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REMINDER_DATE", BaseColumnName ="REMINDER_DATE", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public DateTime? ReminderDate 
		{ 
		    get { return _reminderDate; } 
			set 
			{
			    _reminderDate = value;
			}
        }

		private String _groupingCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="GROUPING_CODE", BaseColumnName ="GROUPING_CODE", BaseTableName = "MODIFICATION_COUNTRY_MOCKUPS" )]		public String GroupingCode 
		{ 
		    get { return _groupingCode; } 
			set 
			{
			    _groupingCode = value;
			}
        }


	}

	public partial class ModificationCountryMockupRepository : Repository<ModificationCountryMockup> 
	{
		public ModificationCountryMockupRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ModificationCountryMockup Get(string projectionName, System.Decimal modificationCountryMockupId)
		{
			return ((IRepository<ModificationCountryMockup>)this).Get(projectionName, modificationCountryMockupId, FetchMode.UseIdentityMap);
		}

		public ModificationCountryMockup Get(string projectionName, System.Decimal modificationCountryMockupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCountryMockup>)this).Get(projectionName, modificationCountryMockupId, fetchMode);
		}

		public ModificationCountryMockup Get(Projection projection, System.Decimal modificationCountryMockupId)
		{
			return ((IRepository<ModificationCountryMockup>)this).Get(projection, modificationCountryMockupId, FetchMode.UseIdentityMap);
		}

		public ModificationCountryMockup Get(Projection projection, System.Decimal modificationCountryMockupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ModificationCountryMockup>)this).Get(projection, modificationCountryMockupId, fetchMode);
		}

		public ModificationCountryMockup Get(string projectionName, System.Decimal modificationCountryMockupId, params string[] fields)
		{
			return ((IRepository<ModificationCountryMockup>)this).Get(projectionName, modificationCountryMockupId, fields);
		}

		public ModificationCountryMockup Get(Projection projection, System.Decimal modificationCountryMockupId, params string[] fields)
		{
			return ((IRepository<ModificationCountryMockup>)this).Get(projection, modificationCountryMockupId, fields);
		}

		public bool Delete(System.Decimal modificationCountryMockupId)
		{
			var entity = new ModificationCountryMockup { ModificationCountryMockupId = modificationCountryMockupId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationCountryMockupFields
	{
		public const string ModificationCountryMockupId = "ModificationCountryMockupId";
		public const string NationalSubmission = "NationalSubmission";
		public const string FinalNationalSubmission = "FinalNationalSubmission";
		public const string NationalAuthorityComments = "NationalAuthorityComments";
		public const string IsNaDate = "IsNaDate";
		public const string ModificationCountryAppId = "ModificationCountryAppId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ReminderDate = "ReminderDate";
		public const string GroupingCode = "GroupingCode";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class ModificationExcelField
	{
		private Decimal _modificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_ID" )]		public Decimal ModificationId 
		{ 
		    get { return _modificationId; } 
			set 
			{
			    _modificationId = value;
			}
        }

		private String _modificationCategoryName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATION_CATEGORY_NAME" )]		public String ModificationCategoryName 
		{ 
		    get { return _modificationCategoryName; } 
			set 
			{
			    _modificationCategoryName = value;
			}
        }

		private String _changeDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CHANGE_DESCRIPTION" )]		public String ChangeDescription 
		{ 
		    get { return _changeDescription; } 
			set 
			{
			    _changeDescription = value;
			}
        }

		private String _code;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CODE" )]		public String Code 
		{ 
		    get { return _code; } 
			set 
			{
			    _code = value;
			}
        }

		private String _groupingNumber;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="GROUPING_NUMBER" )]		public String GroupingNumber 
		{ 
		    get { return _groupingNumber; } 
			set 
			{
			    _groupingNumber = value;
			}
        }

		private String _medicinalProductName;
		[DataMember]
		[SqlField(DbType.String, 512, ProviderType=119, ColumnName ="MEDICINAL_PRODUCT_NAME" )]		public String MedicinalProductName 
		{ 
		    get { return _medicinalProductName; } 
			set 
			{
			    _medicinalProductName = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 43, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }

		private String _modificationTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MODIFICATION_TYPE_NAME" )]		public String ModificationTypeName 
		{ 
		    get { return _modificationTypeName; } 
			set 
			{
			    _modificationTypeName = value;
			}
        }

		private String _affectedInformationName;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="AFFECTED_INFORMATION_NAME" )]		public String AffectedInformationName 
		{ 
		    get { return _affectedInformationName; } 
			set 
			{
			    _affectedInformationName = value;
			}
        }

		private String _classificationVariationName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CLASSIFICATION_VARIATION_NAME" )]		public String ClassificationVariationName 
		{ 
		    get { return _classificationVariationName; } 
			set 
			{
			    _classificationVariationName = value;
			}
        }

		private DateTime? _clientDispatchDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CLIENT_DISPATCH_DATE" )]		public DateTime? ClientDispatchDate 
		{ 
		    get { return _clientDispatchDate; } 
			set 
			{
			    _clientDispatchDate = value;
			}
        }

		private DateTime? _submissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DATE" )]		public DateTime? SubmissionDate 
		{ 
		    get { return _submissionDate; } 
			set 
			{
			    _submissionDate = value;
			}
        }

		private DateTime? _finalOpinionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FINAL_OPINION_DATE" )]		public DateTime? FinalOpinionDate 
		{ 
		    get { return _finalOpinionDate; } 
			set 
			{
			    _finalOpinionDate = value;
			}
        }

		private String _modCountryStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MOD_COUNTRY_STATUS_NAME" )]		public String ModCountryStatusName 
		{ 
		    get { return _modCountryStatusName; } 
			set 
			{
			    _modCountryStatusName = value;
			}
        }

		private DateTime? _decisionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DECISION_DATE" )]		public DateTime? DecisionDate 
		{ 
		    get { return _decisionDate; } 
			set 
			{
			    _decisionDate = value;
			}
        }

		private DateTime? _liftingDispatch;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LIFTING_DISPATCH" )]		public DateTime? LiftingDispatch 
		{ 
		    get { return _liftingDispatch; } 
			set 
			{
			    _liftingDispatch = value;
			}
        }

		private DateTime? _liftingSubmission;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LIFTING_SUBMISSION" )]		public DateTime? LiftingSubmission 
		{ 
		    get { return _liftingSubmission; } 
			set 
			{
			    _liftingSubmission = value;
			}
        }

		private DateTime? _liftingDecisionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="LIFTING_DECISION_DATE" )]		public DateTime? LiftingDecisionDate 
		{ 
		    get { return _liftingDecisionDate; } 
			set 
			{
			    _liftingDecisionDate = value;
			}
        }


	}

	public partial class ModificationExcelFieldRepository : Repository<ModificationExcelField> 
	{
		public ModificationExcelFieldRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class ModificationExcelFieldFields
	{
		public const string ModificationId = "ModificationId";
		public const string ModificationCategoryName = "ModificationCategoryName";
		public const string ChangeDescription = "ChangeDescription";
		public const string Code = "Code";
		public const string GroupingNumber = "GroupingNumber";
		public const string MedicinalProductName = "MedicinalProductName";
		public const string ProductName = "ProductName";
		public const string CountryName = "CountryName";
		public const string ModificationTypeName = "ModificationTypeName";
		public const string AffectedInformationName = "AffectedInformationName";
		public const string ClassificationVariationName = "ClassificationVariationName";
		public const string ClientDispatchDate = "ClientDispatchDate";
		public const string SubmissionDate = "SubmissionDate";
		public const string FinalOpinionDate = "FinalOpinionDate";
		public const string ModCountryStatusName = "ModCountryStatusName";
		public const string DecisionDate = "DecisionDate";
		public const string LiftingDispatch = "LiftingDispatch";
		public const string LiftingSubmission = "LiftingSubmission";
		public const string LiftingDecisionDate = "LiftingDecisionDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="NORMON_CLIENT_DECISIONS")]
	public partial class NormonClientDecision
	{
		private Decimal _normonClientDecisionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="NORMON_CLIENT_DECISION_ID", BaseColumnName ="NORMON_CLIENT_DECISION_ID", BaseTableName = "NORMON_CLIENT_DECISIONS" )]		public Decimal NormonClientDecisionId 
		{ 
		    get { return _normonClientDecisionId; } 
			set 
			{
			    _normonClientDecisionId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME", BaseColumnName ="NAME", BaseTableName = "NORMON_CLIENT_DECISIONS" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }


	}

	public partial class NormonClientDecisionRepository : Repository<NormonClientDecision> 
	{
		public NormonClientDecisionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class NormonClientDecisionFields
	{
		public const string NormonClientDecisionId = "NormonClientDecisionId";
		public const string Name = "Name";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="SUBMISSION_MOCKUPS")]
	public partial class SubmissionMockup
	{
		private Decimal _submissionMockupId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "SUBMISSION_MOCKUP_ID", ColumnName ="SUBMISSION_MOCKUP_ID", BaseColumnName ="SUBMISSION_MOCKUP_ID", BaseTableName = "SUBMISSION_MOCKUPS" )]		public Decimal SubmissionMockupId 
		{ 
		    get { return _submissionMockupId; } 
			set 
			{
			    _submissionMockupId = value;
			}
        }

		private Decimal _modificationSubmissionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_SUBMISSION_ID", BaseColumnName ="MODIFICATION_SUBMISSION_ID", BaseTableName = "SUBMISSION_MOCKUPS" )]		public Decimal ModificationSubmissionId 
		{ 
		    get { return _modificationSubmissionId; } 
			set 
			{
			    _modificationSubmissionId = value;
			}
        }

		private DateTime? _nationalSubmission;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="NATIONAL_SUBMISSION", BaseColumnName ="NATIONAL_SUBMISSION", BaseTableName = "SUBMISSION_MOCKUPS" )]		public DateTime? NationalSubmission 
		{ 
		    get { return _nationalSubmission; } 
			set 
			{
			    _nationalSubmission = value;
			}
        }

		private DateTime? _finalNationalSubmission;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="FINAL_NATIONAL_SUBMISSION", BaseColumnName ="FINAL_NATIONAL_SUBMISSION", BaseTableName = "SUBMISSION_MOCKUPS" )]		public DateTime? FinalNationalSubmission 
		{ 
		    get { return _finalNationalSubmission; } 
			set 
			{
			    _finalNationalSubmission = value;
			}
        }

		private DateTime? _nationalAuthorityComments;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="NATIONAL_AUTHORITY_COMMENTS", BaseColumnName ="NATIONAL_AUTHORITY_COMMENTS", BaseTableName = "SUBMISSION_MOCKUPS" )]		public DateTime? NationalAuthorityComments 
		{ 
		    get { return _nationalAuthorityComments; } 
			set 
			{
			    _nationalAuthorityComments = value;
			}
        }

		private String _isNaDate;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_NA_DATE", BaseColumnName ="IS_NA_DATE", BaseTableName = "SUBMISSION_MOCKUPS" )]		public String IsNaDate 
		{ 
		    get { return _isNaDate; } 
			set 
			{
			    _isNaDate = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "SUBMISSION_MOCKUPS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "SUBMISSION_MOCKUPS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "SUBMISSION_MOCKUPS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "SUBMISSION_MOCKUPS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private DateTime? _reminderDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="REMINDER_DATE", BaseColumnName ="REMINDER_DATE", BaseTableName = "SUBMISSION_MOCKUPS" )]		public DateTime? ReminderDate 
		{ 
		    get { return _reminderDate; } 
			set 
			{
			    _reminderDate = value;
			}
        }


	}

	public partial class SubmissionMockupRepository : Repository<SubmissionMockup> 
	{
		public SubmissionMockupRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public SubmissionMockup Get(string projectionName, System.Decimal submissionMockupId)
		{
			return ((IRepository<SubmissionMockup>)this).Get(projectionName, submissionMockupId, FetchMode.UseIdentityMap);
		}

		public SubmissionMockup Get(string projectionName, System.Decimal submissionMockupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SubmissionMockup>)this).Get(projectionName, submissionMockupId, fetchMode);
		}

		public SubmissionMockup Get(Projection projection, System.Decimal submissionMockupId)
		{
			return ((IRepository<SubmissionMockup>)this).Get(projection, submissionMockupId, FetchMode.UseIdentityMap);
		}

		public SubmissionMockup Get(Projection projection, System.Decimal submissionMockupId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<SubmissionMockup>)this).Get(projection, submissionMockupId, fetchMode);
		}

		public SubmissionMockup Get(string projectionName, System.Decimal submissionMockupId, params string[] fields)
		{
			return ((IRepository<SubmissionMockup>)this).Get(projectionName, submissionMockupId, fields);
		}

		public SubmissionMockup Get(Projection projection, System.Decimal submissionMockupId, params string[] fields)
		{
			return ((IRepository<SubmissionMockup>)this).Get(projection, submissionMockupId, fields);
		}

		public bool Delete(System.Decimal submissionMockupId)
		{
			var entity = new SubmissionMockup { SubmissionMockupId = submissionMockupId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class SubmissionMockupFields
	{
		public const string SubmissionMockupId = "SubmissionMockupId";
		public const string ModificationSubmissionId = "ModificationSubmissionId";
		public const string NationalSubmission = "NationalSubmission";
		public const string FinalNationalSubmission = "FinalNationalSubmission";
		public const string NationalAuthorityComments = "NationalAuthorityComments";
		public const string IsNaDate = "IsNaDate";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ReminderDate = "ReminderDate";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="CONTAINER_VOLUMES")]
	public partial class ContainerVolume
	{
		private Decimal _containerVolumeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "CONTAINER_VOLUME_ID", ColumnName ="CONTAINER_VOLUME_ID", BaseColumnName ="CONTAINER_VOLUME_ID", BaseTableName = "CONTAINER_VOLUMES" )]		public Decimal ContainerVolumeId 
		{ 
		    get { return _containerVolumeId; } 
			set 
			{
			    _containerVolumeId = value;
			}
        }

		private String _containerVolumeName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CONTAINER_VOLUME_NAME", BaseColumnName ="CONTAINER_VOLUME_NAME", BaseTableName = "CONTAINER_VOLUMES" )]		public String ContainerVolumeName 
		{ 
		    get { return _containerVolumeName; } 
			set 
			{
			    _containerVolumeName = value;
			}
        }

		private Single? _containerVolumeValue;
		[DataMember]
		[SqlField(DbType.Single, 22, Precision = 7, Scale=2, AllowNull = true, ColumnName ="CONTAINER_VOLUME_VALUE", BaseColumnName ="CONTAINER_VOLUME_VALUE", BaseTableName = "CONTAINER_VOLUMES" )]		public Single? ContainerVolumeValue 
		{ 
		    get { return _containerVolumeValue; } 
			set 
			{
			    _containerVolumeValue = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "CONTAINER_VOLUMES" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "CONTAINER_VOLUMES" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "CONTAINER_VOLUMES" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "CONTAINER_VOLUMES" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _iterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ITERATIONS" )]		public Decimal? Iterations 
		{ 
		    get { return _iterations; } 
			set 
			{
			    _iterations = value;
			}
        }


	}

	public partial class ContainerVolumeRepository : Repository<ContainerVolume> 
	{
		public ContainerVolumeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public ContainerVolume Get(string projectionName, System.Decimal containerVolumeId)
		{
			return ((IRepository<ContainerVolume>)this).Get(projectionName, containerVolumeId, FetchMode.UseIdentityMap);
		}

		public ContainerVolume Get(string projectionName, System.Decimal containerVolumeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ContainerVolume>)this).Get(projectionName, containerVolumeId, fetchMode);
		}

		public ContainerVolume Get(Projection projection, System.Decimal containerVolumeId)
		{
			return ((IRepository<ContainerVolume>)this).Get(projection, containerVolumeId, FetchMode.UseIdentityMap);
		}

		public ContainerVolume Get(Projection projection, System.Decimal containerVolumeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<ContainerVolume>)this).Get(projection, containerVolumeId, fetchMode);
		}

		public ContainerVolume Get(string projectionName, System.Decimal containerVolumeId, params string[] fields)
		{
			return ((IRepository<ContainerVolume>)this).Get(projectionName, containerVolumeId, fields);
		}

		public ContainerVolume Get(Projection projection, System.Decimal containerVolumeId, params string[] fields)
		{
			return ((IRepository<ContainerVolume>)this).Get(projection, containerVolumeId, fields);
		}

		public bool Delete(System.Decimal containerVolumeId)
		{
			var entity = new ContainerVolume { ContainerVolumeId = containerVolumeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class ContainerVolumeFields
	{
		public const string ContainerVolumeId = "ContainerVolumeId";
		public const string ContainerVolumeName = "ContainerVolumeName";
		public const string ContainerVolumeValue = "ContainerVolumeValue";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string Iterations = "Iterations";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="TASK_TYPES")]
	public partial class TaskType
	{
		private Decimal _taskTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "TASK_TYPE_ID", ColumnName ="TASK_TYPE_ID", BaseColumnName ="TASK_TYPE_ID", BaseTableName = "TASK_TYPES" )]		public Decimal TaskTypeId 
		{ 
		    get { return _taskTypeId; } 
			set 
			{
			    _taskTypeId = value;
			}
        }

		private String _taskTypeDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="TASK_TYPE_DESCRIPTION", BaseColumnName ="TASK_TYPE_DESCRIPTION", BaseTableName = "TASK_TYPES" )]		public String TaskTypeDescription 
		{ 
		    get { return _taskTypeDescription; } 
			set 
			{
			    _taskTypeDescription = value;
			}
        }

		private String _isForDossier;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_DOSSIER", BaseColumnName ="IS_FOR_DOSSIER", BaseTableName = "TASK_TYPES" )]		public String IsForDossier 
		{ 
		    get { return _isForDossier; } 
			set 
			{
			    _isForDossier = value;
			}
        }

		private String _isForVariation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_VARIATION", BaseColumnName ="IS_FOR_VARIATION", BaseTableName = "TASK_TYPES" )]		public String IsForVariation 
		{ 
		    get { return _isForVariation; } 
			set 
			{
			    _isForVariation = value;
			}
        }

		private Decimal? _taskActionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TASK_ACTION_ID", BaseColumnName ="TASK_ACTION_ID", BaseTableName = "TASK_TYPES" )]		public Decimal? TaskActionId 
		{ 
		    get { return _taskActionId; } 
			set 
			{
			    _taskActionId = value;
			}
        }

		private Decimal? _dueDaysCompletion;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DUE_DAYS_COMPLETION", BaseColumnName ="DUE_DAYS_COMPLETION", BaseTableName = "TASK_TYPES" )]		public Decimal? DueDaysCompletion 
		{ 
		    get { return _dueDaysCompletion; } 
			set 
			{
			    _dueDaysCompletion = value;
			}
        }

		private Decimal? _iterations;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="ITERATIONS" )]		public Decimal? Iterations 
		{ 
		    get { return _iterations; } 
			set 
			{
			    _iterations = value;
			}
        }

		private String _taskActionDescription;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="TASK_ACTION_DESCRIPTION" )]		public String TaskActionDescription 
		{ 
		    get { return _taskActionDescription; } 
			set 
			{
			    _taskActionDescription = value;
			}
        }


	}

	public partial class TaskTypeRepository : Repository<TaskType> 
	{
		public TaskTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public TaskType Get(string projectionName, System.Decimal taskTypeId)
		{
			return ((IRepository<TaskType>)this).Get(projectionName, taskTypeId, FetchMode.UseIdentityMap);
		}

		public TaskType Get(string projectionName, System.Decimal taskTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<TaskType>)this).Get(projectionName, taskTypeId, fetchMode);
		}

		public TaskType Get(Projection projection, System.Decimal taskTypeId)
		{
			return ((IRepository<TaskType>)this).Get(projection, taskTypeId, FetchMode.UseIdentityMap);
		}

		public TaskType Get(Projection projection, System.Decimal taskTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<TaskType>)this).Get(projection, taskTypeId, fetchMode);
		}

		public TaskType Get(string projectionName, System.Decimal taskTypeId, params string[] fields)
		{
			return ((IRepository<TaskType>)this).Get(projectionName, taskTypeId, fields);
		}

		public TaskType Get(Projection projection, System.Decimal taskTypeId, params string[] fields)
		{
			return ((IRepository<TaskType>)this).Get(projection, taskTypeId, fields);
		}

		public bool Delete(System.Decimal taskTypeId)
		{
			var entity = new TaskType { TaskTypeId = taskTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class TaskTypeFields
	{
		public const string TaskTypeId = "TaskTypeId";
		public const string TaskTypeDescription = "TaskTypeDescription";
		public const string IsForDossier = "IsForDossier";
		public const string IsForVariation = "IsForVariation";
		public const string TaskActionId = "TaskActionId";
		public const string DueDaysCompletion = "DueDaysCompletion";
		public const string Iterations = "Iterations";
		public const string TaskActionDescription = "TaskActionDescription";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="TASK_TYPE_AGREEMENTS")]
	public partial class TaskTypeAgreement
	{
		private Decimal _taskTypeAgreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "TASK_TYPE_AGREEMENT_ID", ColumnName ="TASK_TYPE_AGREEMENT_ID", BaseColumnName ="TASK_TYPE_AGREEMENT_ID", BaseTableName = "TASK_TYPE_AGREEMENTS" )]		public Decimal TaskTypeAgreementId 
		{ 
		    get { return _taskTypeAgreementId; } 
			set 
			{
			    _taskTypeAgreementId = value;
			}
        }

		private Decimal _taskTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="TASK_TYPE_ID", BaseColumnName ="TASK_TYPE_ID", BaseTableName = "TASK_TYPE_AGREEMENTS" )]		public Decimal TaskTypeId 
		{ 
		    get { return _taskTypeId; } 
			set 
			{
			    _taskTypeId = value;
			}
        }

		private Decimal _marketingAgreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MARKETING_AGREEMENT_ID", BaseColumnName ="MARKETING_AGREEMENT_ID", BaseTableName = "TASK_TYPE_AGREEMENTS" )]		public Decimal MarketingAgreementId 
		{ 
		    get { return _marketingAgreementId; } 
			set 
			{
			    _marketingAgreementId = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }


	}

	public partial class TaskTypeAgreementRepository : Repository<TaskTypeAgreement> 
	{
		public TaskTypeAgreementRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public TaskTypeAgreement Get(string projectionName, System.Decimal taskTypeAgreementId)
		{
			return ((IRepository<TaskTypeAgreement>)this).Get(projectionName, taskTypeAgreementId, FetchMode.UseIdentityMap);
		}

		public TaskTypeAgreement Get(string projectionName, System.Decimal taskTypeAgreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<TaskTypeAgreement>)this).Get(projectionName, taskTypeAgreementId, fetchMode);
		}

		public TaskTypeAgreement Get(Projection projection, System.Decimal taskTypeAgreementId)
		{
			return ((IRepository<TaskTypeAgreement>)this).Get(projection, taskTypeAgreementId, FetchMode.UseIdentityMap);
		}

		public TaskTypeAgreement Get(Projection projection, System.Decimal taskTypeAgreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<TaskTypeAgreement>)this).Get(projection, taskTypeAgreementId, fetchMode);
		}

		public TaskTypeAgreement Get(string projectionName, System.Decimal taskTypeAgreementId, params string[] fields)
		{
			return ((IRepository<TaskTypeAgreement>)this).Get(projectionName, taskTypeAgreementId, fields);
		}

		public TaskTypeAgreement Get(Projection projection, System.Decimal taskTypeAgreementId, params string[] fields)
		{
			return ((IRepository<TaskTypeAgreement>)this).Get(projection, taskTypeAgreementId, fields);
		}

		public bool Delete(System.Decimal taskTypeAgreementId)
		{
			var entity = new TaskTypeAgreement { TaskTypeAgreementId = taskTypeAgreementId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class TaskTypeAgreementFields
	{
		public const string TaskTypeAgreementId = "TaskTypeAgreementId";
		public const string TaskTypeId = "TaskTypeId";
		public const string MarketingAgreementId = "MarketingAgreementId";
		public const string Description = "Description";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="TASK_ACTIONS")]
	public partial class TaskAction
	{
		private Decimal _taskActionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, ColumnName ="TASK_ACTION_ID", BaseColumnName ="TASK_ACTION_ID", BaseTableName = "TASK_ACTIONS" )]		public Decimal TaskActionId 
		{ 
		    get { return _taskActionId; } 
			set 
			{
			    _taskActionId = value;
			}
        }

		private String _taskActionDescription;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="TASK_ACTION_DESCRIPTION", BaseColumnName ="TASK_ACTION_DESCRIPTION", BaseTableName = "TASK_ACTIONS" )]		public String TaskActionDescription 
		{ 
		    get { return _taskActionDescription; } 
			set 
			{
			    _taskActionDescription = value;
			}
        }

		private String _isForTask;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_TASK", BaseColumnName ="IS_FOR_TASK", BaseTableName = "TASK_ACTIONS" )]		public String IsForTask 
		{ 
		    get { return _isForTask; } 
			set 
			{
			    _isForTask = value;
			}
        }

		private String _isForNotify;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_NOTIFY", BaseColumnName ="IS_FOR_NOTIFY", BaseTableName = "TASK_ACTIONS" )]		public String IsForNotify 
		{ 
		    get { return _isForNotify; } 
			set 
			{
			    _isForNotify = value;
			}
        }

		private String _taskActionHelp;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="TASK_ACTION_HELP", BaseColumnName ="TASK_ACTION_HELP", BaseTableName = "TASK_ACTIONS" )]		public String TaskActionHelp 
		{ 
		    get { return _taskActionHelp; } 
			set 
			{
			    _taskActionHelp = value;
			}
        }


	}

	public partial class TaskActionRepository : Repository<TaskAction> 
	{
		public TaskActionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public TaskAction Get(string projectionName, System.Decimal taskActionId)
		{
			return ((IRepository<TaskAction>)this).Get(projectionName, taskActionId, FetchMode.UseIdentityMap);
		}

		public TaskAction Get(string projectionName, System.Decimal taskActionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<TaskAction>)this).Get(projectionName, taskActionId, fetchMode);
		}

		public TaskAction Get(Projection projection, System.Decimal taskActionId)
		{
			return ((IRepository<TaskAction>)this).Get(projection, taskActionId, FetchMode.UseIdentityMap);
		}

		public TaskAction Get(Projection projection, System.Decimal taskActionId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<TaskAction>)this).Get(projection, taskActionId, fetchMode);
		}

		public TaskAction Get(string projectionName, System.Decimal taskActionId, params string[] fields)
		{
			return ((IRepository<TaskAction>)this).Get(projectionName, taskActionId, fields);
		}

		public TaskAction Get(Projection projection, System.Decimal taskActionId, params string[] fields)
		{
			return ((IRepository<TaskAction>)this).Get(projection, taskActionId, fields);
		}

		public bool Delete(System.Decimal taskActionId)
		{
			var entity = new TaskAction { TaskActionId = taskActionId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class TaskActionFields
	{
		public const string TaskActionId = "TaskActionId";
		public const string TaskActionDescription = "TaskActionDescription";
		public const string IsForTask = "IsForTask";
		public const string IsForNotify = "IsForNotify";
		public const string TaskActionHelp = "TaskActionHelp";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="TASKS")]
	public partial class Task
	{
		private Decimal _taskId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "TASK_ID", ColumnName ="TASK_ID", BaseColumnName ="TASK_ID", BaseTableName = "TASKS" )]		public Decimal TaskId 
		{ 
		    get { return _taskId; } 
			set 
			{
			    _taskId = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID", BaseColumnName ="ITEM_ID", BaseTableName = "TASKS" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private Decimal _itemTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_TYPE_ID", BaseColumnName ="ITEM_TYPE_ID", BaseTableName = "TASKS" )]		public Decimal ItemTypeId 
		{ 
		    get { return _itemTypeId; } 
			set 
			{
			    _itemTypeId = value;
			}
        }

		private String _taskDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="TASK_DESCRIPTION", BaseColumnName ="TASK_DESCRIPTION", BaseTableName = "TASKS" )]		public String TaskDescription 
		{ 
		    get { return _taskDescription; } 
			set 
			{
			    _taskDescription = value;
			}
        }

		private DateTime _startDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="START_DATE", BaseColumnName ="START_DATE", BaseTableName = "TASKS" )]		public DateTime StartDate 
		{ 
		    get { return _startDate; } 
			set 
			{
			    _startDate = value;
			}
        }

		private DateTime? _completionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="COMPLETION_DATE", BaseColumnName ="COMPLETION_DATE", BaseTableName = "TASKS" )]		public DateTime? CompletionDate 
		{ 
		    get { return _completionDate; } 
			set 
			{
			    _completionDate = value;
			}
        }

		private Decimal? _completionUserId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMPLETION_USER_ID", BaseColumnName ="COMPLETION_USER_ID", BaseTableName = "TASKS" )]		public Decimal? CompletionUserId 
		{ 
		    get { return _completionUserId; } 
			set 
			{
			    _completionUserId = value;
			}
        }

		private String _groupId;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="GROUP_ID", BaseColumnName ="GROUP_ID", BaseTableName = "TASKS" )]		public String GroupId 
		{ 
		    get { return _groupId; } 
			set 
			{
			    _groupId = value;
			}
        }

		private Decimal _taskTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="TASK_TYPE_ID", BaseColumnName ="TASK_TYPE_ID", BaseTableName = "TASKS" )]		public Decimal TaskTypeId 
		{ 
		    get { return _taskTypeId; } 
			set 
			{
			    _taskTypeId = value;
			}
        }

		private String _isComplete;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_COMPLETE", BaseColumnName ="IS_COMPLETE", BaseTableName = "TASKS" )]		public String IsComplete 
		{ 
		    get { return _isComplete; } 
			set 
			{
			    _isComplete = value;
			}
        }

		private String _taskActionDescription;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="TASK_ACTION_DESCRIPTION" )]		public String TaskActionDescription 
		{ 
		    get { return _taskActionDescription; } 
			set 
			{
			    _taskActionDescription = value;
			}
        }

		private Decimal _taskActionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="TASK_ACTION_ID" )]		public Decimal TaskActionId 
		{ 
		    get { return _taskActionId; } 
			set 
			{
			    _taskActionId = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }

		private String _changeDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="CHANGE_DESCRIPTION" )]		public String ChangeDescription 
		{ 
		    get { return _changeDescription; } 
			set 
			{
			    _changeDescription = value;
			}
        }

		private Decimal? _dossierId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_ID" )]		public Decimal? DossierId 
		{ 
		    get { return _dossierId; } 
			set 
			{
			    _dossierId = value;
			}
        }

		private Decimal? _dueDaysCompletion;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DUE_DAYS_COMPLETION" )]		public Decimal? DueDaysCompletion 
		{ 
		    get { return _dueDaysCompletion; } 
			set 
			{
			    _dueDaysCompletion = value;
			}
        }

		private String _authorisationProcedureValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="AUTHORISATION_PROCEDURE_VALUE" )]		public String AuthorisationProcedureValue 
		{ 
		    get { return _authorisationProcedureValue; } 
			set 
			{
			    _authorisationProcedureValue = value;
			}
        }

		private String _completionUserName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="COMPLETION_USER_NAME" )]		public String CompletionUserName 
		{ 
		    get { return _completionUserName; } 
			set 
			{
			    _completionUserName = value;
			}
        }


	}

	public partial class TaskRepository : Repository<Task> 
	{
		public TaskRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Task Get(string projectionName, System.Decimal taskId)
		{
			return ((IRepository<Task>)this).Get(projectionName, taskId, FetchMode.UseIdentityMap);
		}

		public Task Get(string projectionName, System.Decimal taskId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Task>)this).Get(projectionName, taskId, fetchMode);
		}

		public Task Get(Projection projection, System.Decimal taskId)
		{
			return ((IRepository<Task>)this).Get(projection, taskId, FetchMode.UseIdentityMap);
		}

		public Task Get(Projection projection, System.Decimal taskId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Task>)this).Get(projection, taskId, fetchMode);
		}

		public Task Get(string projectionName, System.Decimal taskId, params string[] fields)
		{
			return ((IRepository<Task>)this).Get(projectionName, taskId, fields);
		}

		public Task Get(Projection projection, System.Decimal taskId, params string[] fields)
		{
			return ((IRepository<Task>)this).Get(projection, taskId, fields);
		}

		public bool Delete(System.Decimal taskId)
		{
			var entity = new Task { TaskId = taskId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class TaskFields
	{
		public const string TaskId = "TaskId";
		public const string ItemId = "ItemId";
		public const string ItemTypeId = "ItemTypeId";
		public const string TaskDescription = "TaskDescription";
		public const string StartDate = "StartDate";
		public const string CompletionDate = "CompletionDate";
		public const string CompletionUserId = "CompletionUserId";
		public const string GroupId = "GroupId";
		public const string TaskTypeId = "TaskTypeId";
		public const string IsComplete = "IsComplete";
		public const string TaskActionDescription = "TaskActionDescription";
		public const string TaskActionId = "TaskActionId";
		public const string ProductName = "ProductName";
		public const string CountryName = "CountryName";
		public const string TwoLettersCode = "TwoLettersCode";
		public const string ChangeDescription = "ChangeDescription";
		public const string DossierId = "DossierId";
		public const string DueDaysCompletion = "DueDaysCompletion";
		public const string AuthorisationProcedureValue = "AuthorisationProcedureValue";
		public const string CompletionUserName = "CompletionUserName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_INFO_FORMS")]
	public partial class EmaInfoForm
	{
		private Decimal _emaInfoFormId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "EMA_INFO_FORM_ID", ColumnName ="EMA_INFO_FORM_ID", BaseColumnName ="EMA_INFO_FORM_ID", BaseTableName = "EMA_INFO_FORMS" )]		public Decimal EmaInfoFormId 
		{ 
		    get { return _emaInfoFormId; } 
			set 
			{
			    _emaInfoFormId = value;
			}
        }

		private String _formulationName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="FORMULATION_NAME", BaseColumnName ="FORMULATION_NAME", BaseTableName = "EMA_INFO_FORMS" )]		public String FormulationName 
		{ 
		    get { return _formulationName; } 
			set 
			{
			    _formulationName = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "EMA_INFO_FORMS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "EMA_INFO_FORMS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "EMA_INFO_FORMS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "EMA_INFO_FORMS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private Decimal? _dossierCountryEmaInfoId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_COUNTRY_EMA_INFO_ID", BaseColumnName ="DOSSIER_COUNTRY_EMA_INFO_ID", BaseTableName = "EMA_INFO_FORMS" )]		public Decimal? DossierCountryEmaInfoId 
		{ 
		    get { return _dossierCountryEmaInfoId; } 
			set 
			{
			    _dossierCountryEmaInfoId = value;
			}
        }


	}

	public partial class EmaInfoFormRepository : Repository<EmaInfoForm> 
	{
		public EmaInfoFormRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public EmaInfoForm Get(string projectionName, System.Decimal emaInfoFormId)
		{
			return ((IRepository<EmaInfoForm>)this).Get(projectionName, emaInfoFormId, FetchMode.UseIdentityMap);
		}

		public EmaInfoForm Get(string projectionName, System.Decimal emaInfoFormId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<EmaInfoForm>)this).Get(projectionName, emaInfoFormId, fetchMode);
		}

		public EmaInfoForm Get(Projection projection, System.Decimal emaInfoFormId)
		{
			return ((IRepository<EmaInfoForm>)this).Get(projection, emaInfoFormId, FetchMode.UseIdentityMap);
		}

		public EmaInfoForm Get(Projection projection, System.Decimal emaInfoFormId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<EmaInfoForm>)this).Get(projection, emaInfoFormId, fetchMode);
		}

		public EmaInfoForm Get(string projectionName, System.Decimal emaInfoFormId, params string[] fields)
		{
			return ((IRepository<EmaInfoForm>)this).Get(projectionName, emaInfoFormId, fields);
		}

		public EmaInfoForm Get(Projection projection, System.Decimal emaInfoFormId, params string[] fields)
		{
			return ((IRepository<EmaInfoForm>)this).Get(projection, emaInfoFormId, fields);
		}

		public bool Delete(System.Decimal emaInfoFormId)
		{
			var entity = new EmaInfoForm { EmaInfoFormId = emaInfoFormId };
			return this.Delete(entity);
		}

		
		public void DeleteEmaFormulation(Decimal? formId)
		{
            var executor = new StoredProcedureExecutor(this.DataService, true)
            {
                GetCommandFunc = () =>
                {
                    var proc =  Sid.Entities.StoredProcedures.CreateDeleteEmaFormulationProcedure(this.DataService.Connection, this.DataService.EntityLiteProvider.ParameterPrefix);
					proc.Parameters[this.DataService.EntityLiteProvider.ParameterPrefix + "FORM_ID"].Value = formId == null ? (object) DBNull.Value : formId.Value;
                    return proc;
                }
            };

			executor.ExecuteNonQuery();
		}
	}
	[Obsolete("Use nameof instead")]
	public static partial class EmaInfoFormFields
	{
		public const string EmaInfoFormId = "EmaInfoFormId";
		public const string FormulationName = "FormulationName";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string DossierCountryEmaInfoId = "DossierCountryEmaInfoId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="EMA_INFO_FORM_COMPONENTS")]
	public partial class EmaInfoFormComponent
	{
		private Decimal _emaInfoFormComponentId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "EMA_INFO_FORM_COMPONENT_ID", ColumnName ="EMA_INFO_FORM_COMPONENT_ID", BaseColumnName ="EMA_INFO_FORM_COMPONENT_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal EmaInfoFormComponentId 
		{ 
		    get { return _emaInfoFormComponentId; } 
			set 
			{
			    _emaInfoFormComponentId = value;
			}
        }

		private Decimal _emaInfoFormId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="EMA_INFO_FORM_ID", BaseColumnName ="EMA_INFO_FORM_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal EmaInfoFormId 
		{ 
		    get { return _emaInfoFormId; } 
			set 
			{
			    _emaInfoFormId = value;
			}
        }

		private String _xevmpdCode;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="XEVMPD_CODE", BaseColumnName ="XEVMPD_CODE", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String XevmpdCode 
		{ 
		    get { return _xevmpdCode; } 
			set 
			{
			    _xevmpdCode = value;
			}
        }

		private Decimal _componentFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="COMPONENT_FUNCTION_ID", BaseColumnName ="COMPONENT_FUNCTION_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal ComponentFunctionId 
		{ 
		    get { return _componentFunctionId; } 
			set 
			{
			    _componentFunctionId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _concentrationType;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="CONCENTRATION_TYPE", BaseColumnName ="CONCENTRATION_TYPE", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String ConcentrationType 
		{ 
		    get { return _concentrationType; } 
			set 
			{
			    _concentrationType = value;
			}
        }

		private Decimal? _amountValueId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="AMOUNT_VALUE_ID", BaseColumnName ="AMOUNT_VALUE_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal? AmountValueId 
		{ 
		    get { return _amountValueId; } 
			set 
			{
			    _amountValueId = value;
			}
        }

		private String _mandatoryStatement;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="MANDATORY_STATEMENT", BaseColumnName ="MANDATORY_STATEMENT", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String MandatoryStatement 
		{ 
		    get { return _mandatoryStatement; } 
			set 
			{
			    _mandatoryStatement = value;
			}
        }

		private String _origin;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="ORIGIN", BaseColumnName ="ORIGIN", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String Origin 
		{ 
		    get { return _origin; } 
			set 
			{
			    _origin = value;
			}
        }

		private Decimal? _lowLimitNumeratorValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LOW_LIMIT_NUMERATOR_VALUE", BaseColumnName ="LOW_LIMIT_NUMERATOR_VALUE", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal? LowLimitNumeratorValue 
		{ 
		    get { return _lowLimitNumeratorValue; } 
			set 
			{
			    _lowLimitNumeratorValue = value;
			}
        }

		private String _lowLimitNumeratorPrefixId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOW_LIMIT_NUMERATOR_PREFIX_ID", BaseColumnName ="LOW_LIMIT_NUMERATOR_PREFIX_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String LowLimitNumeratorPrefixId 
		{ 
		    get { return _lowLimitNumeratorPrefixId; } 
			set 
			{
			    _lowLimitNumeratorPrefixId = value;
			}
        }

		private String _lowLimitNumeratorUnitId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOW_LIMIT_NUMERATOR_UNIT_ID", BaseColumnName ="LOW_LIMIT_NUMERATOR_UNIT_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String LowLimitNumeratorUnitId 
		{ 
		    get { return _lowLimitNumeratorUnitId; } 
			set 
			{
			    _lowLimitNumeratorUnitId = value;
			}
        }

		private Decimal? _lowLimitDenomValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="LOW_LIMIT_DENOM_VALUE", BaseColumnName ="LOW_LIMIT_DENOM_VALUE", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal? LowLimitDenomValue 
		{ 
		    get { return _lowLimitDenomValue; } 
			set 
			{
			    _lowLimitDenomValue = value;
			}
        }

		private String _lowLimitDenomPrefixId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOW_LIMIT_DENOM_PREFIX_ID", BaseColumnName ="LOW_LIMIT_DENOM_PREFIX_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String LowLimitDenomPrefixId 
		{ 
		    get { return _lowLimitDenomPrefixId; } 
			set 
			{
			    _lowLimitDenomPrefixId = value;
			}
        }

		private String _lowLimitDenomUnitId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="LOW_LIMIT_DENOM_UNIT_ID", BaseColumnName ="LOW_LIMIT_DENOM_UNIT_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String LowLimitDenomUnitId 
		{ 
		    get { return _lowLimitDenomUnitId; } 
			set 
			{
			    _lowLimitDenomUnitId = value;
			}
        }

		private Decimal? _upLimitNumeratorValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="UP_LIMIT_NUMERATOR_VALUE", BaseColumnName ="UP_LIMIT_NUMERATOR_VALUE", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal? UpLimitNumeratorValue 
		{ 
		    get { return _upLimitNumeratorValue; } 
			set 
			{
			    _upLimitNumeratorValue = value;
			}
        }

		private String _upLimitNumeratorPrefixId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="UP_LIMIT_NUMERATOR_PREFIX_ID", BaseColumnName ="UP_LIMIT_NUMERATOR_PREFIX_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String UpLimitNumeratorPrefixId 
		{ 
		    get { return _upLimitNumeratorPrefixId; } 
			set 
			{
			    _upLimitNumeratorPrefixId = value;
			}
        }

		private String _upLimitNumeratorUnitId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="UP_LIMIT_NUMERATOR_UNIT_ID", BaseColumnName ="UP_LIMIT_NUMERATOR_UNIT_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String UpLimitNumeratorUnitId 
		{ 
		    get { return _upLimitNumeratorUnitId; } 
			set 
			{
			    _upLimitNumeratorUnitId = value;
			}
        }

		private Decimal? _upLimitDenomValue;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="UP_LIMIT_DENOM_VALUE", BaseColumnName ="UP_LIMIT_DENOM_VALUE", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal? UpLimitDenomValue 
		{ 
		    get { return _upLimitDenomValue; } 
			set 
			{
			    _upLimitDenomValue = value;
			}
        }

		private String _upLimitDenomPrefixId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="UP_LIMIT_DENOM_PREFIX_ID", BaseColumnName ="UP_LIMIT_DENOM_PREFIX_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String UpLimitDenomPrefixId 
		{ 
		    get { return _upLimitDenomPrefixId; } 
			set 
			{
			    _upLimitDenomPrefixId = value;
			}
        }

		private String _upLimitDenomUnitId;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="UP_LIMIT_DENOM_UNIT_ID", BaseColumnName ="UP_LIMIT_DENOM_UNIT_ID", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String UpLimitDenomUnitId 
		{ 
		    get { return _upLimitDenomUnitId; } 
			set 
			{
			    _upLimitDenomUnitId = value;
			}
        }

		private Decimal? _componentIdr;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMPONENT_IDR", BaseColumnName ="COMPONENT_IDR", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public Decimal? ComponentIdr 
		{ 
		    get { return _componentIdr; } 
			set 
			{
			    _componentIdr = value;
			}
        }

		private String _superName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="SUPER_NAME", BaseColumnName ="SUPER_NAME", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String SuperName 
		{ 
		    get { return _superName; } 
			set 
			{
			    _superName = value;
			}
        }

		private String _isForEma;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_EMA", BaseColumnName ="IS_FOR_EMA", BaseTableName = "EMA_INFO_FORM_COMPONENTS" )]		public String IsForEma 
		{ 
		    get { return _isForEma; } 
			set 
			{
			    _isForEma = value;
			}
        }

		private Decimal? _dossierCountryEmaInfoId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="DOSSIER_COUNTRY_EMA_INFO_ID" )]		public Decimal? DossierCountryEmaInfoId 
		{ 
		    get { return _dossierCountryEmaInfoId; } 
			set 
			{
			    _dossierCountryEmaInfoId = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 1024, ProviderType=119, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }

		private String _componentFunctionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="COMPONENT_FUNCTION_NAME" )]		public String ComponentFunctionName 
		{ 
		    get { return _componentFunctionName; } 
			set 
			{
			    _componentFunctionName = value;
			}
        }

		private String _amountValueName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="AMOUNT_VALUE_NAME" )]		public String AmountValueName 
		{ 
		    get { return _amountValueName; } 
			set 
			{
			    _amountValueName = value;
			}
        }


	}

	public partial class EmaInfoFormComponentRepository : Repository<EmaInfoFormComponent> 
	{
		public EmaInfoFormComponentRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public EmaInfoFormComponent Get(string projectionName, System.Decimal emaInfoFormComponentId)
		{
			return ((IRepository<EmaInfoFormComponent>)this).Get(projectionName, emaInfoFormComponentId, FetchMode.UseIdentityMap);
		}

		public EmaInfoFormComponent Get(string projectionName, System.Decimal emaInfoFormComponentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<EmaInfoFormComponent>)this).Get(projectionName, emaInfoFormComponentId, fetchMode);
		}

		public EmaInfoFormComponent Get(Projection projection, System.Decimal emaInfoFormComponentId)
		{
			return ((IRepository<EmaInfoFormComponent>)this).Get(projection, emaInfoFormComponentId, FetchMode.UseIdentityMap);
		}

		public EmaInfoFormComponent Get(Projection projection, System.Decimal emaInfoFormComponentId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<EmaInfoFormComponent>)this).Get(projection, emaInfoFormComponentId, fetchMode);
		}

		public EmaInfoFormComponent Get(string projectionName, System.Decimal emaInfoFormComponentId, params string[] fields)
		{
			return ((IRepository<EmaInfoFormComponent>)this).Get(projectionName, emaInfoFormComponentId, fields);
		}

		public EmaInfoFormComponent Get(Projection projection, System.Decimal emaInfoFormComponentId, params string[] fields)
		{
			return ((IRepository<EmaInfoFormComponent>)this).Get(projection, emaInfoFormComponentId, fields);
		}

		public bool Delete(System.Decimal emaInfoFormComponentId)
		{
			var entity = new EmaInfoFormComponent { EmaInfoFormComponentId = emaInfoFormComponentId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class EmaInfoFormComponentFields
	{
		public const string EmaInfoFormComponentId = "EmaInfoFormComponentId";
		public const string EmaInfoFormId = "EmaInfoFormId";
		public const string XevmpdCode = "XevmpdCode";
		public const string ComponentFunctionId = "ComponentFunctionId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ConcentrationType = "ConcentrationType";
		public const string AmountValueId = "AmountValueId";
		public const string MandatoryStatement = "MandatoryStatement";
		public const string Origin = "Origin";
		public const string LowLimitNumeratorValue = "LowLimitNumeratorValue";
		public const string LowLimitNumeratorPrefixId = "LowLimitNumeratorPrefixId";
		public const string LowLimitNumeratorUnitId = "LowLimitNumeratorUnitId";
		public const string LowLimitDenomValue = "LowLimitDenomValue";
		public const string LowLimitDenomPrefixId = "LowLimitDenomPrefixId";
		public const string LowLimitDenomUnitId = "LowLimitDenomUnitId";
		public const string UpLimitNumeratorValue = "UpLimitNumeratorValue";
		public const string UpLimitNumeratorPrefixId = "UpLimitNumeratorPrefixId";
		public const string UpLimitNumeratorUnitId = "UpLimitNumeratorUnitId";
		public const string UpLimitDenomValue = "UpLimitDenomValue";
		public const string UpLimitDenomPrefixId = "UpLimitDenomPrefixId";
		public const string UpLimitDenomUnitId = "UpLimitDenomUnitId";
		public const string ComponentIdr = "ComponentIdr";
		public const string SuperName = "SuperName";
		public const string IsForEma = "IsForEma";
		public const string DossierCountryEmaInfoId = "DossierCountryEmaInfoId";
		public const string SubstanceName = "SubstanceName";
		public const string ComponentFunctionName = "ComponentFunctionName";
		public const string AmountValueName = "AmountValueName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class AffectedInformation
	{
		private String _affectedInformationId;
		[DataMember]
		[SqlField(DbType.StringFixedLength, 1, ColumnName ="AFFECTED_INFORMATION_ID" )]		public String AffectedInformationId 
		{ 
		    get { return _affectedInformationId; } 
			set 
			{
			    _affectedInformationId = value;
			}
        }

		private String _affectedInformationName;
		[DataMember]
		[SqlField(DbType.String, 3, ColumnName ="AFFECTED_INFORMATION_NAME" )]		public String AffectedInformationName 
		{ 
		    get { return _affectedInformationName; } 
			set 
			{
			    _affectedInformationName = value;
			}
        }


	}

	public partial class AffectedInformationRepository : Repository<AffectedInformation> 
	{
		public AffectedInformationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class AffectedInformationFields
	{
		public const string AffectedInformationId = "AffectedInformationId";
		public const string AffectedInformationName = "AffectedInformationName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class ModCountryStatus
	{
		private Decimal _modificationCountryStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MODIFICATION_COUNTRY_STATUS_ID" )]		public Decimal ModificationCountryStatusId 
		{ 
		    get { return _modificationCountryStatusId; } 
			set 
			{
			    _modificationCountryStatusId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }


	}

	public partial class ModCountryStatusRepository : Repository<ModCountryStatus> 
	{
		public ModCountryStatusRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class ModCountryStatusFields
	{
		public const string ModificationCountryStatusId = "ModificationCountryStatusId";
		public const string Name = "Name";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class ImpliedManufacFunc
	{
		private Decimal _imanFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="IMAN_FUNCTION_ID" )]		public Decimal ImanFunctionId 
		{ 
		    get { return _imanFunctionId; } 
			set 
			{
			    _imanFunctionId = value;
			}
        }

		private Decimal _impliedManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="IMPLIED_MANUFACTURER_ID" )]		public Decimal ImpliedManufacturerId 
		{ 
		    get { return _impliedManufacturerId; } 
			set 
			{
			    _impliedManufacturerId = value;
			}
        }

		private Decimal _manufacturerFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_FUNCTION_ID" )]		public Decimal ManufacturerFunctionId 
		{ 
		    get { return _manufacturerFunctionId; } 
			set 
			{
			    _manufacturerFunctionId = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _manufacturerFunctionName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="MANUFACTURER_FUNCTION_NAME" )]		public String ManufacturerFunctionName 
		{ 
		    get { return _manufacturerFunctionName; } 
			set 
			{
			    _manufacturerFunctionName = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }


	}

	public partial class ImpliedManufacFuncRepository : Repository<ImpliedManufacFunc> 
	{
		public ImpliedManufacFuncRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class ImpliedManufacFuncFields
	{
		public const string ImanFunctionId = "ImanFunctionId";
		public const string ImpliedManufacturerId = "ImpliedManufacturerId";
		public const string ManufacturerFunctionId = "ManufacturerFunctionId";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string ManufacturerFunctionName = "ManufacturerFunctionName";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class ApiManufacFunction
	{
		private Decimal _manufacturerFunctionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_FUNCTION_ID" )]		public Decimal ManufacturerFunctionId 
		{ 
		    get { return _manufacturerFunctionId; } 
			set 
			{
			    _manufacturerFunctionId = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NAME" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }

		private String _isApiFunction;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_API_FUNCTION" )]		public String IsApiFunction 
		{ 
		    get { return _isApiFunction; } 
			set 
			{
			    _isApiFunction = value;
			}
        }

		private String _isActive;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_ACTIVE" )]		public String IsActive 
		{ 
		    get { return _isActive; } 
			set 
			{
			    _isActive = value;
			}
        }


	}

	public partial class ApiManufacFunctionRepository : Repository<ApiManufacFunction> 
	{
		public ApiManufacFunctionRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class ApiManufacFunctionFields
	{
		public const string ManufacturerFunctionId = "ManufacturerFunctionId";
		public const string Name = "Name";
		public const string Description = "Description";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
		public const string IsApiFunction = "IsApiFunction";
		public const string IsActive = "IsActive";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class VariationType
	{
		private Decimal? _variationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="VARIATION_TYPE_ID" )]		public Decimal? VariationTypeId 
		{ 
		    get { return _variationTypeId; } 
			set 
			{
			    _variationTypeId = value;
			}
        }

		private String _variationTypeName;
		[DataMember]
		[SqlField(DbType.String, 36, ColumnName ="VARIATION_TYPE_NAME" )]		public String VariationTypeName 
		{ 
		    get { return _variationTypeName; } 
			set 
			{
			    _variationTypeName = value;
			}
        }


	}

	public partial class VariationTypeRepository : Repository<VariationType> 
	{
		public VariationTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class VariationTypeFields
	{
		public const string VariationTypeId = "VariationTypeId";
		public const string VariationTypeName = "VariationTypeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class CommissionType
	{
		private Decimal? _commisionTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="COMMISION_TYPE_ID" )]		public Decimal? CommisionTypeId 
		{ 
		    get { return _commisionTypeId; } 
			set 
			{
			    _commisionTypeId = value;
			}
        }

		private String _commisionTypeName;
		[DataMember]
		[SqlField(DbType.String, 4, ColumnName ="COMMISION_TYPE_NAME" )]		public String CommisionTypeName 
		{ 
		    get { return _commisionTypeName; } 
			set 
			{
			    _commisionTypeName = value;
			}
        }


	}

	public partial class CommissionTypeRepository : Repository<CommissionType> 
	{
		public CommissionTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class CommissionTypeFields
	{
		public const string CommisionTypeId = "CommisionTypeId";
		public const string CommisionTypeName = "CommisionTypeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="NOTIFICATION_TYPES")]
	public partial class NotificationType
	{
		private Decimal _notificationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "NOTIFICATION_TYPE_ID", ColumnName ="NOTIFICATION_TYPE_ID", BaseColumnName ="NOTIFICATION_TYPE_ID", BaseTableName = "NOTIFICATION_TYPES" )]		public Decimal NotificationTypeId 
		{ 
		    get { return _notificationTypeId; } 
			set 
			{
			    _notificationTypeId = value;
			}
        }

		private String _notificationTypeDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NOTIFICATION_TYPE_DESCRIPTION", BaseColumnName ="NOTIFICATION_TYPE_DESCRIPTION", BaseTableName = "NOTIFICATION_TYPES" )]		public String NotificationTypeDescription 
		{ 
		    get { return _notificationTypeDescription; } 
			set 
			{
			    _notificationTypeDescription = value;
			}
        }

		private String _isForDossier;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_DOSSIER", BaseColumnName ="IS_FOR_DOSSIER", BaseTableName = "NOTIFICATION_TYPES" )]		public String IsForDossier 
		{ 
		    get { return _isForDossier; } 
			set 
			{
			    _isForDossier = value;
			}
        }

		private String _isForVariation;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_VARIATION", BaseColumnName ="IS_FOR_VARIATION", BaseTableName = "NOTIFICATION_TYPES" )]		public String IsForVariation 
		{ 
		    get { return _isForVariation; } 
			set 
			{
			    _isForVariation = value;
			}
        }

		private Decimal? _taskActionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TASK_ACTION_ID", BaseColumnName ="TASK_ACTION_ID", BaseTableName = "NOTIFICATION_TYPES" )]		public Decimal? TaskActionId 
		{ 
		    get { return _taskActionId; } 
			set 
			{
			    _taskActionId = value;
			}
        }

		private String _isForDeficiency;
		[DataMember]
		[SqlField(DbType.String, 1, ColumnName ="IS_FOR_DEFICIENCY", BaseColumnName ="IS_FOR_DEFICIENCY", BaseTableName = "NOTIFICATION_TYPES" )]		public String IsForDeficiency 
		{ 
		    get { return _isForDeficiency; } 
			set 
			{
			    _isForDeficiency = value;
			}
        }

		private String _notificationTypeBody;
		[DataMember]
		[SqlField(DbType.Object, 2147483647, ProviderType=116, ColumnName ="NOTIFICATION_TYPE_BODY", BaseColumnName ="NOTIFICATION_TYPE_BODY", BaseTableName = "NOTIFICATION_TYPES" )]		public String NotificationTypeBody 
		{ 
		    get { return _notificationTypeBody; } 
			set 
			{
			    _notificationTypeBody = value;
			}
        }

		private String _notificationTypeSubject;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="NOTIFICATION_TYPE_SUBJECT", BaseColumnName ="NOTIFICATION_TYPE_SUBJECT", BaseTableName = "NOTIFICATION_TYPES" )]		public String NotificationTypeSubject 
		{ 
		    get { return _notificationTypeSubject; } 
			set 
			{
			    _notificationTypeSubject = value;
			}
        }

		private String _taskActionDescription;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="TASK_ACTION_DESCRIPTION" )]		public String TaskActionDescription 
		{ 
		    get { return _taskActionDescription; } 
			set 
			{
			    _taskActionDescription = value;
			}
        }


	}

	public partial class NotificationTypeRepository : Repository<NotificationType> 
	{
		public NotificationTypeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public NotificationType Get(string projectionName, System.Decimal notificationTypeId)
		{
			return ((IRepository<NotificationType>)this).Get(projectionName, notificationTypeId, FetchMode.UseIdentityMap);
		}

		public NotificationType Get(string projectionName, System.Decimal notificationTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationType>)this).Get(projectionName, notificationTypeId, fetchMode);
		}

		public NotificationType Get(Projection projection, System.Decimal notificationTypeId)
		{
			return ((IRepository<NotificationType>)this).Get(projection, notificationTypeId, FetchMode.UseIdentityMap);
		}

		public NotificationType Get(Projection projection, System.Decimal notificationTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationType>)this).Get(projection, notificationTypeId, fetchMode);
		}

		public NotificationType Get(string projectionName, System.Decimal notificationTypeId, params string[] fields)
		{
			return ((IRepository<NotificationType>)this).Get(projectionName, notificationTypeId, fields);
		}

		public NotificationType Get(Projection projection, System.Decimal notificationTypeId, params string[] fields)
		{
			return ((IRepository<NotificationType>)this).Get(projection, notificationTypeId, fields);
		}

		public bool Delete(System.Decimal notificationTypeId)
		{
			var entity = new NotificationType { NotificationTypeId = notificationTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class NotificationTypeFields
	{
		public const string NotificationTypeId = "NotificationTypeId";
		public const string NotificationTypeDescription = "NotificationTypeDescription";
		public const string IsForDossier = "IsForDossier";
		public const string IsForVariation = "IsForVariation";
		public const string TaskActionId = "TaskActionId";
		public const string IsForDeficiency = "IsForDeficiency";
		public const string NotificationTypeBody = "NotificationTypeBody";
		public const string NotificationTypeSubject = "NotificationTypeSubject";
		public const string TaskActionDescription = "TaskActionDescription";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="NOTIFICATION_TYPE_PROCEDURES")]
	public partial class NotificationTypeProc
	{
		private Decimal _notificationTypeProcId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "NOTIFICATION_TYPE_PROC_ID", ColumnName ="NOTIFICATION_TYPE_PROC_ID", BaseColumnName ="NOTIFICATION_TYPE_PROC_ID", BaseTableName = "NOTIFICATION_TYPE_PROCEDURES" )]		public Decimal NotificationTypeProcId 
		{ 
		    get { return _notificationTypeProcId; } 
			set 
			{
			    _notificationTypeProcId = value;
			}
        }

		private Decimal _notificationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="NOTIFICATION_TYPE_ID", BaseColumnName ="NOTIFICATION_TYPE_ID", BaseTableName = "NOTIFICATION_TYPE_PROCEDURES" )]		public Decimal NotificationTypeId 
		{ 
		    get { return _notificationTypeId; } 
			set 
			{
			    _notificationTypeId = value;
			}
        }

		private Decimal _authorisationProcedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="AUTHORISATION_PROCEDURE_ID", BaseColumnName ="AUTHORISATION_PROCEDURE_ID", BaseTableName = "NOTIFICATION_TYPE_PROCEDURES" )]		public Decimal AuthorisationProcedureId 
		{ 
		    get { return _authorisationProcedureId; } 
			set 
			{
			    _authorisationProcedureId = value;
			}
        }

		private String _notificationTypeDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NOTIFICATION_TYPE_DESCRIPTION" )]		public String NotificationTypeDescription 
		{ 
		    get { return _notificationTypeDescription; } 
			set 
			{
			    _notificationTypeDescription = value;
			}
        }

		private String _name;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="NAME" )]		public String Name 
		{ 
		    get { return _name; } 
			set 
			{
			    _name = value;
			}
        }


	}

	public partial class NotificationTypeProcRepository : Repository<NotificationTypeProc> 
	{
		public NotificationTypeProcRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public NotificationTypeProc Get(string projectionName, System.Decimal notificationTypeProcId)
		{
			return ((IRepository<NotificationTypeProc>)this).Get(projectionName, notificationTypeProcId, FetchMode.UseIdentityMap);
		}

		public NotificationTypeProc Get(string projectionName, System.Decimal notificationTypeProcId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationTypeProc>)this).Get(projectionName, notificationTypeProcId, fetchMode);
		}

		public NotificationTypeProc Get(Projection projection, System.Decimal notificationTypeProcId)
		{
			return ((IRepository<NotificationTypeProc>)this).Get(projection, notificationTypeProcId, FetchMode.UseIdentityMap);
		}

		public NotificationTypeProc Get(Projection projection, System.Decimal notificationTypeProcId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationTypeProc>)this).Get(projection, notificationTypeProcId, fetchMode);
		}

		public NotificationTypeProc Get(string projectionName, System.Decimal notificationTypeProcId, params string[] fields)
		{
			return ((IRepository<NotificationTypeProc>)this).Get(projectionName, notificationTypeProcId, fields);
		}

		public NotificationTypeProc Get(Projection projection, System.Decimal notificationTypeProcId, params string[] fields)
		{
			return ((IRepository<NotificationTypeProc>)this).Get(projection, notificationTypeProcId, fields);
		}

		public bool Delete(System.Decimal notificationTypeProcId)
		{
			var entity = new NotificationTypeProc { NotificationTypeProcId = notificationTypeProcId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class NotificationTypeProcFields
	{
		public const string NotificationTypeProcId = "NotificationTypeProcId";
		public const string NotificationTypeId = "NotificationTypeId";
		public const string AuthorisationProcedureId = "AuthorisationProcedureId";
		public const string NotificationTypeDescription = "NotificationTypeDescription";
		public const string Name = "Name";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="NOTIFICATION_TYPE_DEFICIENCIES")]
	public partial class NotificationTypeDef
	{
		private Decimal _notificationTypeDefTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "NOTIFICATION_TYPE_DEF_TYPE_ID", ColumnName ="NOTIFICATION_TYPE_DEF_TYPE_ID", BaseColumnName ="NOTIFICATION_TYPE_DEF_TYPE_ID", BaseTableName = "NOTIFICATION_TYPE_DEFICIENCIES" )]		public Decimal NotificationTypeDefTypeId 
		{ 
		    get { return _notificationTypeDefTypeId; } 
			set 
			{
			    _notificationTypeDefTypeId = value;
			}
        }

		private Decimal _notificationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="NOTIFICATION_TYPE_ID", BaseColumnName ="NOTIFICATION_TYPE_ID", BaseTableName = "NOTIFICATION_TYPE_DEFICIENCIES" )]		public Decimal NotificationTypeId 
		{ 
		    get { return _notificationTypeId; } 
			set 
			{
			    _notificationTypeId = value;
			}
        }

		private Decimal _deficiencyTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DEFICIENCY_TYPE_ID", BaseColumnName ="DEFICIENCY_TYPE_ID", BaseTableName = "NOTIFICATION_TYPE_DEFICIENCIES" )]		public Decimal DeficiencyTypeId 
		{ 
		    get { return _deficiencyTypeId; } 
			set 
			{
			    _deficiencyTypeId = value;
			}
        }

		private String _notificationTypeDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NOTIFICATION_TYPE_DESCRIPTION" )]		public String NotificationTypeDescription 
		{ 
		    get { return _notificationTypeDescription; } 
			set 
			{
			    _notificationTypeDescription = value;
			}
        }

		private String _deficiencyTypeName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DEFICIENCY_TYPE_NAME" )]		public String DeficiencyTypeName 
		{ 
		    get { return _deficiencyTypeName; } 
			set 
			{
			    _deficiencyTypeName = value;
			}
        }


	}

	public partial class NotificationTypeDefRepository : Repository<NotificationTypeDef> 
	{
		public NotificationTypeDefRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public NotificationTypeDef Get(string projectionName, System.Decimal notificationTypeDefTypeId)
		{
			return ((IRepository<NotificationTypeDef>)this).Get(projectionName, notificationTypeDefTypeId, FetchMode.UseIdentityMap);
		}

		public NotificationTypeDef Get(string projectionName, System.Decimal notificationTypeDefTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationTypeDef>)this).Get(projectionName, notificationTypeDefTypeId, fetchMode);
		}

		public NotificationTypeDef Get(Projection projection, System.Decimal notificationTypeDefTypeId)
		{
			return ((IRepository<NotificationTypeDef>)this).Get(projection, notificationTypeDefTypeId, FetchMode.UseIdentityMap);
		}

		public NotificationTypeDef Get(Projection projection, System.Decimal notificationTypeDefTypeId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationTypeDef>)this).Get(projection, notificationTypeDefTypeId, fetchMode);
		}

		public NotificationTypeDef Get(string projectionName, System.Decimal notificationTypeDefTypeId, params string[] fields)
		{
			return ((IRepository<NotificationTypeDef>)this).Get(projectionName, notificationTypeDefTypeId, fields);
		}

		public NotificationTypeDef Get(Projection projection, System.Decimal notificationTypeDefTypeId, params string[] fields)
		{
			return ((IRepository<NotificationTypeDef>)this).Get(projection, notificationTypeDefTypeId, fields);
		}

		public bool Delete(System.Decimal notificationTypeDefTypeId)
		{
			var entity = new NotificationTypeDef { NotificationTypeDefTypeId = notificationTypeDefTypeId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class NotificationTypeDefFields
	{
		public const string NotificationTypeDefTypeId = "NotificationTypeDefTypeId";
		public const string NotificationTypeId = "NotificationTypeId";
		public const string DeficiencyTypeId = "DeficiencyTypeId";
		public const string NotificationTypeDescription = "NotificationTypeDescription";
		public const string DeficiencyTypeName = "DeficiencyTypeName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="NOTIFICATION_TYPE_AGREEMENTS")]
	public partial class NotificationTypeAgree
	{
		private Decimal _notificationTypeAgreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "NOTIFICATION_TYPE_AGREEMENT_ID", ColumnName ="NOTIFICATION_TYPE_AGREEMENT_ID", BaseColumnName ="NOTIFICATION_TYPE_AGREEMENT_ID", BaseTableName = "NOTIFICATION_TYPE_AGREEMENTS" )]		public Decimal NotificationTypeAgreementId 
		{ 
		    get { return _notificationTypeAgreementId; } 
			set 
			{
			    _notificationTypeAgreementId = value;
			}
        }

		private Decimal _notificationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="NOTIFICATION_TYPE_ID", BaseColumnName ="NOTIFICATION_TYPE_ID", BaseTableName = "NOTIFICATION_TYPE_AGREEMENTS" )]		public Decimal NotificationTypeId 
		{ 
		    get { return _notificationTypeId; } 
			set 
			{
			    _notificationTypeId = value;
			}
        }

		private Decimal _marketingAgreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MARKETING_AGREEMENT_ID", BaseColumnName ="MARKETING_AGREEMENT_ID", BaseTableName = "NOTIFICATION_TYPE_AGREEMENTS" )]		public Decimal MarketingAgreementId 
		{ 
		    get { return _marketingAgreementId; } 
			set 
			{
			    _marketingAgreementId = value;
			}
        }

		private String _notificationTypeDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NOTIFICATION_TYPE_DESCRIPTION" )]		public String NotificationTypeDescription 
		{ 
		    get { return _notificationTypeDescription; } 
			set 
			{
			    _notificationTypeDescription = value;
			}
        }

		private String _description;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="DESCRIPTION" )]		public String Description 
		{ 
		    get { return _description; } 
			set 
			{
			    _description = value;
			}
        }


	}

	public partial class NotificationTypeAgreeRepository : Repository<NotificationTypeAgree> 
	{
		public NotificationTypeAgreeRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public NotificationTypeAgree Get(string projectionName, System.Decimal notificationTypeAgreementId)
		{
			return ((IRepository<NotificationTypeAgree>)this).Get(projectionName, notificationTypeAgreementId, FetchMode.UseIdentityMap);
		}

		public NotificationTypeAgree Get(string projectionName, System.Decimal notificationTypeAgreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationTypeAgree>)this).Get(projectionName, notificationTypeAgreementId, fetchMode);
		}

		public NotificationTypeAgree Get(Projection projection, System.Decimal notificationTypeAgreementId)
		{
			return ((IRepository<NotificationTypeAgree>)this).Get(projection, notificationTypeAgreementId, FetchMode.UseIdentityMap);
		}

		public NotificationTypeAgree Get(Projection projection, System.Decimal notificationTypeAgreementId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationTypeAgree>)this).Get(projection, notificationTypeAgreementId, fetchMode);
		}

		public NotificationTypeAgree Get(string projectionName, System.Decimal notificationTypeAgreementId, params string[] fields)
		{
			return ((IRepository<NotificationTypeAgree>)this).Get(projectionName, notificationTypeAgreementId, fields);
		}

		public NotificationTypeAgree Get(Projection projection, System.Decimal notificationTypeAgreementId, params string[] fields)
		{
			return ((IRepository<NotificationTypeAgree>)this).Get(projection, notificationTypeAgreementId, fields);
		}

		public bool Delete(System.Decimal notificationTypeAgreementId)
		{
			var entity = new NotificationTypeAgree { NotificationTypeAgreementId = notificationTypeAgreementId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class NotificationTypeAgreeFields
	{
		public const string NotificationTypeAgreementId = "NotificationTypeAgreementId";
		public const string NotificationTypeId = "NotificationTypeId";
		public const string MarketingAgreementId = "MarketingAgreementId";
		public const string NotificationTypeDescription = "NotificationTypeDescription";
		public const string Description = "Description";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="MP_STABILITY_MANUFACTURERS")]
	public partial class MpStabilityManufac
	{
		private Decimal _mpStabilityManufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "MP_STABILITY_MANUFACTURER_ID", ColumnName ="MP_STABILITY_MANUFACTURER_ID", BaseColumnName ="MP_STABILITY_MANUFACTURER_ID", BaseTableName = "MP_STABILITY_MANUFACTURERS" )]		public Decimal MpStabilityManufacturerId 
		{ 
		    get { return _mpStabilityManufacturerId; } 
			set 
			{
			    _mpStabilityManufacturerId = value;
			}
        }

		private Decimal _stabilityId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="STABILITY_ID", BaseColumnName ="STABILITY_ID", BaseTableName = "MP_STABILITY_MANUFACTURERS" )]		public Decimal StabilityId 
		{ 
		    get { return _stabilityId; } 
			set 
			{
			    _stabilityId = value;
			}
        }

		private Decimal _manufacturerId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MANUFACTURER_ID", BaseColumnName ="MANUFACTURER_ID", BaseTableName = "MP_STABILITY_MANUFACTURERS" )]		public Decimal ManufacturerId 
		{ 
		    get { return _manufacturerId; } 
			set 
			{
			    _manufacturerId = value;
			}
        }

		private Decimal _activeSubstanceId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ACTIVE_SUBSTANCE_ID", BaseColumnName ="ACTIVE_SUBSTANCE_ID", BaseTableName = "MP_STABILITY_MANUFACTURERS" )]		public Decimal ActiveSubstanceId 
		{ 
		    get { return _activeSubstanceId; } 
			set 
			{
			    _activeSubstanceId = value;
			}
        }

		private String _manufacturerName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MANUFACTURER_NAME" )]		public String ManufacturerName 
		{ 
		    get { return _manufacturerName; } 
			set 
			{
			    _manufacturerName = value;
			}
        }

		private String _substanceName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="SUBSTANCE_NAME" )]		public String SubstanceName 
		{ 
		    get { return _substanceName; } 
			set 
			{
			    _substanceName = value;
			}
        }


	}

	public partial class MpStabilityManufacRepository : Repository<MpStabilityManufac> 
	{
		public MpStabilityManufacRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public MpStabilityManufac Get(string projectionName, System.Decimal mpStabilityManufacturerId)
		{
			return ((IRepository<MpStabilityManufac>)this).Get(projectionName, mpStabilityManufacturerId, FetchMode.UseIdentityMap);
		}

		public MpStabilityManufac Get(string projectionName, System.Decimal mpStabilityManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityManufac>)this).Get(projectionName, mpStabilityManufacturerId, fetchMode);
		}

		public MpStabilityManufac Get(Projection projection, System.Decimal mpStabilityManufacturerId)
		{
			return ((IRepository<MpStabilityManufac>)this).Get(projection, mpStabilityManufacturerId, FetchMode.UseIdentityMap);
		}

		public MpStabilityManufac Get(Projection projection, System.Decimal mpStabilityManufacturerId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<MpStabilityManufac>)this).Get(projection, mpStabilityManufacturerId, fetchMode);
		}

		public MpStabilityManufac Get(string projectionName, System.Decimal mpStabilityManufacturerId, params string[] fields)
		{
			return ((IRepository<MpStabilityManufac>)this).Get(projectionName, mpStabilityManufacturerId, fields);
		}

		public MpStabilityManufac Get(Projection projection, System.Decimal mpStabilityManufacturerId, params string[] fields)
		{
			return ((IRepository<MpStabilityManufac>)this).Get(projection, mpStabilityManufacturerId, fields);
		}

		public bool Delete(System.Decimal mpStabilityManufacturerId)
		{
			var entity = new MpStabilityManufac { MpStabilityManufacturerId = mpStabilityManufacturerId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class MpStabilityManufacFields
	{
		public const string MpStabilityManufacturerId = "MpStabilityManufacturerId";
		public const string StabilityId = "StabilityId";
		public const string ManufacturerId = "ManufacturerId";
		public const string ActiveSubstanceId = "ActiveSubstanceId";
		public const string ManufacturerName = "ManufacturerName";
		public const string SubstanceName = "SubstanceName";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class NotificationDc
	{
		private Decimal _dossierCountryId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="DOSSIER_COUNTRY_ID" )]		public Decimal DossierCountryId 
		{ 
		    get { return _dossierCountryId; } 
			set 
			{
			    _dossierCountryId = value;
			}
        }

		private String _productName;
		[DataMember]
		[SqlField(DbType.String, 518, ProviderType=119, ColumnName ="PRODUCT_NAME" )]		public String ProductName 
		{ 
		    get { return _productName; } 
			set 
			{
			    _productName = value;
			}
        }

		private String _twoLettersCode;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="TWO_LETTERS_CODE" )]		public String TwoLettersCode 
		{ 
		    get { return _twoLettersCode; } 
			set 
			{
			    _twoLettersCode = value;
			}
        }

		private String _countryName;
		[DataMember]
		[SqlField(DbType.String, 20, ColumnName ="COUNTRY_NAME" )]		public String CountryName 
		{ 
		    get { return _countryName; } 
			set 
			{
			    _countryName = value;
			}
        }

		private String _mahName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="MAH_NAME" )]		public String MahName 
		{ 
		    get { return _mahName; } 
			set 
			{
			    _mahName = value;
			}
        }

		private String _clientName;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="CLIENT_NAME" )]		public String ClientName 
		{ 
		    get { return _clientName; } 
			set 
			{
			    _clientName = value;
			}
        }

		private String _authorisationProcedureValue;
		[DataMember]
		[SqlField(DbType.String, 256, ColumnName ="AUTHORISATION_PROCEDURE_VALUE" )]		public String AuthorisationProcedureValue 
		{ 
		    get { return _authorisationProcedureValue; } 
			set 
			{
			    _authorisationProcedureValue = value;
			}
        }

		private DateTime? _submissionDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SUBMISSION_DATE" )]		public DateTime? SubmissionDate 
		{ 
		    get { return _submissionDate; } 
			set 
			{
			    _submissionDate = value;
			}
        }

		private DateTime? _dossierRequestDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="DOSSIER_REQUEST_DATE" )]		public DateTime? DossierRequestDate 
		{ 
		    get { return _dossierRequestDate; } 
			set 
			{
			    _dossierRequestDate = value;
			}
        }

		private Decimal? _marketingAgreementId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MARKETING_AGREEMENT_ID" )]		public Decimal? MarketingAgreementId 
		{ 
		    get { return _marketingAgreementId; } 
			set 
			{
			    _marketingAgreementId = value;
			}
        }

		private Decimal _mktAuthProdedureId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="MKT_AUTH_PRODEDURE_ID" )]		public Decimal MktAuthProdedureId 
		{ 
		    get { return _mktAuthProdedureId; } 
			set 
			{
			    _mktAuthProdedureId = value;
			}
        }


	}

	public partial class NotificationDcRepository : Repository<NotificationDc> 
	{
		public NotificationDcRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class NotificationDcFields
	{
		public const string DossierCountryId = "DossierCountryId";
		public const string ProductName = "ProductName";
		public const string TwoLettersCode = "TwoLettersCode";
		public const string CountryName = "CountryName";
		public const string MahName = "MahName";
		public const string ClientName = "ClientName";
		public const string AuthorisationProcedureValue = "AuthorisationProcedureValue";
		public const string SubmissionDate = "SubmissionDate";
		public const string DossierRequestDate = "DossierRequestDate";
		public const string MarketingAgreementId = "MarketingAgreementId";
		public const string MktAuthProdedureId = "MktAuthProdedureId";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity()]
	public partial class NotificationField
	{
		private String _fieldName;
		[DataMember]
		[SqlField(DbType.String, 31, ColumnName ="FIELD_NAME" )]		public String FieldName 
		{ 
		    get { return _fieldName; } 
			set 
			{
			    _fieldName = value;
			}
        }

		private String _fieldDesc;
		[DataMember]
		[SqlField(DbType.String, 30, ColumnName ="FIELD_DESC" )]		public String FieldDesc 
		{ 
		    get { return _fieldDesc; } 
			set 
			{
			    _fieldDesc = value;
			}
        }


	}

	public partial class NotificationFieldRepository : Repository<NotificationField> 
	{
		public NotificationFieldRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

	}
	[Obsolete("Use nameof instead")]
	public static partial class NotificationFieldFields
	{
		public const string FieldName = "FieldName";
		public const string FieldDesc = "FieldDesc";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="NOTIFICATION_TYPE_MAILS")]
	public partial class NotificationTypeMail
	{
		private Decimal _notificationTypeMailId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "NOTIFICATION_TYPE_MAIL_ID", ColumnName ="NOTIFICATION_TYPE_MAIL_ID", BaseColumnName ="NOTIFICATION_TYPE_MAIL_ID", BaseTableName = "NOTIFICATION_TYPE_MAILS" )]		public Decimal NotificationTypeMailId 
		{ 
		    get { return _notificationTypeMailId; } 
			set 
			{
			    _notificationTypeMailId = value;
			}
        }

		private Decimal _notificationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="NOTIFICATION_TYPE_ID", BaseColumnName ="NOTIFICATION_TYPE_ID", BaseTableName = "NOTIFICATION_TYPE_MAILS" )]		public Decimal NotificationTypeId 
		{ 
		    get { return _notificationTypeId; } 
			set 
			{
			    _notificationTypeId = value;
			}
        }

		private String _email;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="EMAIL", BaseColumnName ="EMAIL", BaseTableName = "NOTIFICATION_TYPE_MAILS" )]		public String Email 
		{ 
		    get { return _email; } 
			set 
			{
			    _email = value;
			}
        }

		private DateTime? _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "NOTIFICATION_TYPE_MAILS" )]		public DateTime? CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private Decimal? _createdBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="CREATED_BY", BaseColumnName ="CREATED_BY", BaseTableName = "NOTIFICATION_TYPE_MAILS" )]		public Decimal? CreatedBy 
		{ 
		    get { return _createdBy; } 
			set 
			{
			    _createdBy = value;
			}
        }

		private DateTime? _modifiedDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="MODIFIED_DATE", BaseColumnName ="MODIFIED_DATE", BaseTableName = "NOTIFICATION_TYPE_MAILS" )]		public DateTime? ModifiedDate 
		{ 
		    get { return _modifiedDate; } 
			set 
			{
			    _modifiedDate = value;
			}
        }

		private Decimal? _modifiedBy;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="MODIFIED_BY", BaseColumnName ="MODIFIED_BY", BaseTableName = "NOTIFICATION_TYPE_MAILS" )]		public Decimal? ModifiedBy 
		{ 
		    get { return _modifiedBy; } 
			set 
			{
			    _modifiedBy = value;
			}
        }


	}

	public partial class NotificationTypeMailRepository : Repository<NotificationTypeMail> 
	{
		public NotificationTypeMailRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public NotificationTypeMail Get(string projectionName, System.Decimal notificationTypeMailId)
		{
			return ((IRepository<NotificationTypeMail>)this).Get(projectionName, notificationTypeMailId, FetchMode.UseIdentityMap);
		}

		public NotificationTypeMail Get(string projectionName, System.Decimal notificationTypeMailId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationTypeMail>)this).Get(projectionName, notificationTypeMailId, fetchMode);
		}

		public NotificationTypeMail Get(Projection projection, System.Decimal notificationTypeMailId)
		{
			return ((IRepository<NotificationTypeMail>)this).Get(projection, notificationTypeMailId, FetchMode.UseIdentityMap);
		}

		public NotificationTypeMail Get(Projection projection, System.Decimal notificationTypeMailId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<NotificationTypeMail>)this).Get(projection, notificationTypeMailId, fetchMode);
		}

		public NotificationTypeMail Get(string projectionName, System.Decimal notificationTypeMailId, params string[] fields)
		{
			return ((IRepository<NotificationTypeMail>)this).Get(projectionName, notificationTypeMailId, fields);
		}

		public NotificationTypeMail Get(Projection projection, System.Decimal notificationTypeMailId, params string[] fields)
		{
			return ((IRepository<NotificationTypeMail>)this).Get(projection, notificationTypeMailId, fields);
		}

		public bool Delete(System.Decimal notificationTypeMailId)
		{
			var entity = new NotificationTypeMail { NotificationTypeMailId = notificationTypeMailId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class NotificationTypeMailFields
	{
		public const string NotificationTypeMailId = "NotificationTypeMailId";
		public const string NotificationTypeId = "NotificationTypeId";
		public const string Email = "Email";
		public const string CreatedDate = "CreatedDate";
		public const string CreatedBy = "CreatedBy";
		public const string ModifiedDate = "ModifiedDate";
		public const string ModifiedBy = "ModifiedBy";
	}

	[Serializable]
	[DataContract]
    [TypeScript] 
	[SqlEntity(BaseTableName="NOTIFICATIONS")]
	public partial class Notification
	{
		private Decimal _notificationId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, IsKey=true, SequenceName = "NOTIFICATION_ID", ColumnName ="NOTIFICATION_ID", BaseColumnName ="NOTIFICATION_ID", BaseTableName = "NOTIFICATIONS" )]		public Decimal NotificationId 
		{ 
		    get { return _notificationId; } 
			set 
			{
			    _notificationId = value;
			}
        }

		private Decimal _notificationTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="NOTIFICATION_TYPE_ID", BaseColumnName ="NOTIFICATION_TYPE_ID", BaseTableName = "NOTIFICATIONS" )]		public Decimal NotificationTypeId 
		{ 
		    get { return _notificationTypeId; } 
			set 
			{
			    _notificationTypeId = value;
			}
        }

		private Decimal _itemId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_ID", BaseColumnName ="ITEM_ID", BaseTableName = "NOTIFICATIONS" )]		public Decimal ItemId 
		{ 
		    get { return _itemId; } 
			set 
			{
			    _itemId = value;
			}
        }

		private Decimal _itemTypeId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="ITEM_TYPE_ID", BaseColumnName ="ITEM_TYPE_ID", BaseTableName = "NOTIFICATIONS" )]		public Decimal ItemTypeId 
		{ 
		    get { return _itemTypeId; } 
			set 
			{
			    _itemTypeId = value;
			}
        }

		private String _notificationSubject;
		[DataMember]
		[SqlField(DbType.Object, 2147483647, ProviderType=116, ColumnName ="NOTIFICATION_SUBJECT", BaseColumnName ="NOTIFICATION_SUBJECT", BaseTableName = "NOTIFICATIONS" )]		public String NotificationSubject 
		{ 
		    get { return _notificationSubject; } 
			set 
			{
			    _notificationSubject = value;
			}
        }

		private String _notificationBody;
		[DataMember]
		[SqlField(DbType.Object, 2147483647, ProviderType=116, ColumnName ="NOTIFICATION_BODY", BaseColumnName ="NOTIFICATION_BODY", BaseTableName = "NOTIFICATIONS" )]		public String NotificationBody 
		{ 
		    get { return _notificationBody; } 
			set 
			{
			    _notificationBody = value;
			}
        }

		private DateTime? _sendDate;
		[DataMember]
		[SqlField(DbType.Date, 7, AllowNull = true, ColumnName ="SEND_DATE", BaseColumnName ="SEND_DATE", BaseTableName = "NOTIFICATIONS" )]		public DateTime? SendDate 
		{ 
		    get { return _sendDate; } 
			set 
			{
			    _sendDate = value;
			}
        }

		private DateTime _createdDate;
		[DataMember]
		[SqlField(DbType.Date, 7, ColumnName ="CREATED_DATE", BaseColumnName ="CREATED_DATE", BaseTableName = "NOTIFICATIONS" )]		public DateTime CreatedDate 
		{ 
		    get { return _createdDate; } 
			set 
			{
			    _createdDate = value;
			}
        }

		private String _notificationRecipients;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NOTIFICATION_RECIPIENTS", BaseColumnName ="NOTIFICATION_RECIPIENTS", BaseTableName = "NOTIFICATIONS" )]		public String NotificationRecipients 
		{ 
		    get { return _notificationRecipients; } 
			set 
			{
			    _notificationRecipients = value;
			}
        }

		private Decimal _notificationStatusId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, ColumnName ="NOTIFICATION_STATUS_ID", BaseColumnName ="NOTIFICATION_STATUS_ID", BaseTableName = "NOTIFICATIONS" )]		public Decimal NotificationStatusId 
		{ 
		    get { return _notificationStatusId; } 
			set 
			{
			    _notificationStatusId = value;
			}
        }

		private String _notificationStatusError;
		[DataMember]
		[SqlField(DbType.String, 2000, ColumnName ="NOTIFICATION_STATUS_ERROR", BaseColumnName ="NOTIFICATION_STATUS_ERROR", BaseTableName = "NOTIFICATIONS" )]		public String NotificationStatusError 
		{ 
		    get { return _notificationStatusError; } 
			set 
			{
			    _notificationStatusError = value;
			}
        }

		private String _notificationTypeDescription;
		[DataMember]
		[SqlField(DbType.String, 4000, ColumnName ="NOTIFICATION_TYPE_DESCRIPTION" )]		public String NotificationTypeDescription 
		{ 
		    get { return _notificationTypeDescription; } 
			set 
			{
			    _notificationTypeDescription = value;
			}
        }

		private String _taskActionDescription;
		[DataMember]
		[SqlField(DbType.String, 512, ColumnName ="TASK_ACTION_DESCRIPTION" )]		public String TaskActionDescription 
		{ 
		    get { return _taskActionDescription; } 
			set 
			{
			    _taskActionDescription = value;
			}
        }

		private Decimal? _taskActionId;
		[DataMember]
		[SqlField(DbType.Decimal, 22, Precision = 38, Scale=127, AllowNull = true, ColumnName ="TASK_ACTION_ID" )]		public Decimal? TaskActionId 
		{ 
		    get { return _taskActionId; } 
			set 
			{
			    _taskActionId = value;
			}
        }

		private String _notificationStatusName;
		[DataMember]
		[SqlField(DbType.String, 128, ColumnName ="NOTIFICATION_STATUS_NAME" )]		public String NotificationStatusName 
		{ 
		    get { return _notificationStatusName; } 
			set 
			{
			    _notificationStatusName = value;
			}
        }


	}

	public partial class NotificationRepository : Repository<Notification> 
	{
		public NotificationRepository(DataService DataService) : base(DataService)
		{
		}

		public new SidDataService  DataService  
		{
			get { return (SidDataService) base.DataService; }
			set { base.DataService = value; }
		}

		public Notification Get(string projectionName, System.Decimal notificationId)
		{
			return ((IRepository<Notification>)this).Get(projectionName, notificationId, FetchMode.UseIdentityMap);
		}

		public Notification Get(string projectionName, System.Decimal notificationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Notification>)this).Get(projectionName, notificationId, fetchMode);
		}

		public Notification Get(Projection projection, System.Decimal notificationId)
		{
			return ((IRepository<Notification>)this).Get(projection, notificationId, FetchMode.UseIdentityMap);
		}

		public Notification Get(Projection projection, System.Decimal notificationId, FetchMode fetchMode = FetchMode.UseIdentityMap)
		{
			return ((IRepository<Notification>)this).Get(projection, notificationId, fetchMode);
		}

		public Notification Get(string projectionName, System.Decimal notificationId, params string[] fields)
		{
			return ((IRepository<Notification>)this).Get(projectionName, notificationId, fields);
		}

		public Notification Get(Projection projection, System.Decimal notificationId, params string[] fields)
		{
			return ((IRepository<Notification>)this).Get(projection, notificationId, fields);
		}

		public bool Delete(System.Decimal notificationId)
		{
			var entity = new Notification { NotificationId = notificationId };
			return this.Delete(entity);
		}

			}
	[Obsolete("Use nameof instead")]
	public static partial class NotificationFields
	{
		public const string NotificationId = "NotificationId";
		public const string NotificationTypeId = "NotificationTypeId";
		public const string ItemId = "ItemId";
		public const string ItemTypeId = "ItemTypeId";
		public const string NotificationSubject = "NotificationSubject";
		public const string NotificationBody = "NotificationBody";
		public const string SendDate = "SendDate";
		public const string CreatedDate = "CreatedDate";
		public const string NotificationRecipients = "NotificationRecipients";
		public const string NotificationStatusId = "NotificationStatusId";
		public const string NotificationStatusError = "NotificationStatusError";
		public const string NotificationTypeDescription = "NotificationTypeDescription";
		public const string TaskActionDescription = "TaskActionDescription";
		public const string TaskActionId = "TaskActionId";
		public const string NotificationStatusName = "NotificationStatusName";
	}

}

namespace Sid.Entities
{
	public enum AgreementStatusId
	{
		NotInitiated = 2,
		Draft = 3,
		Signed = 4,
		PeriodicRevision = 5,
	}
}

namespace Sid.Entities
{
	public partial class SidDataService : DataService
	{
		partial void OnCreated();

		private void Init()
		{
			EntityNameToEntityViewTransform = TextTransform.ToUnderscoreUpperCaseNamingConvention;
			EntityLiteProvider.DefaultSchema = "SID_UAT";
			OnCreated();
		}

        public SidDataService() : base("Oracle")
        {
			Init();
        }

        public SidDataService(string connectionStringName) : base(connectionStringName)
        {
			Init();
        }

        public SidDataService(string connectionString, string providerName) : base(connectionString, providerName)
        {
			Init();
        }

		private Sid.Entities.EmaAtcCodeRepository _EmaAtcCodeRepository;
		public Sid.Entities.EmaAtcCodeRepository EmaAtcCodeRepository
		{
			get 
			{
				if ( _EmaAtcCodeRepository == null)
				{
					_EmaAtcCodeRepository = new Sid.Entities.EmaAtcCodeRepository(this);
				}
				return _EmaAtcCodeRepository;
			}
		}

		private Sid.Entities.EmaAuthorisationProcedureRepository _EmaAuthorisationProcedureRepository;
		public Sid.Entities.EmaAuthorisationProcedureRepository EmaAuthorisationProcedureRepository
		{
			get 
			{
				if ( _EmaAuthorisationProcedureRepository == null)
				{
					_EmaAuthorisationProcedureRepository = new Sid.Entities.EmaAuthorisationProcedureRepository(this);
				}
				return _EmaAuthorisationProcedureRepository;
			}
		}

		private Sid.Entities.EmaAuthorisationStatusRepository _EmaAuthorisationStatusRepository;
		public Sid.Entities.EmaAuthorisationStatusRepository EmaAuthorisationStatusRepository
		{
			get 
			{
				if ( _EmaAuthorisationStatusRepository == null)
				{
					_EmaAuthorisationStatusRepository = new Sid.Entities.EmaAuthorisationStatusRepository(this);
				}
				return _EmaAuthorisationStatusRepository;
			}
		}

		private Sid.Entities.EmaConcentrationTypeRepository _EmaConcentrationTypeRepository;
		public Sid.Entities.EmaConcentrationTypeRepository EmaConcentrationTypeRepository
		{
			get 
			{
				if ( _EmaConcentrationTypeRepository == null)
				{
					_EmaConcentrationTypeRepository = new Sid.Entities.EmaConcentrationTypeRepository(this);
				}
				return _EmaConcentrationTypeRepository;
			}
		}

		private Sid.Entities.EmaLegalBasisRepository _EmaLegalBasisRepository;
		public Sid.Entities.EmaLegalBasisRepository EmaLegalBasisRepository
		{
			get 
			{
				if ( _EmaLegalBasisRepository == null)
				{
					_EmaLegalBasisRepository = new Sid.Entities.EmaLegalBasisRepository(this);
				}
				return _EmaLegalBasisRepository;
			}
		}

		private Sid.Entities.EmaMedicalDeviceRepository _EmaMedicalDeviceRepository;
		public Sid.Entities.EmaMedicalDeviceRepository EmaMedicalDeviceRepository
		{
			get 
			{
				if ( _EmaMedicalDeviceRepository == null)
				{
					_EmaMedicalDeviceRepository = new Sid.Entities.EmaMedicalDeviceRepository(this);
				}
				return _EmaMedicalDeviceRepository;
			}
		}

		private Sid.Entities.EmaMedicinalProductTypeRepository _EmaMedicinalProductTypeRepository;
		public Sid.Entities.EmaMedicinalProductTypeRepository EmaMedicinalProductTypeRepository
		{
			get 
			{
				if ( _EmaMedicinalProductTypeRepository == null)
				{
					_EmaMedicinalProductTypeRepository = new Sid.Entities.EmaMedicinalProductTypeRepository(this);
				}
				return _EmaMedicinalProductTypeRepository;
			}
		}

		private Sid.Entities.EmaOrganisationRepository _EmaOrganisationRepository;
		public Sid.Entities.EmaOrganisationRepository EmaOrganisationRepository
		{
			get 
			{
				if ( _EmaOrganisationRepository == null)
				{
					_EmaOrganisationRepository = new Sid.Entities.EmaOrganisationRepository(this);
				}
				return _EmaOrganisationRepository;
			}
		}

		private Sid.Entities.EmaPharmaDoseFormRepository _EmaPharmaDoseFormRepository;
		public Sid.Entities.EmaPharmaDoseFormRepository EmaPharmaDoseFormRepository
		{
			get 
			{
				if ( _EmaPharmaDoseFormRepository == null)
				{
					_EmaPharmaDoseFormRepository = new Sid.Entities.EmaPharmaDoseFormRepository(this);
				}
				return _EmaPharmaDoseFormRepository;
			}
		}

		private Sid.Entities.EmaReferenceSourceRepository _EmaReferenceSourceRepository;
		public Sid.Entities.EmaReferenceSourceRepository EmaReferenceSourceRepository
		{
			get 
			{
				if ( _EmaReferenceSourceRepository == null)
				{
					_EmaReferenceSourceRepository = new Sid.Entities.EmaReferenceSourceRepository(this);
				}
				return _EmaReferenceSourceRepository;
			}
		}

		private Sid.Entities.EmaRouteOfAdministrationRepository _EmaRouteOfAdministrationRepository;
		public Sid.Entities.EmaRouteOfAdministrationRepository EmaRouteOfAdministrationRepository
		{
			get 
			{
				if ( _EmaRouteOfAdministrationRepository == null)
				{
					_EmaRouteOfAdministrationRepository = new Sid.Entities.EmaRouteOfAdministrationRepository(this);
				}
				return _EmaRouteOfAdministrationRepository;
			}
		}

		private Sid.Entities.EmaSubstanceClassRepository _EmaSubstanceClassRepository;
		public Sid.Entities.EmaSubstanceClassRepository EmaSubstanceClassRepository
		{
			get 
			{
				if ( _EmaSubstanceClassRepository == null)
				{
					_EmaSubstanceClassRepository = new Sid.Entities.EmaSubstanceClassRepository(this);
				}
				return _EmaSubstanceClassRepository;
			}
		}

		private Sid.Entities.EmaSubstanceRepository _EmaSubstanceRepository;
		public Sid.Entities.EmaSubstanceRepository EmaSubstanceRepository
		{
			get 
			{
				if ( _EmaSubstanceRepository == null)
				{
					_EmaSubstanceRepository = new Sid.Entities.EmaSubstanceRepository(this);
				}
				return _EmaSubstanceRepository;
			}
		}

		private Sid.Entities.EmaUnitOfPresentationRepository _EmaUnitOfPresentationRepository;
		public Sid.Entities.EmaUnitOfPresentationRepository EmaUnitOfPresentationRepository
		{
			get 
			{
				if ( _EmaUnitOfPresentationRepository == null)
				{
					_EmaUnitOfPresentationRepository = new Sid.Entities.EmaUnitOfPresentationRepository(this);
				}
				return _EmaUnitOfPresentationRepository;
			}
		}

		private Sid.Entities.RoleRepository _RoleRepository;
		public Sid.Entities.RoleRepository RoleRepository
		{
			get 
			{
				if ( _RoleRepository == null)
				{
					_RoleRepository = new Sid.Entities.RoleRepository(this);
				}
				return _RoleRepository;
			}
		}

		private Sid.Entities.UserRepository _UserRepository;
		public Sid.Entities.UserRepository UserRepository
		{
			get 
			{
				if ( _UserRepository == null)
				{
					_UserRepository = new Sid.Entities.UserRepository(this);
				}
				return _UserRepository;
			}
		}

		private Sid.Entities.ReferenceDataEtagRepository _ReferenceDataEtagRepository;
		public Sid.Entities.ReferenceDataEtagRepository ReferenceDataEtagRepository
		{
			get 
			{
				if ( _ReferenceDataEtagRepository == null)
				{
					_ReferenceDataEtagRepository = new Sid.Entities.ReferenceDataEtagRepository(this);
				}
				return _ReferenceDataEtagRepository;
			}
		}

		private Sid.Entities.MedicinalProductRepository _MedicinalProductRepository;
		public Sid.Entities.MedicinalProductRepository MedicinalProductRepository
		{
			get 
			{
				if ( _MedicinalProductRepository == null)
				{
					_MedicinalProductRepository = new Sid.Entities.MedicinalProductRepository(this);
				}
				return _MedicinalProductRepository;
			}
		}

		private Sid.Entities.DossierRepository _DossierRepository;
		public Sid.Entities.DossierRepository DossierRepository
		{
			get 
			{
				if ( _DossierRepository == null)
				{
					_DossierRepository = new Sid.Entities.DossierRepository(this);
				}
				return _DossierRepository;
			}
		}

		private Sid.Entities.MpStabilityRepository _MpStabilityRepository;
		public Sid.Entities.MpStabilityRepository MpStabilityRepository
		{
			get 
			{
				if ( _MpStabilityRepository == null)
				{
					_MpStabilityRepository = new Sid.Entities.MpStabilityRepository(this);
				}
				return _MpStabilityRepository;
			}
		}

		private Sid.Entities.AgreementRepository _AgreementRepository;
		public Sid.Entities.AgreementRepository AgreementRepository
		{
			get 
			{
				if ( _AgreementRepository == null)
				{
					_AgreementRepository = new Sid.Entities.AgreementRepository(this);
				}
				return _AgreementRepository;
			}
		}

		private Sid.Entities.CountryRepository _CountryRepository;
		public Sid.Entities.CountryRepository CountryRepository
		{
			get 
			{
				if ( _CountryRepository == null)
				{
					_CountryRepository = new Sid.Entities.CountryRepository(this);
				}
				return _CountryRepository;
			}
		}

		private Sid.Entities.AgreementTypeRepository _AgreementTypeRepository;
		public Sid.Entities.AgreementTypeRepository AgreementTypeRepository
		{
			get 
			{
				if ( _AgreementTypeRepository == null)
				{
					_AgreementTypeRepository = new Sid.Entities.AgreementTypeRepository(this);
				}
				return _AgreementTypeRepository;
			}
		}

		private Sid.Entities.ActiveSubstanceRepository _ActiveSubstanceRepository;
		public Sid.Entities.ActiveSubstanceRepository ActiveSubstanceRepository
		{
			get 
			{
				if ( _ActiveSubstanceRepository == null)
				{
					_ActiveSubstanceRepository = new Sid.Entities.ActiveSubstanceRepository(this);
				}
				return _ActiveSubstanceRepository;
			}
		}

		private Sid.Entities.DmfCepVersionRepository _DmfCepVersionRepository;
		public Sid.Entities.DmfCepVersionRepository DmfCepVersionRepository
		{
			get 
			{
				if ( _DmfCepVersionRepository == null)
				{
					_DmfCepVersionRepository = new Sid.Entities.DmfCepVersionRepository(this);
				}
				return _DmfCepVersionRepository;
			}
		}

		private Sid.Entities.ManufacturerRepository _ManufacturerRepository;
		public Sid.Entities.ManufacturerRepository ManufacturerRepository
		{
			get 
			{
				if ( _ManufacturerRepository == null)
				{
					_ManufacturerRepository = new Sid.Entities.ManufacturerRepository(this);
				}
				return _ManufacturerRepository;
			}
		}

		private Sid.Entities.MedicinalProductApiRepository _MedicinalProductApiRepository;
		public Sid.Entities.MedicinalProductApiRepository MedicinalProductApiRepository
		{
			get 
			{
				if ( _MedicinalProductApiRepository == null)
				{
					_MedicinalProductApiRepository = new Sid.Entities.MedicinalProductApiRepository(this);
				}
				return _MedicinalProductApiRepository;
			}
		}

		private Sid.Entities.MarketingAuthHolderRepository _MarketingAuthHolderRepository;
		public Sid.Entities.MarketingAuthHolderRepository MarketingAuthHolderRepository
		{
			get 
			{
				if ( _MarketingAuthHolderRepository == null)
				{
					_MarketingAuthHolderRepository = new Sid.Entities.MarketingAuthHolderRepository(this);
				}
				return _MarketingAuthHolderRepository;
			}
		}

		private Sid.Entities.AgreementReconciliationRepository _AgreementReconciliationRepository;
		public Sid.Entities.AgreementReconciliationRepository AgreementReconciliationRepository
		{
			get 
			{
				if ( _AgreementReconciliationRepository == null)
				{
					_AgreementReconciliationRepository = new Sid.Entities.AgreementReconciliationRepository(this);
				}
				return _AgreementReconciliationRepository;
			}
		}

		private Sid.Entities.AgreementContactRepository _AgreementContactRepository;
		public Sid.Entities.AgreementContactRepository AgreementContactRepository
		{
			get 
			{
				if ( _AgreementContactRepository == null)
				{
					_AgreementContactRepository = new Sid.Entities.AgreementContactRepository(this);
				}
				return _AgreementContactRepository;
			}
		}

		private Sid.Entities.DevelopmentTypeRepository _DevelopmentTypeRepository;
		public Sid.Entities.DevelopmentTypeRepository DevelopmentTypeRepository
		{
			get 
			{
				if ( _DevelopmentTypeRepository == null)
				{
					_DevelopmentTypeRepository = new Sid.Entities.DevelopmentTypeRepository(this);
				}
				return _DevelopmentTypeRepository;
			}
		}

		private Sid.Entities.MpDevelopmentRepository _MpDevelopmentRepository;
		public Sid.Entities.MpDevelopmentRepository MpDevelopmentRepository
		{
			get 
			{
				if ( _MpDevelopmentRepository == null)
				{
					_MpDevelopmentRepository = new Sid.Entities.MpDevelopmentRepository(this);
				}
				return _MpDevelopmentRepository;
			}
		}

		private Sid.Entities.MpStatusRepository _MpStatusRepository;
		public Sid.Entities.MpStatusRepository MpStatusRepository
		{
			get 
			{
				if ( _MpStatusRepository == null)
				{
					_MpStatusRepository = new Sid.Entities.MpStatusRepository(this);
				}
				return _MpStatusRepository;
			}
		}

		private Sid.Entities.StudyReasonRepository _StudyReasonRepository;
		public Sid.Entities.StudyReasonRepository StudyReasonRepository
		{
			get 
			{
				if ( _StudyReasonRepository == null)
				{
					_StudyReasonRepository = new Sid.Entities.StudyReasonRepository(this);
				}
				return _StudyReasonRepository;
			}
		}

		private Sid.Entities.StudyPurposeRepository _StudyPurposeRepository;
		public Sid.Entities.StudyPurposeRepository StudyPurposeRepository
		{
			get 
			{
				if ( _StudyPurposeRepository == null)
				{
					_StudyPurposeRepository = new Sid.Entities.StudyPurposeRepository(this);
				}
				return _StudyPurposeRepository;
			}
		}

		private Sid.Entities.ClimaticConditionRepository _ClimaticConditionRepository;
		public Sid.Entities.ClimaticConditionRepository ClimaticConditionRepository
		{
			get 
			{
				if ( _ClimaticConditionRepository == null)
				{
					_ClimaticConditionRepository = new Sid.Entities.ClimaticConditionRepository(this);
				}
				return _ClimaticConditionRepository;
			}
		}

		private Sid.Entities.PhotostabilityRepository _PhotostabilityRepository;
		public Sid.Entities.PhotostabilityRepository PhotostabilityRepository
		{
			get 
			{
				if ( _PhotostabilityRepository == null)
				{
					_PhotostabilityRepository = new Sid.Entities.PhotostabilityRepository(this);
				}
				return _PhotostabilityRepository;
			}
		}

		private Sid.Entities.PharmacovigilanceRepository _PharmacovigilanceRepository;
		public Sid.Entities.PharmacovigilanceRepository PharmacovigilanceRepository
		{
			get 
			{
				if ( _PharmacovigilanceRepository == null)
				{
					_PharmacovigilanceRepository = new Sid.Entities.PharmacovigilanceRepository(this);
				}
				return _PharmacovigilanceRepository;
			}
		}

		private Sid.Entities.MpDossierRepository _MpDossierRepository;
		public Sid.Entities.MpDossierRepository MpDossierRepository
		{
			get 
			{
				if ( _MpDossierRepository == null)
				{
					_MpDossierRepository = new Sid.Entities.MpDossierRepository(this);
				}
				return _MpDossierRepository;
			}
		}

		private Sid.Entities.AgreementStatusRepository _AgreementStatusRepository;
		public Sid.Entities.AgreementStatusRepository AgreementStatusRepository
		{
			get 
			{
				if ( _AgreementStatusRepository == null)
				{
					_AgreementStatusRepository = new Sid.Entities.AgreementStatusRepository(this);
				}
				return _AgreementStatusRepository;
			}
		}

		private Sid.Entities.RiskManagementPlanRepository _RiskManagementPlanRepository;
		public Sid.Entities.RiskManagementPlanRepository RiskManagementPlanRepository
		{
			get 
			{
				if ( _RiskManagementPlanRepository == null)
				{
					_RiskManagementPlanRepository = new Sid.Entities.RiskManagementPlanRepository(this);
				}
				return _RiskManagementPlanRepository;
			}
		}

		private Sid.Entities.QualityReferenceRepository _QualityReferenceRepository;
		public Sid.Entities.QualityReferenceRepository QualityReferenceRepository
		{
			get 
			{
				if ( _QualityReferenceRepository == null)
				{
					_QualityReferenceRepository = new Sid.Entities.QualityReferenceRepository(this);
				}
				return _QualityReferenceRepository;
			}
		}

		private Sid.Entities.DmfCepVersionQRRepository _DmfCepVersionQRRepository;
		public Sid.Entities.DmfCepVersionQRRepository DmfCepVersionQRRepository
		{
			get 
			{
				if ( _DmfCepVersionQRRepository == null)
				{
					_DmfCepVersionQRRepository = new Sid.Entities.DmfCepVersionQRRepository(this);
				}
				return _DmfCepVersionQRRepository;
			}
		}

		private Sid.Entities.PeriodicSafetyUpdateReportRepository _PeriodicSafetyUpdateReportRepository;
		public Sid.Entities.PeriodicSafetyUpdateReportRepository PeriodicSafetyUpdateReportRepository
		{
			get 
			{
				if ( _PeriodicSafetyUpdateReportRepository == null)
				{
					_PeriodicSafetyUpdateReportRepository = new Sid.Entities.PeriodicSafetyUpdateReportRepository(this);
				}
				return _PeriodicSafetyUpdateReportRepository;
			}
		}

		private Sid.Entities.PsurSubmissionRepository _PsurSubmissionRepository;
		public Sid.Entities.PsurSubmissionRepository PsurSubmissionRepository
		{
			get 
			{
				if ( _PsurSubmissionRepository == null)
				{
					_PsurSubmissionRepository = new Sid.Entities.PsurSubmissionRepository(this);
				}
				return _PsurSubmissionRepository;
			}
		}

		private Sid.Entities.ApiManufacturerRepository _ApiManufacturerRepository;
		public Sid.Entities.ApiManufacturerRepository ApiManufacturerRepository
		{
			get 
			{
				if ( _ApiManufacturerRepository == null)
				{
					_ApiManufacturerRepository = new Sid.Entities.ApiManufacturerRepository(this);
				}
				return _ApiManufacturerRepository;
			}
		}

		private Sid.Entities.ImpliedManufacturerRepository _ImpliedManufacturerRepository;
		public Sid.Entities.ImpliedManufacturerRepository ImpliedManufacturerRepository
		{
			get 
			{
				if ( _ImpliedManufacturerRepository == null)
				{
					_ImpliedManufacturerRepository = new Sid.Entities.ImpliedManufacturerRepository(this);
				}
				return _ImpliedManufacturerRepository;
			}
		}

		private Sid.Entities.ManufacturerFunctionRepository _ManufacturerFunctionRepository;
		public Sid.Entities.ManufacturerFunctionRepository ManufacturerFunctionRepository
		{
			get 
			{
				if ( _ManufacturerFunctionRepository == null)
				{
					_ManufacturerFunctionRepository = new Sid.Entities.ManufacturerFunctionRepository(this);
				}
				return _ManufacturerFunctionRepository;
			}
		}

		private Sid.Entities.ImpliedManufacturerFunctionRepository _ImpliedManufacturerFunctionRepository;
		public Sid.Entities.ImpliedManufacturerFunctionRepository ImpliedManufacturerFunctionRepository
		{
			get 
			{
				if ( _ImpliedManufacturerFunctionRepository == null)
				{
					_ImpliedManufacturerFunctionRepository = new Sid.Entities.ImpliedManufacturerFunctionRepository(this);
				}
				return _ImpliedManufacturerFunctionRepository;
			}
		}

		private Sid.Entities.PackagingMaterialRepository _PackagingMaterialRepository;
		public Sid.Entities.PackagingMaterialRepository PackagingMaterialRepository
		{
			get 
			{
				if ( _PackagingMaterialRepository == null)
				{
					_PackagingMaterialRepository = new Sid.Entities.PackagingMaterialRepository(this);
				}
				return _PackagingMaterialRepository;
			}
		}

		private Sid.Entities.PsurSrStatusRepository _PsurSrStatusRepository;
		public Sid.Entities.PsurSrStatusRepository PsurSrStatusRepository
		{
			get 
			{
				if ( _PsurSrStatusRepository == null)
				{
					_PsurSrStatusRepository = new Sid.Entities.PsurSrStatusRepository(this);
				}
				return _PsurSrStatusRepository;
			}
		}

		private Sid.Entities.DeveloperRepository _DeveloperRepository;
		public Sid.Entities.DeveloperRepository DeveloperRepository
		{
			get 
			{
				if ( _DeveloperRepository == null)
				{
					_DeveloperRepository = new Sid.Entities.DeveloperRepository(this);
				}
				return _DeveloperRepository;
			}
		}

		private Sid.Entities.RmpStatusRepository _RmpStatusRepository;
		public Sid.Entities.RmpStatusRepository RmpStatusRepository
		{
			get 
			{
				if ( _RmpStatusRepository == null)
				{
					_RmpStatusRepository = new Sid.Entities.RmpStatusRepository(this);
				}
				return _RmpStatusRepository;
			}
		}

		private Sid.Entities.NotApprovedReasonRepository _NotApprovedReasonRepository;
		public Sid.Entities.NotApprovedReasonRepository NotApprovedReasonRepository
		{
			get 
			{
				if ( _NotApprovedReasonRepository == null)
				{
					_NotApprovedReasonRepository = new Sid.Entities.NotApprovedReasonRepository(this);
				}
				return _NotApprovedReasonRepository;
			}
		}

		private Sid.Entities.SafetyReferralRepository _SafetyReferralRepository;
		public Sid.Entities.SafetyReferralRepository SafetyReferralRepository
		{
			get 
			{
				if ( _SafetyReferralRepository == null)
				{
					_SafetyReferralRepository = new Sid.Entities.SafetyReferralRepository(this);
				}
				return _SafetyReferralRepository;
			}
		}

		private Sid.Entities.HolderManufacturerRepository _HolderManufacturerRepository;
		public Sid.Entities.HolderManufacturerRepository HolderManufacturerRepository
		{
			get 
			{
				if ( _HolderManufacturerRepository == null)
				{
					_HolderManufacturerRepository = new Sid.Entities.HolderManufacturerRepository(this);
				}
				return _HolderManufacturerRepository;
			}
		}

		private Sid.Entities.SafetyReferralStatusRepository _SafetyReferralStatusRepository;
		public Sid.Entities.SafetyReferralStatusRepository SafetyReferralStatusRepository
		{
			get 
			{
				if ( _SafetyReferralStatusRepository == null)
				{
					_SafetyReferralStatusRepository = new Sid.Entities.SafetyReferralStatusRepository(this);
				}
				return _SafetyReferralStatusRepository;
			}
		}

		private Sid.Entities.CommitmentRepository _CommitmentRepository;
		public Sid.Entities.CommitmentRepository CommitmentRepository
		{
			get 
			{
				if ( _CommitmentRepository == null)
				{
					_CommitmentRepository = new Sid.Entities.CommitmentRepository(this);
				}
				return _CommitmentRepository;
			}
		}

		private Sid.Entities.CommitmentStatusRepository _CommitmentStatusRepository;
		public Sid.Entities.CommitmentStatusRepository CommitmentStatusRepository
		{
			get 
			{
				if ( _CommitmentStatusRepository == null)
				{
					_CommitmentStatusRepository = new Sid.Entities.CommitmentStatusRepository(this);
				}
				return _CommitmentStatusRepository;
			}
		}

		private Sid.Entities.MpManufacturerRepository _MpManufacturerRepository;
		public Sid.Entities.MpManufacturerRepository MpManufacturerRepository
		{
			get 
			{
				if ( _MpManufacturerRepository == null)
				{
					_MpManufacturerRepository = new Sid.Entities.MpManufacturerRepository(this);
				}
				return _MpManufacturerRepository;
			}
		}

		private Sid.Entities.MpManufacturerFunctionRepository _MpManufacturerFunctionRepository;
		public Sid.Entities.MpManufacturerFunctionRepository MpManufacturerFunctionRepository
		{
			get 
			{
				if ( _MpManufacturerFunctionRepository == null)
				{
					_MpManufacturerFunctionRepository = new Sid.Entities.MpManufacturerFunctionRepository(this);
				}
				return _MpManufacturerFunctionRepository;
			}
		}

		private Sid.Entities.SignalRepository _SignalRepository;
		public Sid.Entities.SignalRepository SignalRepository
		{
			get 
			{
				if ( _SignalRepository == null)
				{
					_SignalRepository = new Sid.Entities.SignalRepository(this);
				}
				return _SignalRepository;
			}
		}

		private Sid.Entities.SignalStatusRepository _SignalStatusRepository;
		public Sid.Entities.SignalStatusRepository SignalStatusRepository
		{
			get 
			{
				if ( _SignalStatusRepository == null)
				{
					_SignalStatusRepository = new Sid.Entities.SignalStatusRepository(this);
				}
				return _SignalStatusRepository;
			}
		}

		private Sid.Entities.SignalClassificationRepository _SignalClassificationRepository;
		public Sid.Entities.SignalClassificationRepository SignalClassificationRepository
		{
			get 
			{
				if ( _SignalClassificationRepository == null)
				{
					_SignalClassificationRepository = new Sid.Entities.SignalClassificationRepository(this);
				}
				return _SignalClassificationRepository;
			}
		}

		private Sid.Entities.PhvAgreementRepository _PhvAgreementRepository;
		public Sid.Entities.PhvAgreementRepository PhvAgreementRepository
		{
			get 
			{
				if ( _PhvAgreementRepository == null)
				{
					_PhvAgreementRepository = new Sid.Entities.PhvAgreementRepository(this);
				}
				return _PhvAgreementRepository;
			}
		}

		private Sid.Entities.ManufacturerAddressRepository _ManufacturerAddressRepository;
		public Sid.Entities.ManufacturerAddressRepository ManufacturerAddressRepository
		{
			get 
			{
				if ( _ManufacturerAddressRepository == null)
				{
					_ManufacturerAddressRepository = new Sid.Entities.ManufacturerAddressRepository(this);
				}
				return _ManufacturerAddressRepository;
			}
		}

		private Sid.Entities.MpFormulationStatusRepository _MpFormulationStatusRepository;
		public Sid.Entities.MpFormulationStatusRepository MpFormulationStatusRepository
		{
			get 
			{
				if ( _MpFormulationStatusRepository == null)
				{
					_MpFormulationStatusRepository = new Sid.Entities.MpFormulationStatusRepository(this);
				}
				return _MpFormulationStatusRepository;
			}
		}

		private Sid.Entities.MpFormulationRepository _MpFormulationRepository;
		public Sid.Entities.MpFormulationRepository MpFormulationRepository
		{
			get 
			{
				if ( _MpFormulationRepository == null)
				{
					_MpFormulationRepository = new Sid.Entities.MpFormulationRepository(this);
				}
				return _MpFormulationRepository;
			}
		}

		private Sid.Entities.MpFormulationComponentRepository _MpFormulationComponentRepository;
		public Sid.Entities.MpFormulationComponentRepository MpFormulationComponentRepository
		{
			get 
			{
				if ( _MpFormulationComponentRepository == null)
				{
					_MpFormulationComponentRepository = new Sid.Entities.MpFormulationComponentRepository(this);
				}
				return _MpFormulationComponentRepository;
			}
		}

		private Sid.Entities.ComponentFunctionRepository _ComponentFunctionRepository;
		public Sid.Entities.ComponentFunctionRepository ComponentFunctionRepository
		{
			get 
			{
				if ( _ComponentFunctionRepository == null)
				{
					_ComponentFunctionRepository = new Sid.Entities.ComponentFunctionRepository(this);
				}
				return _ComponentFunctionRepository;
			}
		}

		private Sid.Entities.AmountValueTypeRepository _AmountValueTypeRepository;
		public Sid.Entities.AmountValueTypeRepository AmountValueTypeRepository
		{
			get 
			{
				if ( _AmountValueTypeRepository == null)
				{
					_AmountValueTypeRepository = new Sid.Entities.AmountValueTypeRepository(this);
				}
				return _AmountValueTypeRepository;
			}
		}

		private Sid.Entities.EmaUnitOfMeasurementRepository _EmaUnitOfMeasurementRepository;
		public Sid.Entities.EmaUnitOfMeasurementRepository EmaUnitOfMeasurementRepository
		{
			get 
			{
				if ( _EmaUnitOfMeasurementRepository == null)
				{
					_EmaUnitOfMeasurementRepository = new Sid.Entities.EmaUnitOfMeasurementRepository(this);
				}
				return _EmaUnitOfMeasurementRepository;
			}
		}

		private Sid.Entities.AgreementTerritoryRepository _AgreementTerritoryRepository;
		public Sid.Entities.AgreementTerritoryRepository AgreementTerritoryRepository
		{
			get 
			{
				if ( _AgreementTerritoryRepository == null)
				{
					_AgreementTerritoryRepository = new Sid.Entities.AgreementTerritoryRepository(this);
				}
				return _AgreementTerritoryRepository;
			}
		}

		private Sid.Entities.DossierStatusRepository _DossierStatusRepository;
		public Sid.Entities.DossierStatusRepository DossierStatusRepository
		{
			get 
			{
				if ( _DossierStatusRepository == null)
				{
					_DossierStatusRepository = new Sid.Entities.DossierStatusRepository(this);
				}
				return _DossierStatusRepository;
			}
		}

		private Sid.Entities.DossierAdminRouteRepository _DossierAdminRouteRepository;
		public Sid.Entities.DossierAdminRouteRepository DossierAdminRouteRepository
		{
			get 
			{
				if ( _DossierAdminRouteRepository == null)
				{
					_DossierAdminRouteRepository = new Sid.Entities.DossierAdminRouteRepository(this);
				}
				return _DossierAdminRouteRepository;
			}
		}

		private Sid.Entities.DossierAtcCodeRepository _DossierAtcCodeRepository;
		public Sid.Entities.DossierAtcCodeRepository DossierAtcCodeRepository
		{
			get 
			{
				if ( _DossierAtcCodeRepository == null)
				{
					_DossierAtcCodeRepository = new Sid.Entities.DossierAtcCodeRepository(this);
				}
				return _DossierAtcCodeRepository;
			}
		}

		private Sid.Entities.DossierProcNumberRepository _DossierProcNumberRepository;
		public Sid.Entities.DossierProcNumberRepository DossierProcNumberRepository
		{
			get 
			{
				if ( _DossierProcNumberRepository == null)
				{
					_DossierProcNumberRepository = new Sid.Entities.DossierProcNumberRepository(this);
				}
				return _DossierProcNumberRepository;
			}
		}

		private Sid.Entities.HelpFieldTypeRepository _HelpFieldTypeRepository;
		public Sid.Entities.HelpFieldTypeRepository HelpFieldTypeRepository
		{
			get 
			{
				if ( _HelpFieldTypeRepository == null)
				{
					_HelpFieldTypeRepository = new Sid.Entities.HelpFieldTypeRepository(this);
				}
				return _HelpFieldTypeRepository;
			}
		}

		private Sid.Entities.HelpFieldRepository _HelpFieldRepository;
		public Sid.Entities.HelpFieldRepository HelpFieldRepository
		{
			get 
			{
				if ( _HelpFieldRepository == null)
				{
					_HelpFieldRepository = new Sid.Entities.HelpFieldRepository(this);
				}
				return _HelpFieldRepository;
			}
		}

		private Sid.Entities.ThirdPartyQppvContactMeanRepository _ThirdPartyQppvContactMeanRepository;
		public Sid.Entities.ThirdPartyQppvContactMeanRepository ThirdPartyQppvContactMeanRepository
		{
			get 
			{
				if ( _ThirdPartyQppvContactMeanRepository == null)
				{
					_ThirdPartyQppvContactMeanRepository = new Sid.Entities.ThirdPartyQppvContactMeanRepository(this);
				}
				return _ThirdPartyQppvContactMeanRepository;
			}
		}

		private Sid.Entities.PsmfLocationRepository _PsmfLocationRepository;
		public Sid.Entities.PsmfLocationRepository PsmfLocationRepository
		{
			get 
			{
				if ( _PsmfLocationRepository == null)
				{
					_PsmfLocationRepository = new Sid.Entities.PsmfLocationRepository(this);
				}
				return _PsmfLocationRepository;
			}
		}

		private Sid.Entities.GroupRepository _GroupRepository;
		public Sid.Entities.GroupRepository GroupRepository
		{
			get 
			{
				if ( _GroupRepository == null)
				{
					_GroupRepository = new Sid.Entities.GroupRepository(this);
				}
				return _GroupRepository;
			}
		}

		private Sid.Entities.GroupCountryRepository _GroupCountryRepository;
		public Sid.Entities.GroupCountryRepository GroupCountryRepository
		{
			get 
			{
				if ( _GroupCountryRepository == null)
				{
					_GroupCountryRepository = new Sid.Entities.GroupCountryRepository(this);
				}
				return _GroupCountryRepository;
			}
		}

		private Sid.Entities.UserRoleEntityRepository _UserRoleEntityRepository;
		public Sid.Entities.UserRoleEntityRepository UserRoleEntityRepository
		{
			get 
			{
				if ( _UserRoleEntityRepository == null)
				{
					_UserRoleEntityRepository = new Sid.Entities.UserRoleEntityRepository(this);
				}
				return _UserRoleEntityRepository;
			}
		}

		private Sid.Entities.UserRoleGroupRepository _UserRoleGroupRepository;
		public Sid.Entities.UserRoleGroupRepository UserRoleGroupRepository
		{
			get 
			{
				if ( _UserRoleGroupRepository == null)
				{
					_UserRoleGroupRepository = new Sid.Entities.UserRoleGroupRepository(this);
				}
				return _UserRoleGroupRepository;
			}
		}

		private Sid.Entities.AuthorisationProcedureRepository _AuthorisationProcedureRepository;
		public Sid.Entities.AuthorisationProcedureRepository AuthorisationProcedureRepository
		{
			get 
			{
				if ( _AuthorisationProcedureRepository == null)
				{
					_AuthorisationProcedureRepository = new Sid.Entities.AuthorisationProcedureRepository(this);
				}
				return _AuthorisationProcedureRepository;
			}
		}

		private Sid.Entities.MapCountryRepository _MapCountryRepository;
		public Sid.Entities.MapCountryRepository MapCountryRepository
		{
			get 
			{
				if ( _MapCountryRepository == null)
				{
					_MapCountryRepository = new Sid.Entities.MapCountryRepository(this);
				}
				return _MapCountryRepository;
			}
		}

		private Sid.Entities.DossierCountryRepository _DossierCountryRepository;
		public Sid.Entities.DossierCountryRepository DossierCountryRepository
		{
			get 
			{
				if ( _DossierCountryRepository == null)
				{
					_DossierCountryRepository = new Sid.Entities.DossierCountryRepository(this);
				}
				return _DossierCountryRepository;
			}
		}

		private Sid.Entities.MarketingAgreementRepository _MarketingAgreementRepository;
		public Sid.Entities.MarketingAgreementRepository MarketingAgreementRepository
		{
			get 
			{
				if ( _MarketingAgreementRepository == null)
				{
					_MarketingAgreementRepository = new Sid.Entities.MarketingAgreementRepository(this);
				}
				return _MarketingAgreementRepository;
			}
		}

		private Sid.Entities.DossierCommitmentRepository _DossierCommitmentRepository;
		public Sid.Entities.DossierCommitmentRepository DossierCommitmentRepository
		{
			get 
			{
				if ( _DossierCommitmentRepository == null)
				{
					_DossierCommitmentRepository = new Sid.Entities.DossierCommitmentRepository(this);
				}
				return _DossierCommitmentRepository;
			}
		}

		private Sid.Entities.LanguageRepository _LanguageRepository;
		public Sid.Entities.LanguageRepository LanguageRepository
		{
			get 
			{
				if ( _LanguageRepository == null)
				{
					_LanguageRepository = new Sid.Entities.LanguageRepository(this);
				}
				return _LanguageRepository;
			}
		}

		private Sid.Entities.ManufacturingProcessRepository _ManufacturingProcessRepository;
		public Sid.Entities.ManufacturingProcessRepository ManufacturingProcessRepository
		{
			get 
			{
				if ( _ManufacturingProcessRepository == null)
				{
					_ManufacturingProcessRepository = new Sid.Entities.ManufacturingProcessRepository(this);
				}
				return _ManufacturingProcessRepository;
			}
		}

		private Sid.Entities.DossierMpManufacturerRepository _DossierMpManufacturerRepository;
		public Sid.Entities.DossierMpManufacturerRepository DossierMpManufacturerRepository
		{
			get 
			{
				if ( _DossierMpManufacturerRepository == null)
				{
					_DossierMpManufacturerRepository = new Sid.Entities.DossierMpManufacturerRepository(this);
				}
				return _DossierMpManufacturerRepository;
			}
		}

		private Sid.Entities.StorageConditionRepository _StorageConditionRepository;
		public Sid.Entities.StorageConditionRepository StorageConditionRepository
		{
			get 
			{
				if ( _StorageConditionRepository == null)
				{
					_StorageConditionRepository = new Sid.Entities.StorageConditionRepository(this);
				}
				return _StorageConditionRepository;
			}
		}

		private Sid.Entities.DossierCountryMktagrRepository _DossierCountryMktagrRepository;
		public Sid.Entities.DossierCountryMktagrRepository DossierCountryMktagrRepository
		{
			get 
			{
				if ( _DossierCountryMktagrRepository == null)
				{
					_DossierCountryMktagrRepository = new Sid.Entities.DossierCountryMktagrRepository(this);
				}
				return _DossierCountryMktagrRepository;
			}
		}

		private Sid.Entities.DispensingClassRepository _DispensingClassRepository;
		public Sid.Entities.DispensingClassRepository DispensingClassRepository
		{
			get 
			{
				if ( _DispensingClassRepository == null)
				{
					_DispensingClassRepository = new Sid.Entities.DispensingClassRepository(this);
				}
				return _DispensingClassRepository;
			}
		}

		private Sid.Entities.DispensingClassDetailRepository _DispensingClassDetailRepository;
		public Sid.Entities.DispensingClassDetailRepository DispensingClassDetailRepository
		{
			get 
			{
				if ( _DispensingClassDetailRepository == null)
				{
					_DispensingClassDetailRepository = new Sid.Entities.DispensingClassDetailRepository(this);
				}
				return _DispensingClassDetailRepository;
			}
		}

		private Sid.Entities.MarketingAuthStatusRepository _MarketingAuthStatusRepository;
		public Sid.Entities.MarketingAuthStatusRepository MarketingAuthStatusRepository
		{
			get 
			{
				if ( _MarketingAuthStatusRepository == null)
				{
					_MarketingAuthStatusRepository = new Sid.Entities.MarketingAuthStatusRepository(this);
				}
				return _MarketingAuthStatusRepository;
			}
		}

		private Sid.Entities.DossierCountryMkthistRepository _DossierCountryMkthistRepository;
		public Sid.Entities.DossierCountryMkthistRepository DossierCountryMkthistRepository
		{
			get 
			{
				if ( _DossierCountryMkthistRepository == null)
				{
					_DossierCountryMkthistRepository = new Sid.Entities.DossierCountryMkthistRepository(this);
				}
				return _DossierCountryMkthistRepository;
			}
		}

		private Sid.Entities.DossierCountryMknumberRepository _DossierCountryMknumberRepository;
		public Sid.Entities.DossierCountryMknumberRepository DossierCountryMknumberRepository
		{
			get 
			{
				if ( _DossierCountryMknumberRepository == null)
				{
					_DossierCountryMknumberRepository = new Sid.Entities.DossierCountryMknumberRepository(this);
				}
				return _DossierCountryMknumberRepository;
			}
		}

		private Sid.Entities.RegistrationProcessRepository _RegistrationProcessRepository;
		public Sid.Entities.RegistrationProcessRepository RegistrationProcessRepository
		{
			get 
			{
				if ( _RegistrationProcessRepository == null)
				{
					_RegistrationProcessRepository = new Sid.Entities.RegistrationProcessRepository(this);
				}
				return _RegistrationProcessRepository;
			}
		}

		private Sid.Entities.RpChangeControlRepository _RpChangeControlRepository;
		public Sid.Entities.RpChangeControlRepository RpChangeControlRepository
		{
			get 
			{
				if ( _RpChangeControlRepository == null)
				{
					_RpChangeControlRepository = new Sid.Entities.RpChangeControlRepository(this);
				}
				return _RpChangeControlRepository;
			}
		}

		private Sid.Entities.RpDispatchDateRepository _RpDispatchDateRepository;
		public Sid.Entities.RpDispatchDateRepository RpDispatchDateRepository
		{
			get 
			{
				if ( _RpDispatchDateRepository == null)
				{
					_RpDispatchDateRepository = new Sid.Entities.RpDispatchDateRepository(this);
				}
				return _RpDispatchDateRepository;
			}
		}

		private Sid.Entities.RpResponsabilityRepository _RpResponsabilityRepository;
		public Sid.Entities.RpResponsabilityRepository RpResponsabilityRepository
		{
			get 
			{
				if ( _RpResponsabilityRepository == null)
				{
					_RpResponsabilityRepository = new Sid.Entities.RpResponsabilityRepository(this);
				}
				return _RpResponsabilityRepository;
			}
		}

		private Sid.Entities.RpResponsabilityPersonRepository _RpResponsabilityPersonRepository;
		public Sid.Entities.RpResponsabilityPersonRepository RpResponsabilityPersonRepository
		{
			get 
			{
				if ( _RpResponsabilityPersonRepository == null)
				{
					_RpResponsabilityPersonRepository = new Sid.Entities.RpResponsabilityPersonRepository(this);
				}
				return _RpResponsabilityPersonRepository;
			}
		}

		private Sid.Entities.RpResponsabilityGroupRepository _RpResponsabilityGroupRepository;
		public Sid.Entities.RpResponsabilityGroupRepository RpResponsabilityGroupRepository
		{
			get 
			{
				if ( _RpResponsabilityGroupRepository == null)
				{
					_RpResponsabilityGroupRepository = new Sid.Entities.RpResponsabilityGroupRepository(this);
				}
				return _RpResponsabilityGroupRepository;
			}
		}

		private Sid.Entities.RpDeficiencyRepository _RpDeficiencyRepository;
		public Sid.Entities.RpDeficiencyRepository RpDeficiencyRepository
		{
			get 
			{
				if ( _RpDeficiencyRepository == null)
				{
					_RpDeficiencyRepository = new Sid.Entities.RpDeficiencyRepository(this);
				}
				return _RpDeficiencyRepository;
			}
		}

		private Sid.Entities.DeficiencyTypeRepository _DeficiencyTypeRepository;
		public Sid.Entities.DeficiencyTypeRepository DeficiencyTypeRepository
		{
			get 
			{
				if ( _DeficiencyTypeRepository == null)
				{
					_DeficiencyTypeRepository = new Sid.Entities.DeficiencyTypeRepository(this);
				}
				return _DeficiencyTypeRepository;
			}
		}

		private Sid.Entities.RpDeficiencyDateRepository _RpDeficiencyDateRepository;
		public Sid.Entities.RpDeficiencyDateRepository RpDeficiencyDateRepository
		{
			get 
			{
				if ( _RpDeficiencyDateRepository == null)
				{
					_RpDeficiencyDateRepository = new Sid.Entities.RpDeficiencyDateRepository(this);
				}
				return _RpDeficiencyDateRepository;
			}
		}

		private Sid.Entities.MaterialRepository _MaterialRepository;
		public Sid.Entities.MaterialRepository MaterialRepository
		{
			get 
			{
				if ( _MaterialRepository == null)
				{
					_MaterialRepository = new Sid.Entities.MaterialRepository(this);
				}
				return _MaterialRepository;
			}
		}

		private Sid.Entities.DossierMpCloSystemRepository _DossierMpCloSystemRepository;
		public Sid.Entities.DossierMpCloSystemRepository DossierMpCloSystemRepository
		{
			get 
			{
				if ( _DossierMpCloSystemRepository == null)
				{
					_DossierMpCloSystemRepository = new Sid.Entities.DossierMpCloSystemRepository(this);
				}
				return _DossierMpCloSystemRepository;
			}
		}

		private Sid.Entities.DossierMpCloSysMaterialRepository _DossierMpCloSysMaterialRepository;
		public Sid.Entities.DossierMpCloSysMaterialRepository DossierMpCloSysMaterialRepository
		{
			get 
			{
				if ( _DossierMpCloSysMaterialRepository == null)
				{
					_DossierMpCloSysMaterialRepository = new Sid.Entities.DossierMpCloSysMaterialRepository(this);
				}
				return _DossierMpCloSysMaterialRepository;
			}
		}

		private Sid.Entities.DossierCountryMpRepository _DossierCountryMpRepository;
		public Sid.Entities.DossierCountryMpRepository DossierCountryMpRepository
		{
			get 
			{
				if ( _DossierCountryMpRepository == null)
				{
					_DossierCountryMpRepository = new Sid.Entities.DossierCountryMpRepository(this);
				}
				return _DossierCountryMpRepository;
			}
		}

		private Sid.Entities.DossierCountryPsizeRepository _DossierCountryPsizeRepository;
		public Sid.Entities.DossierCountryPsizeRepository DossierCountryPsizeRepository
		{
			get 
			{
				if ( _DossierCountryPsizeRepository == null)
				{
					_DossierCountryPsizeRepository = new Sid.Entities.DossierCountryPsizeRepository(this);
				}
				return _DossierCountryPsizeRepository;
			}
		}

		private Sid.Entities.RpDeficiencyTypeRepository _RpDeficiencyTypeRepository;
		public Sid.Entities.RpDeficiencyTypeRepository RpDeficiencyTypeRepository
		{
			get 
			{
				if ( _RpDeficiencyTypeRepository == null)
				{
					_RpDeficiencyTypeRepository = new Sid.Entities.RpDeficiencyTypeRepository(this);
				}
				return _RpDeficiencyTypeRepository;
			}
		}

		private Sid.Entities.DossierCountryRpRepository _DossierCountryRpRepository;
		public Sid.Entities.DossierCountryRpRepository DossierCountryRpRepository
		{
			get 
			{
				if ( _DossierCountryRpRepository == null)
				{
					_DossierCountryRpRepository = new Sid.Entities.DossierCountryRpRepository(this);
				}
				return _DossierCountryRpRepository;
			}
		}

		private Sid.Entities.DossierCountryRpDateRepository _DossierCountryRpDateRepository;
		public Sid.Entities.DossierCountryRpDateRepository DossierCountryRpDateRepository
		{
			get 
			{
				if ( _DossierCountryRpDateRepository == null)
				{
					_DossierCountryRpDateRepository = new Sid.Entities.DossierCountryRpDateRepository(this);
				}
				return _DossierCountryRpDateRepository;
			}
		}

		private Sid.Entities.BioeqReportTypeRepository _BioeqReportTypeRepository;
		public Sid.Entities.BioeqReportTypeRepository BioeqReportTypeRepository
		{
			get 
			{
				if ( _BioeqReportTypeRepository == null)
				{
					_BioeqReportTypeRepository = new Sid.Entities.BioeqReportTypeRepository(this);
				}
				return _BioeqReportTypeRepository;
			}
		}

		private Sid.Entities.DossierCountryRpMknumberRepository _DossierCountryRpMknumberRepository;
		public Sid.Entities.DossierCountryRpMknumberRepository DossierCountryRpMknumberRepository
		{
			get 
			{
				if ( _DossierCountryRpMknumberRepository == null)
				{
					_DossierCountryRpMknumberRepository = new Sid.Entities.DossierCountryRpMknumberRepository(this);
				}
				return _DossierCountryRpMknumberRepository;
			}
		}

		private Sid.Entities.DossierMpManufTimeRepository _DossierMpManufTimeRepository;
		public Sid.Entities.DossierMpManufTimeRepository DossierMpManufTimeRepository
		{
			get 
			{
				if ( _DossierMpManufTimeRepository == null)
				{
					_DossierMpManufTimeRepository = new Sid.Entities.DossierMpManufTimeRepository(this);
				}
				return _DossierMpManufTimeRepository;
			}
		}

		private Sid.Entities.DossiersAuditRepository _DossiersAuditRepository;
		public Sid.Entities.DossiersAuditRepository DossiersAuditRepository
		{
			get 
			{
				if ( _DossiersAuditRepository == null)
				{
					_DossiersAuditRepository = new Sid.Entities.DossiersAuditRepository(this);
				}
				return _DossiersAuditRepository;
			}
		}

		private Sid.Entities.MedicinalProductsAuditRepository _MedicinalProductsAuditRepository;
		public Sid.Entities.MedicinalProductsAuditRepository MedicinalProductsAuditRepository
		{
			get 
			{
				if ( _MedicinalProductsAuditRepository == null)
				{
					_MedicinalProductsAuditRepository = new Sid.Entities.MedicinalProductsAuditRepository(this);
				}
				return _MedicinalProductsAuditRepository;
			}
		}

		private Sid.Entities.BioeqReportTypesAuditRepository _BioeqReportTypesAuditRepository;
		public Sid.Entities.BioeqReportTypesAuditRepository BioeqReportTypesAuditRepository
		{
			get 
			{
				if ( _BioeqReportTypesAuditRepository == null)
				{
					_BioeqReportTypesAuditRepository = new Sid.Entities.BioeqReportTypesAuditRepository(this);
				}
				return _BioeqReportTypesAuditRepository;
			}
		}

		private Sid.Entities.ActivSubcedmfcepsAuditRepository _ActivSubcedmfcepsAuditRepository;
		public Sid.Entities.ActivSubcedmfcepsAuditRepository ActivSubcedmfcepsAuditRepository
		{
			get 
			{
				if ( _ActivSubcedmfcepsAuditRepository == null)
				{
					_ActivSubcedmfcepsAuditRepository = new Sid.Entities.ActivSubcedmfcepsAuditRepository(this);
				}
				return _ActivSubcedmfcepsAuditRepository;
			}
		}

		private Sid.Entities.ActiveSubstancesAuditRepository _ActiveSubstancesAuditRepository;
		public Sid.Entities.ActiveSubstancesAuditRepository ActiveSubstancesAuditRepository
		{
			get 
			{
				if ( _ActiveSubstancesAuditRepository == null)
				{
					_ActiveSubstancesAuditRepository = new Sid.Entities.ActiveSubstancesAuditRepository(this);
				}
				return _ActiveSubstancesAuditRepository;
			}
		}

		private Sid.Entities.AmountValueTypesAuditRepository _AmountValueTypesAuditRepository;
		public Sid.Entities.AmountValueTypesAuditRepository AmountValueTypesAuditRepository
		{
			get 
			{
				if ( _AmountValueTypesAuditRepository == null)
				{
					_AmountValueTypesAuditRepository = new Sid.Entities.AmountValueTypesAuditRepository(this);
				}
				return _AmountValueTypesAuditRepository;
			}
		}

		private Sid.Entities.ApiManufacturersAuditRepository _ApiManufacturersAuditRepository;
		public Sid.Entities.ApiManufacturersAuditRepository ApiManufacturersAuditRepository
		{
			get 
			{
				if ( _ApiManufacturersAuditRepository == null)
				{
					_ApiManufacturersAuditRepository = new Sid.Entities.ApiManufacturersAuditRepository(this);
				}
				return _ApiManufacturersAuditRepository;
			}
		}

		private Sid.Entities.DossierMpDmfcepRepository _DossierMpDmfcepRepository;
		public Sid.Entities.DossierMpDmfcepRepository DossierMpDmfcepRepository
		{
			get 
			{
				if ( _DossierMpDmfcepRepository == null)
				{
					_DossierMpDmfcepRepository = new Sid.Entities.DossierMpDmfcepRepository(this);
				}
				return _DossierMpDmfcepRepository;
			}
		}

		private Sid.Entities.ApiPkgMaterialAuditRepository _ApiPkgMaterialAuditRepository;
		public Sid.Entities.ApiPkgMaterialAuditRepository ApiPkgMaterialAuditRepository
		{
			get 
			{
				if ( _ApiPkgMaterialAuditRepository == null)
				{
					_ApiPkgMaterialAuditRepository = new Sid.Entities.ApiPkgMaterialAuditRepository(this);
				}
				return _ApiPkgMaterialAuditRepository;
			}
		}

		private Sid.Entities.DossierMpDmfcepmatRepository _DossierMpDmfcepmatRepository;
		public Sid.Entities.DossierMpDmfcepmatRepository DossierMpDmfcepmatRepository
		{
			get 
			{
				if ( _DossierMpDmfcepmatRepository == null)
				{
					_DossierMpDmfcepmatRepository = new Sid.Entities.DossierMpDmfcepmatRepository(this);
				}
				return _DossierMpDmfcepmatRepository;
			}
		}

		private Sid.Entities.ApiManufacturerRossRepository _ApiManufacturerRossRepository;
		public Sid.Entities.ApiManufacturerRossRepository ApiManufacturerRossRepository
		{
			get 
			{
				if ( _ApiManufacturerRossRepository == null)
				{
					_ApiManufacturerRossRepository = new Sid.Entities.ApiManufacturerRossRepository(this);
				}
				return _ApiManufacturerRossRepository;
			}
		}

		private Sid.Entities.CurrencyRepository _CurrencyRepository;
		public Sid.Entities.CurrencyRepository CurrencyRepository
		{
			get 
			{
				if ( _CurrencyRepository == null)
				{
					_CurrencyRepository = new Sid.Entities.CurrencyRepository(this);
				}
				return _CurrencyRepository;
			}
		}

		private Sid.Entities.DossierCountryLocalRepository _DossierCountryLocalRepository;
		public Sid.Entities.DossierCountryLocalRepository DossierCountryLocalRepository
		{
			get 
			{
				if ( _DossierCountryLocalRepository == null)
				{
					_DossierCountryLocalRepository = new Sid.Entities.DossierCountryLocalRepository(this);
				}
				return _DossierCountryLocalRepository;
			}
		}

		private Sid.Entities.DossierCountryPricingRepository _DossierCountryPricingRepository;
		public Sid.Entities.DossierCountryPricingRepository DossierCountryPricingRepository
		{
			get 
			{
				if ( _DossierCountryPricingRepository == null)
				{
					_DossierCountryPricingRepository = new Sid.Entities.DossierCountryPricingRepository(this);
				}
				return _DossierCountryPricingRepository;
			}
		}

		private Sid.Entities.DossierCountryPresentationRepository _DossierCountryPresentationRepository;
		public Sid.Entities.DossierCountryPresentationRepository DossierCountryPresentationRepository
		{
			get 
			{
				if ( _DossierCountryPresentationRepository == null)
				{
					_DossierCountryPresentationRepository = new Sid.Entities.DossierCountryPresentationRepository(this);
				}
				return _DossierCountryPresentationRepository;
			}
		}

		private Sid.Entities.DossierCountryPresmpRepository _DossierCountryPresmpRepository;
		public Sid.Entities.DossierCountryPresmpRepository DossierCountryPresmpRepository
		{
			get 
			{
				if ( _DossierCountryPresmpRepository == null)
				{
					_DossierCountryPresmpRepository = new Sid.Entities.DossierCountryPresmpRepository(this);
				}
				return _DossierCountryPresmpRepository;
			}
		}

		private Sid.Entities.ModificationCategoryRepository _ModificationCategoryRepository;
		public Sid.Entities.ModificationCategoryRepository ModificationCategoryRepository
		{
			get 
			{
				if ( _ModificationCategoryRepository == null)
				{
					_ModificationCategoryRepository = new Sid.Entities.ModificationCategoryRepository(this);
				}
				return _ModificationCategoryRepository;
			}
		}

		private Sid.Entities.ModificationTypeRepository _ModificationTypeRepository;
		public Sid.Entities.ModificationTypeRepository ModificationTypeRepository
		{
			get 
			{
				if ( _ModificationTypeRepository == null)
				{
					_ModificationTypeRepository = new Sid.Entities.ModificationTypeRepository(this);
				}
				return _ModificationTypeRepository;
			}
		}

		private Sid.Entities.ModificationRepository _ModificationRepository;
		public Sid.Entities.ModificationRepository ModificationRepository
		{
			get 
			{
				if ( _ModificationRepository == null)
				{
					_ModificationRepository = new Sid.Entities.ModificationRepository(this);
				}
				return _ModificationRepository;
			}
		}

		private Sid.Entities.ModificationCountryRepository _ModificationCountryRepository;
		public Sid.Entities.ModificationCountryRepository ModificationCountryRepository
		{
			get 
			{
				if ( _ModificationCountryRepository == null)
				{
					_ModificationCountryRepository = new Sid.Entities.ModificationCountryRepository(this);
				}
				return _ModificationCountryRepository;
			}
		}

		private Sid.Entities.ClassificationVariationRepository _ClassificationVariationRepository;
		public Sid.Entities.ClassificationVariationRepository ClassificationVariationRepository
		{
			get 
			{
				if ( _ClassificationVariationRepository == null)
				{
					_ClassificationVariationRepository = new Sid.Entities.ClassificationVariationRepository(this);
				}
				return _ClassificationVariationRepository;
			}
		}

		private Sid.Entities.ModificationCountryStatusRepository _ModificationCountryStatusRepository;
		public Sid.Entities.ModificationCountryStatusRepository ModificationCountryStatusRepository
		{
			get 
			{
				if ( _ModificationCountryStatusRepository == null)
				{
					_ModificationCountryStatusRepository = new Sid.Entities.ModificationCountryStatusRepository(this);
				}
				return _ModificationCountryStatusRepository;
			}
		}

		private Sid.Entities.ModificationApplicationRepository _ModificationApplicationRepository;
		public Sid.Entities.ModificationApplicationRepository ModificationApplicationRepository
		{
			get 
			{
				if ( _ModificationApplicationRepository == null)
				{
					_ModificationApplicationRepository = new Sid.Entities.ModificationApplicationRepository(this);
				}
				return _ModificationApplicationRepository;
			}
		}

		private Sid.Entities.ModificationCountryAppRepository _ModificationCountryAppRepository;
		public Sid.Entities.ModificationCountryAppRepository ModificationCountryAppRepository
		{
			get 
			{
				if ( _ModificationCountryAppRepository == null)
				{
					_ModificationCountryAppRepository = new Sid.Entities.ModificationCountryAppRepository(this);
				}
				return _ModificationCountryAppRepository;
			}
		}

		private Sid.Entities.CriteriaFieldTypeRepository _CriteriaFieldTypeRepository;
		public Sid.Entities.CriteriaFieldTypeRepository CriteriaFieldTypeRepository
		{
			get 
			{
				if ( _CriteriaFieldTypeRepository == null)
				{
					_CriteriaFieldTypeRepository = new Sid.Entities.CriteriaFieldTypeRepository(this);
				}
				return _CriteriaFieldTypeRepository;
			}
		}

		private Sid.Entities.CustomQueryFieldRepository _CustomQueryFieldRepository;
		public Sid.Entities.CustomQueryFieldRepository CustomQueryFieldRepository
		{
			get 
			{
				if ( _CustomQueryFieldRepository == null)
				{
					_CustomQueryFieldRepository = new Sid.Entities.CustomQueryFieldRepository(this);
				}
				return _CustomQueryFieldRepository;
			}
		}

		private Sid.Entities.CriteriaOperatorRepository _CriteriaOperatorRepository;
		public Sid.Entities.CriteriaOperatorRepository CriteriaOperatorRepository
		{
			get 
			{
				if ( _CriteriaOperatorRepository == null)
				{
					_CriteriaOperatorRepository = new Sid.Entities.CriteriaOperatorRepository(this);
				}
				return _CriteriaOperatorRepository;
			}
		}

		private Sid.Entities.CustomQueryRepository _CustomQueryRepository;
		public Sid.Entities.CustomQueryRepository CustomQueryRepository
		{
			get 
			{
				if ( _CustomQueryRepository == null)
				{
					_CustomQueryRepository = new Sid.Entities.CustomQueryRepository(this);
				}
				return _CustomQueryRepository;
			}
		}

		private Sid.Entities.CriteriaLogicalOperatorRepository _CriteriaLogicalOperatorRepository;
		public Sid.Entities.CriteriaLogicalOperatorRepository CriteriaLogicalOperatorRepository
		{
			get 
			{
				if ( _CriteriaLogicalOperatorRepository == null)
				{
					_CriteriaLogicalOperatorRepository = new Sid.Entities.CriteriaLogicalOperatorRepository(this);
				}
				return _CriteriaLogicalOperatorRepository;
			}
		}

		private Sid.Entities.VersionTypeRepository _VersionTypeRepository;
		public Sid.Entities.VersionTypeRepository VersionTypeRepository
		{
			get 
			{
				if ( _VersionTypeRepository == null)
				{
					_VersionTypeRepository = new Sid.Entities.VersionTypeRepository(this);
				}
				return _VersionTypeRepository;
			}
		}

		private Sid.Entities.ApiStatusRepository _ApiStatusRepository;
		public Sid.Entities.ApiStatusRepository ApiStatusRepository
		{
			get 
			{
				if ( _ApiStatusRepository == null)
				{
					_ApiStatusRepository = new Sid.Entities.ApiStatusRepository(this);
				}
				return _ApiStatusRepository;
			}
		}

		private Sid.Entities.MedraVersionRepository _MedraVersionRepository;
		public Sid.Entities.MedraVersionRepository MedraVersionRepository
		{
			get 
			{
				if ( _MedraVersionRepository == null)
				{
					_MedraVersionRepository = new Sid.Entities.MedraVersionRepository(this);
				}
				return _MedraVersionRepository;
			}
		}

		private Sid.Entities.MedraLevelRepository _MedraLevelRepository;
		public Sid.Entities.MedraLevelRepository MedraLevelRepository
		{
			get 
			{
				if ( _MedraLevelRepository == null)
				{
					_MedraLevelRepository = new Sid.Entities.MedraLevelRepository(this);
				}
				return _MedraLevelRepository;
			}
		}

		private Sid.Entities.MpStabilityStudypurpRepository _MpStabilityStudypurpRepository;
		public Sid.Entities.MpStabilityStudypurpRepository MpStabilityStudypurpRepository
		{
			get 
			{
				if ( _MpStabilityStudypurpRepository == null)
				{
					_MpStabilityStudypurpRepository = new Sid.Entities.MpStabilityStudypurpRepository(this);
				}
				return _MpStabilityStudypurpRepository;
			}
		}

		private Sid.Entities.ProcessTypeRepository _ProcessTypeRepository;
		public Sid.Entities.ProcessTypeRepository ProcessTypeRepository
		{
			get 
			{
				if ( _ProcessTypeRepository == null)
				{
					_ProcessTypeRepository = new Sid.Entities.ProcessTypeRepository(this);
				}
				return _ProcessTypeRepository;
			}
		}

		private Sid.Entities.MpProcessTypeRepository _MpProcessTypeRepository;
		public Sid.Entities.MpProcessTypeRepository MpProcessTypeRepository
		{
			get 
			{
				if ( _MpProcessTypeRepository == null)
				{
					_MpProcessTypeRepository = new Sid.Entities.MpProcessTypeRepository(this);
				}
				return _MpProcessTypeRepository;
			}
		}

		private Sid.Entities.DecisionTypeRepository _DecisionTypeRepository;
		public Sid.Entities.DecisionTypeRepository DecisionTypeRepository
		{
			get 
			{
				if ( _DecisionTypeRepository == null)
				{
					_DecisionTypeRepository = new Sid.Entities.DecisionTypeRepository(this);
				}
				return _DecisionTypeRepository;
			}
		}

		private Sid.Entities.StudyTypeRepository _StudyTypeRepository;
		public Sid.Entities.StudyTypeRepository StudyTypeRepository
		{
			get 
			{
				if ( _StudyTypeRepository == null)
				{
					_StudyTypeRepository = new Sid.Entities.StudyTypeRepository(this);
				}
				return _StudyTypeRepository;
			}
		}

		private Sid.Entities.MpStabilityStudytypeRepository _MpStabilityStudytypeRepository;
		public Sid.Entities.MpStabilityStudytypeRepository MpStabilityStudytypeRepository
		{
			get 
			{
				if ( _MpStabilityStudytypeRepository == null)
				{
					_MpStabilityStudytypeRepository = new Sid.Entities.MpStabilityStudytypeRepository(this);
				}
				return _MpStabilityStudytypeRepository;
			}
		}

		private Sid.Entities.MpStabilityApimanRepository _MpStabilityApimanRepository;
		public Sid.Entities.MpStabilityApimanRepository MpStabilityApimanRepository
		{
			get 
			{
				if ( _MpStabilityApimanRepository == null)
				{
					_MpStabilityApimanRepository = new Sid.Entities.MpStabilityApimanRepository(this);
				}
				return _MpStabilityApimanRepository;
			}
		}

		private Sid.Entities.MonthAvaliableRepository _MonthAvaliableRepository;
		public Sid.Entities.MonthAvaliableRepository MonthAvaliableRepository
		{
			get 
			{
				if ( _MonthAvaliableRepository == null)
				{
					_MonthAvaliableRepository = new Sid.Entities.MonthAvaliableRepository(this);
				}
				return _MonthAvaliableRepository;
			}
		}

		private Sid.Entities.InvertedOptionRepository _InvertedOptionRepository;
		public Sid.Entities.InvertedOptionRepository InvertedOptionRepository
		{
			get 
			{
				if ( _InvertedOptionRepository == null)
				{
					_InvertedOptionRepository = new Sid.Entities.InvertedOptionRepository(this);
				}
				return _InvertedOptionRepository;
			}
		}

		private Sid.Entities.AssessedConditionRepository _AssessedConditionRepository;
		public Sid.Entities.AssessedConditionRepository AssessedConditionRepository
		{
			get 
			{
				if ( _AssessedConditionRepository == null)
				{
					_AssessedConditionRepository = new Sid.Entities.AssessedConditionRepository(this);
				}
				return _AssessedConditionRepository;
			}
		}

		private Sid.Entities.MpStabilityConditionRepository _MpStabilityConditionRepository;
		public Sid.Entities.MpStabilityConditionRepository MpStabilityConditionRepository
		{
			get 
			{
				if ( _MpStabilityConditionRepository == null)
				{
					_MpStabilityConditionRepository = new Sid.Entities.MpStabilityConditionRepository(this);
				}
				return _MpStabilityConditionRepository;
			}
		}

		private Sid.Entities.EntityItemRepository _EntityItemRepository;
		public Sid.Entities.EntityItemRepository EntityItemRepository
		{
			get 
			{
				if ( _EntityItemRepository == null)
				{
					_EntityItemRepository = new Sid.Entities.EntityItemRepository(this);
				}
				return _EntityItemRepository;
			}
		}

		private Sid.Entities.DossierSubStatusRepository _DossierSubStatusRepository;
		public Sid.Entities.DossierSubStatusRepository DossierSubStatusRepository
		{
			get 
			{
				if ( _DossierSubStatusRepository == null)
				{
					_DossierSubStatusRepository = new Sid.Entities.DossierSubStatusRepository(this);
				}
				return _DossierSubStatusRepository;
			}
		}

		private Sid.Entities.DossierCountryEmaInfoRepository _DossierCountryEmaInfoRepository;
		public Sid.Entities.DossierCountryEmaInfoRepository DossierCountryEmaInfoRepository
		{
			get 
			{
				if ( _DossierCountryEmaInfoRepository == null)
				{
					_DossierCountryEmaInfoRepository = new Sid.Entities.DossierCountryEmaInfoRepository(this);
				}
				return _DossierCountryEmaInfoRepository;
			}
		}

		private Sid.Entities.DossierCopyTypeRepository _DossierCopyTypeRepository;
		public Sid.Entities.DossierCopyTypeRepository DossierCopyTypeRepository
		{
			get 
			{
				if ( _DossierCopyTypeRepository == null)
				{
					_DossierCopyTypeRepository = new Sid.Entities.DossierCopyTypeRepository(this);
				}
				return _DossierCopyTypeRepository;
			}
		}

		private Sid.Entities.AntiTamperingDeviceRepository _AntiTamperingDeviceRepository;
		public Sid.Entities.AntiTamperingDeviceRepository AntiTamperingDeviceRepository
		{
			get 
			{
				if ( _AntiTamperingDeviceRepository == null)
				{
					_AntiTamperingDeviceRepository = new Sid.Entities.AntiTamperingDeviceRepository(this);
				}
				return _AntiTamperingDeviceRepository;
			}
		}

		private Sid.Entities.DossierApiManufacturerRepository _DossierApiManufacturerRepository;
		public Sid.Entities.DossierApiManufacturerRepository DossierApiManufacturerRepository
		{
			get 
			{
				if ( _DossierApiManufacturerRepository == null)
				{
					_DossierApiManufacturerRepository = new Sid.Entities.DossierApiManufacturerRepository(this);
				}
				return _DossierApiManufacturerRepository;
			}
		}

		private Sid.Entities.DossierMaterialRepository _DossierMaterialRepository;
		public Sid.Entities.DossierMaterialRepository DossierMaterialRepository
		{
			get 
			{
				if ( _DossierMaterialRepository == null)
				{
					_DossierMaterialRepository = new Sid.Entities.DossierMaterialRepository(this);
				}
				return _DossierMaterialRepository;
			}
		}

		private Sid.Entities.MonthPeriodRepository _MonthPeriodRepository;
		public Sid.Entities.MonthPeriodRepository MonthPeriodRepository
		{
			get 
			{
				if ( _MonthPeriodRepository == null)
				{
					_MonthPeriodRepository = new Sid.Entities.MonthPeriodRepository(this);
				}
				return _MonthPeriodRepository;
			}
		}

		private Sid.Entities.ApiSubstatusRepository _ApiSubstatusRepository;
		public Sid.Entities.ApiSubstatusRepository ApiSubstatusRepository
		{
			get 
			{
				if ( _ApiSubstatusRepository == null)
				{
					_ApiSubstatusRepository = new Sid.Entities.ApiSubstatusRepository(this);
				}
				return _ApiSubstatusRepository;
			}
		}

		private Sid.Entities.DossierCountryPresRepository _DossierCountryPresRepository;
		public Sid.Entities.DossierCountryPresRepository DossierCountryPresRepository
		{
			get 
			{
				if ( _DossierCountryPresRepository == null)
				{
					_DossierCountryPresRepository = new Sid.Entities.DossierCountryPresRepository(this);
				}
				return _DossierCountryPresRepository;
			}
		}

		private Sid.Entities.ModificationDossierRepository _ModificationDossierRepository;
		public Sid.Entities.ModificationDossierRepository ModificationDossierRepository
		{
			get 
			{
				if ( _ModificationDossierRepository == null)
				{
					_ModificationDossierRepository = new Sid.Entities.ModificationDossierRepository(this);
				}
				return _ModificationDossierRepository;
			}
		}

		private Sid.Entities.ModificationSubmissionRepository _ModificationSubmissionRepository;
		public Sid.Entities.ModificationSubmissionRepository ModificationSubmissionRepository
		{
			get 
			{
				if ( _ModificationSubmissionRepository == null)
				{
					_ModificationSubmissionRepository = new Sid.Entities.ModificationSubmissionRepository(this);
				}
				return _ModificationSubmissionRepository;
			}
		}

		private Sid.Entities.QppvCodeRepository _QppvCodeRepository;
		public Sid.Entities.QppvCodeRepository QppvCodeRepository
		{
			get 
			{
				if ( _QppvCodeRepository == null)
				{
					_QppvCodeRepository = new Sid.Entities.QppvCodeRepository(this);
				}
				return _QppvCodeRepository;
			}
		}

		private Sid.Entities.OrganisationRepository _OrganisationRepository;
		public Sid.Entities.OrganisationRepository OrganisationRepository
		{
			get 
			{
				if ( _OrganisationRepository == null)
				{
					_OrganisationRepository = new Sid.Entities.OrganisationRepository(this);
				}
				return _OrganisationRepository;
			}
		}

		private Sid.Entities.PsmflCodeRepository _PsmflCodeRepository;
		public Sid.Entities.PsmflCodeRepository PsmflCodeRepository
		{
			get 
			{
				if ( _PsmflCodeRepository == null)
				{
					_PsmflCodeRepository = new Sid.Entities.PsmflCodeRepository(this);
				}
				return _PsmflCodeRepository;
			}
		}

		private Sid.Entities.PhvEmailRepository _PhvEmailRepository;
		public Sid.Entities.PhvEmailRepository PhvEmailRepository
		{
			get 
			{
				if ( _PhvEmailRepository == null)
				{
					_PhvEmailRepository = new Sid.Entities.PhvEmailRepository(this);
				}
				return _PhvEmailRepository;
			}
		}

		private Sid.Entities.PhvPhoneRepository _PhvPhoneRepository;
		public Sid.Entities.PhvPhoneRepository PhvPhoneRepository
		{
			get 
			{
				if ( _PhvPhoneRepository == null)
				{
					_PhvPhoneRepository = new Sid.Entities.PhvPhoneRepository(this);
				}
				return _PhvPhoneRepository;
			}
		}

		private Sid.Entities.ModificationStatusRepository _ModificationStatusRepository;
		public Sid.Entities.ModificationStatusRepository ModificationStatusRepository
		{
			get 
			{
				if ( _ModificationStatusRepository == null)
				{
					_ModificationStatusRepository = new Sid.Entities.ModificationStatusRepository(this);
				}
				return _ModificationStatusRepository;
			}
		}

		private Sid.Entities.DeficiencyDateTypeRepository _DeficiencyDateTypeRepository;
		public Sid.Entities.DeficiencyDateTypeRepository DeficiencyDateTypeRepository
		{
			get 
			{
				if ( _DeficiencyDateTypeRepository == null)
				{
					_DeficiencyDateTypeRepository = new Sid.Entities.DeficiencyDateTypeRepository(this);
				}
				return _DeficiencyDateTypeRepository;
			}
		}

		private Sid.Entities.ModificationDeficiencyRepository _ModificationDeficiencyRepository;
		public Sid.Entities.ModificationDeficiencyRepository ModificationDeficiencyRepository
		{
			get 
			{
				if ( _ModificationDeficiencyRepository == null)
				{
					_ModificationDeficiencyRepository = new Sid.Entities.ModificationDeficiencyRepository(this);
				}
				return _ModificationDeficiencyRepository;
			}
		}

		private Sid.Entities.ModificationCodeRepository _ModificationCodeRepository;
		public Sid.Entities.ModificationCodeRepository ModificationCodeRepository
		{
			get 
			{
				if ( _ModificationCodeRepository == null)
				{
					_ModificationCodeRepository = new Sid.Entities.ModificationCodeRepository(this);
				}
				return _ModificationCodeRepository;
			}
		}

		private Sid.Entities.ModificationCodeRespRepository _ModificationCodeRespRepository;
		public Sid.Entities.ModificationCodeRespRepository ModificationCodeRespRepository
		{
			get 
			{
				if ( _ModificationCodeRespRepository == null)
				{
					_ModificationCodeRespRepository = new Sid.Entities.ModificationCodeRespRepository(this);
				}
				return _ModificationCodeRespRepository;
			}
		}

		private Sid.Entities.ModificationDossierAppRepository _ModificationDossierAppRepository;
		public Sid.Entities.ModificationDossierAppRepository ModificationDossierAppRepository
		{
			get 
			{
				if ( _ModificationDossierAppRepository == null)
				{
					_ModificationDossierAppRepository = new Sid.Entities.ModificationDossierAppRepository(this);
				}
				return _ModificationDossierAppRepository;
			}
		}

		private Sid.Entities.DeficiencyDateTypeMapRepository _DeficiencyDateTypeMapRepository;
		public Sid.Entities.DeficiencyDateTypeMapRepository DeficiencyDateTypeMapRepository
		{
			get 
			{
				if ( _DeficiencyDateTypeMapRepository == null)
				{
					_DeficiencyDateTypeMapRepository = new Sid.Entities.DeficiencyDateTypeMapRepository(this);
				}
				return _DeficiencyDateTypeMapRepository;
			}
		}

		private Sid.Entities.TemporarySuspensionTypeRepository _TemporarySuspensionTypeRepository;
		public Sid.Entities.TemporarySuspensionTypeRepository TemporarySuspensionTypeRepository
		{
			get 
			{
				if ( _TemporarySuspensionTypeRepository == null)
				{
					_TemporarySuspensionTypeRepository = new Sid.Entities.TemporarySuspensionTypeRepository(this);
				}
				return _TemporarySuspensionTypeRepository;
			}
		}

		private Sid.Entities.DossierCountryTermRepository _DossierCountryTermRepository;
		public Sid.Entities.DossierCountryTermRepository DossierCountryTermRepository
		{
			get 
			{
				if ( _DossierCountryTermRepository == null)
				{
					_DossierCountryTermRepository = new Sid.Entities.DossierCountryTermRepository(this);
				}
				return _DossierCountryTermRepository;
			}
		}

		private Sid.Entities.SmeStatusRepository _SmeStatusRepository;
		public Sid.Entities.SmeStatusRepository SmeStatusRepository
		{
			get 
			{
				if ( _SmeStatusRepository == null)
				{
					_SmeStatusRepository = new Sid.Entities.SmeStatusRepository(this);
				}
				return _SmeStatusRepository;
			}
		}

		private Sid.Entities.ExcelFieldRepository _ExcelFieldRepository;
		public Sid.Entities.ExcelFieldRepository ExcelFieldRepository
		{
			get 
			{
				if ( _ExcelFieldRepository == null)
				{
					_ExcelFieldRepository = new Sid.Entities.ExcelFieldRepository(this);
				}
				return _ExcelFieldRepository;
			}
		}

		private Sid.Entities.MpExcelFieldRepository _MpExcelFieldRepository;
		public Sid.Entities.MpExcelFieldRepository MpExcelFieldRepository
		{
			get 
			{
				if ( _MpExcelFieldRepository == null)
				{
					_MpExcelFieldRepository = new Sid.Entities.MpExcelFieldRepository(this);
				}
				return _MpExcelFieldRepository;
			}
		}

		private Sid.Entities.MedraLltTermRepository _MedraLltTermRepository;
		public Sid.Entities.MedraLltTermRepository MedraLltTermRepository
		{
			get 
			{
				if ( _MedraLltTermRepository == null)
				{
					_MedraLltTermRepository = new Sid.Entities.MedraLltTermRepository(this);
				}
				return _MedraLltTermRepository;
			}
		}

		private Sid.Entities.MedraPtTermRepository _MedraPtTermRepository;
		public Sid.Entities.MedraPtTermRepository MedraPtTermRepository
		{
			get 
			{
				if ( _MedraPtTermRepository == null)
				{
					_MedraPtTermRepository = new Sid.Entities.MedraPtTermRepository(this);
				}
				return _MedraPtTermRepository;
			}
		}

		private Sid.Entities.MedraHltTermRepository _MedraHltTermRepository;
		public Sid.Entities.MedraHltTermRepository MedraHltTermRepository
		{
			get 
			{
				if ( _MedraHltTermRepository == null)
				{
					_MedraHltTermRepository = new Sid.Entities.MedraHltTermRepository(this);
				}
				return _MedraHltTermRepository;
			}
		}

		private Sid.Entities.MedraHlgtTermRepository _MedraHlgtTermRepository;
		public Sid.Entities.MedraHlgtTermRepository MedraHlgtTermRepository
		{
			get 
			{
				if ( _MedraHlgtTermRepository == null)
				{
					_MedraHlgtTermRepository = new Sid.Entities.MedraHlgtTermRepository(this);
				}
				return _MedraHlgtTermRepository;
			}
		}

		private Sid.Entities.MedraSocTermRepository _MedraSocTermRepository;
		public Sid.Entities.MedraSocTermRepository MedraSocTermRepository
		{
			get 
			{
				if ( _MedraSocTermRepository == null)
				{
					_MedraSocTermRepository = new Sid.Entities.MedraSocTermRepository(this);
				}
				return _MedraSocTermRepository;
			}
		}

		private Sid.Entities.MedraHltPtTermRepository _MedraHltPtTermRepository;
		public Sid.Entities.MedraHltPtTermRepository MedraHltPtTermRepository
		{
			get 
			{
				if ( _MedraHltPtTermRepository == null)
				{
					_MedraHltPtTermRepository = new Sid.Entities.MedraHltPtTermRepository(this);
				}
				return _MedraHltPtTermRepository;
			}
		}

		private Sid.Entities.MedraHlgtHltTermRepository _MedraHlgtHltTermRepository;
		public Sid.Entities.MedraHlgtHltTermRepository MedraHlgtHltTermRepository
		{
			get 
			{
				if ( _MedraHlgtHltTermRepository == null)
				{
					_MedraHlgtHltTermRepository = new Sid.Entities.MedraHlgtHltTermRepository(this);
				}
				return _MedraHlgtHltTermRepository;
			}
		}

		private Sid.Entities.MedraSocHlgtTermRepository _MedraSocHlgtTermRepository;
		public Sid.Entities.MedraSocHlgtTermRepository MedraSocHlgtTermRepository
		{
			get 
			{
				if ( _MedraSocHlgtTermRepository == null)
				{
					_MedraSocHlgtTermRepository = new Sid.Entities.MedraSocHlgtTermRepository(this);
				}
				return _MedraSocHlgtTermRepository;
			}
		}

		private Sid.Entities.DossierExcelFieldRepository _DossierExcelFieldRepository;
		public Sid.Entities.DossierExcelFieldRepository DossierExcelFieldRepository
		{
			get 
			{
				if ( _DossierExcelFieldRepository == null)
				{
					_DossierExcelFieldRepository = new Sid.Entities.DossierExcelFieldRepository(this);
				}
				return _DossierExcelFieldRepository;
			}
		}

		private Sid.Entities.AntitamperingRepository _AntitamperingRepository;
		public Sid.Entities.AntitamperingRepository AntitamperingRepository
		{
			get 
			{
				if ( _AntitamperingRepository == null)
				{
					_AntitamperingRepository = new Sid.Entities.AntitamperingRepository(this);
				}
				return _AntitamperingRepository;
			}
		}

		private Sid.Entities.UniqueIdentifierRepository _UniqueIdentifierRepository;
		public Sid.Entities.UniqueIdentifierRepository UniqueIdentifierRepository
		{
			get 
			{
				if ( _UniqueIdentifierRepository == null)
				{
					_UniqueIdentifierRepository = new Sid.Entities.UniqueIdentifierRepository(this);
				}
				return _UniqueIdentifierRepository;
			}
		}

		private Sid.Entities.DossierCountryPresSctRepository _DossierCountryPresSctRepository;
		public Sid.Entities.DossierCountryPresSctRepository DossierCountryPresSctRepository
		{
			get 
			{
				if ( _DossierCountryPresSctRepository == null)
				{
					_DossierCountryPresSctRepository = new Sid.Entities.DossierCountryPresSctRepository(this);
				}
				return _DossierCountryPresSctRepository;
			}
		}

		private Sid.Entities.BeenAuditedRepository _BeenAuditedRepository;
		public Sid.Entities.BeenAuditedRepository BeenAuditedRepository
		{
			get 
			{
				if ( _BeenAuditedRepository == null)
				{
					_BeenAuditedRepository = new Sid.Entities.BeenAuditedRepository(this);
				}
				return _BeenAuditedRepository;
			}
		}

		private Sid.Entities.DossierCountryRpProvRepository _DossierCountryRpProvRepository;
		public Sid.Entities.DossierCountryRpProvRepository DossierCountryRpProvRepository
		{
			get 
			{
				if ( _DossierCountryRpProvRepository == null)
				{
					_DossierCountryRpProvRepository = new Sid.Entities.DossierCountryRpProvRepository(this);
				}
				return _DossierCountryRpProvRepository;
			}
		}

		private Sid.Entities.CurrentMarketingStatusRepository _CurrentMarketingStatusRepository;
		public Sid.Entities.CurrentMarketingStatusRepository CurrentMarketingStatusRepository
		{
			get 
			{
				if ( _CurrentMarketingStatusRepository == null)
				{
					_CurrentMarketingStatusRepository = new Sid.Entities.CurrentMarketingStatusRepository(this);
				}
				return _CurrentMarketingStatusRepository;
			}
		}

		private Sid.Entities.SidAtcCodeRepository _SidAtcCodeRepository;
		public Sid.Entities.SidAtcCodeRepository SidAtcCodeRepository
		{
			get 
			{
				if ( _SidAtcCodeRepository == null)
				{
					_SidAtcCodeRepository = new Sid.Entities.SidAtcCodeRepository(this);
				}
				return _SidAtcCodeRepository;
			}
		}

		private Sid.Entities.ApiExcelFieldRepository _ApiExcelFieldRepository;
		public Sid.Entities.ApiExcelFieldRepository ApiExcelFieldRepository
		{
			get 
			{
				if ( _ApiExcelFieldRepository == null)
				{
					_ApiExcelFieldRepository = new Sid.Entities.ApiExcelFieldRepository(this);
				}
				return _ApiExcelFieldRepository;
			}
		}

		private Sid.Entities.ModificationCountryMockupRepository _ModificationCountryMockupRepository;
		public Sid.Entities.ModificationCountryMockupRepository ModificationCountryMockupRepository
		{
			get 
			{
				if ( _ModificationCountryMockupRepository == null)
				{
					_ModificationCountryMockupRepository = new Sid.Entities.ModificationCountryMockupRepository(this);
				}
				return _ModificationCountryMockupRepository;
			}
		}

		private Sid.Entities.ModificationExcelFieldRepository _ModificationExcelFieldRepository;
		public Sid.Entities.ModificationExcelFieldRepository ModificationExcelFieldRepository
		{
			get 
			{
				if ( _ModificationExcelFieldRepository == null)
				{
					_ModificationExcelFieldRepository = new Sid.Entities.ModificationExcelFieldRepository(this);
				}
				return _ModificationExcelFieldRepository;
			}
		}

		private Sid.Entities.NormonClientDecisionRepository _NormonClientDecisionRepository;
		public Sid.Entities.NormonClientDecisionRepository NormonClientDecisionRepository
		{
			get 
			{
				if ( _NormonClientDecisionRepository == null)
				{
					_NormonClientDecisionRepository = new Sid.Entities.NormonClientDecisionRepository(this);
				}
				return _NormonClientDecisionRepository;
			}
		}

		private Sid.Entities.SubmissionMockupRepository _SubmissionMockupRepository;
		public Sid.Entities.SubmissionMockupRepository SubmissionMockupRepository
		{
			get 
			{
				if ( _SubmissionMockupRepository == null)
				{
					_SubmissionMockupRepository = new Sid.Entities.SubmissionMockupRepository(this);
				}
				return _SubmissionMockupRepository;
			}
		}

		private Sid.Entities.ContainerVolumeRepository _ContainerVolumeRepository;
		public Sid.Entities.ContainerVolumeRepository ContainerVolumeRepository
		{
			get 
			{
				if ( _ContainerVolumeRepository == null)
				{
					_ContainerVolumeRepository = new Sid.Entities.ContainerVolumeRepository(this);
				}
				return _ContainerVolumeRepository;
			}
		}

		private Sid.Entities.TaskTypeRepository _TaskTypeRepository;
		public Sid.Entities.TaskTypeRepository TaskTypeRepository
		{
			get 
			{
				if ( _TaskTypeRepository == null)
				{
					_TaskTypeRepository = new Sid.Entities.TaskTypeRepository(this);
				}
				return _TaskTypeRepository;
			}
		}

		private Sid.Entities.TaskTypeAgreementRepository _TaskTypeAgreementRepository;
		public Sid.Entities.TaskTypeAgreementRepository TaskTypeAgreementRepository
		{
			get 
			{
				if ( _TaskTypeAgreementRepository == null)
				{
					_TaskTypeAgreementRepository = new Sid.Entities.TaskTypeAgreementRepository(this);
				}
				return _TaskTypeAgreementRepository;
			}
		}

		private Sid.Entities.TaskActionRepository _TaskActionRepository;
		public Sid.Entities.TaskActionRepository TaskActionRepository
		{
			get 
			{
				if ( _TaskActionRepository == null)
				{
					_TaskActionRepository = new Sid.Entities.TaskActionRepository(this);
				}
				return _TaskActionRepository;
			}
		}

		private Sid.Entities.TaskRepository _TaskRepository;
		public Sid.Entities.TaskRepository TaskRepository
		{
			get 
			{
				if ( _TaskRepository == null)
				{
					_TaskRepository = new Sid.Entities.TaskRepository(this);
				}
				return _TaskRepository;
			}
		}

		private Sid.Entities.EmaInfoFormRepository _EmaInfoFormRepository;
		public Sid.Entities.EmaInfoFormRepository EmaInfoFormRepository
		{
			get 
			{
				if ( _EmaInfoFormRepository == null)
				{
					_EmaInfoFormRepository = new Sid.Entities.EmaInfoFormRepository(this);
				}
				return _EmaInfoFormRepository;
			}
		}

		private Sid.Entities.EmaInfoFormComponentRepository _EmaInfoFormComponentRepository;
		public Sid.Entities.EmaInfoFormComponentRepository EmaInfoFormComponentRepository
		{
			get 
			{
				if ( _EmaInfoFormComponentRepository == null)
				{
					_EmaInfoFormComponentRepository = new Sid.Entities.EmaInfoFormComponentRepository(this);
				}
				return _EmaInfoFormComponentRepository;
			}
		}

		private Sid.Entities.AffectedInformationRepository _AffectedInformationRepository;
		public Sid.Entities.AffectedInformationRepository AffectedInformationRepository
		{
			get 
			{
				if ( _AffectedInformationRepository == null)
				{
					_AffectedInformationRepository = new Sid.Entities.AffectedInformationRepository(this);
				}
				return _AffectedInformationRepository;
			}
		}

		private Sid.Entities.ModCountryStatusRepository _ModCountryStatusRepository;
		public Sid.Entities.ModCountryStatusRepository ModCountryStatusRepository
		{
			get 
			{
				if ( _ModCountryStatusRepository == null)
				{
					_ModCountryStatusRepository = new Sid.Entities.ModCountryStatusRepository(this);
				}
				return _ModCountryStatusRepository;
			}
		}

		private Sid.Entities.ImpliedManufacFuncRepository _ImpliedManufacFuncRepository;
		public Sid.Entities.ImpliedManufacFuncRepository ImpliedManufacFuncRepository
		{
			get 
			{
				if ( _ImpliedManufacFuncRepository == null)
				{
					_ImpliedManufacFuncRepository = new Sid.Entities.ImpliedManufacFuncRepository(this);
				}
				return _ImpliedManufacFuncRepository;
			}
		}

		private Sid.Entities.ApiManufacFunctionRepository _ApiManufacFunctionRepository;
		public Sid.Entities.ApiManufacFunctionRepository ApiManufacFunctionRepository
		{
			get 
			{
				if ( _ApiManufacFunctionRepository == null)
				{
					_ApiManufacFunctionRepository = new Sid.Entities.ApiManufacFunctionRepository(this);
				}
				return _ApiManufacFunctionRepository;
			}
		}

		private Sid.Entities.VariationTypeRepository _VariationTypeRepository;
		public Sid.Entities.VariationTypeRepository VariationTypeRepository
		{
			get 
			{
				if ( _VariationTypeRepository == null)
				{
					_VariationTypeRepository = new Sid.Entities.VariationTypeRepository(this);
				}
				return _VariationTypeRepository;
			}
		}

		private Sid.Entities.CommissionTypeRepository _CommissionTypeRepository;
		public Sid.Entities.CommissionTypeRepository CommissionTypeRepository
		{
			get 
			{
				if ( _CommissionTypeRepository == null)
				{
					_CommissionTypeRepository = new Sid.Entities.CommissionTypeRepository(this);
				}
				return _CommissionTypeRepository;
			}
		}

		private Sid.Entities.NotificationTypeRepository _NotificationTypeRepository;
		public Sid.Entities.NotificationTypeRepository NotificationTypeRepository
		{
			get 
			{
				if ( _NotificationTypeRepository == null)
				{
					_NotificationTypeRepository = new Sid.Entities.NotificationTypeRepository(this);
				}
				return _NotificationTypeRepository;
			}
		}

		private Sid.Entities.NotificationTypeProcRepository _NotificationTypeProcRepository;
		public Sid.Entities.NotificationTypeProcRepository NotificationTypeProcRepository
		{
			get 
			{
				if ( _NotificationTypeProcRepository == null)
				{
					_NotificationTypeProcRepository = new Sid.Entities.NotificationTypeProcRepository(this);
				}
				return _NotificationTypeProcRepository;
			}
		}

		private Sid.Entities.NotificationTypeDefRepository _NotificationTypeDefRepository;
		public Sid.Entities.NotificationTypeDefRepository NotificationTypeDefRepository
		{
			get 
			{
				if ( _NotificationTypeDefRepository == null)
				{
					_NotificationTypeDefRepository = new Sid.Entities.NotificationTypeDefRepository(this);
				}
				return _NotificationTypeDefRepository;
			}
		}

		private Sid.Entities.NotificationTypeAgreeRepository _NotificationTypeAgreeRepository;
		public Sid.Entities.NotificationTypeAgreeRepository NotificationTypeAgreeRepository
		{
			get 
			{
				if ( _NotificationTypeAgreeRepository == null)
				{
					_NotificationTypeAgreeRepository = new Sid.Entities.NotificationTypeAgreeRepository(this);
				}
				return _NotificationTypeAgreeRepository;
			}
		}

		private Sid.Entities.MpStabilityManufacRepository _MpStabilityManufacRepository;
		public Sid.Entities.MpStabilityManufacRepository MpStabilityManufacRepository
		{
			get 
			{
				if ( _MpStabilityManufacRepository == null)
				{
					_MpStabilityManufacRepository = new Sid.Entities.MpStabilityManufacRepository(this);
				}
				return _MpStabilityManufacRepository;
			}
		}

		private Sid.Entities.NotificationDcRepository _NotificationDcRepository;
		public Sid.Entities.NotificationDcRepository NotificationDcRepository
		{
			get 
			{
				if ( _NotificationDcRepository == null)
				{
					_NotificationDcRepository = new Sid.Entities.NotificationDcRepository(this);
				}
				return _NotificationDcRepository;
			}
		}

		private Sid.Entities.NotificationFieldRepository _NotificationFieldRepository;
		public Sid.Entities.NotificationFieldRepository NotificationFieldRepository
		{
			get 
			{
				if ( _NotificationFieldRepository == null)
				{
					_NotificationFieldRepository = new Sid.Entities.NotificationFieldRepository(this);
				}
				return _NotificationFieldRepository;
			}
		}

		private Sid.Entities.NotificationTypeMailRepository _NotificationTypeMailRepository;
		public Sid.Entities.NotificationTypeMailRepository NotificationTypeMailRepository
		{
			get 
			{
				if ( _NotificationTypeMailRepository == null)
				{
					_NotificationTypeMailRepository = new Sid.Entities.NotificationTypeMailRepository(this);
				}
				return _NotificationTypeMailRepository;
			}
		}

		private Sid.Entities.NotificationRepository _NotificationRepository;
		public Sid.Entities.NotificationRepository NotificationRepository
		{
			get 
			{
				if ( _NotificationRepository == null)
				{
					_NotificationRepository = new Sid.Entities.NotificationRepository(this);
				}
				return _NotificationRepository;
			}
		}
	}
}
namespace Sid.Entities
{
	public static partial class StoredProcedures
	{
		public static DbCommand CreateSetUserContextProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "SET_USER_CONTEXT";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "USER_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "USER_ID";
			cmd.Parameters.Add(p);

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "DEFAULT_SCHEMA";
			p.DbType = DbType.String;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "DEFAULT_SCHEMA";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteActiveSubstanceProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_ACTIVE_SUBSTANCE";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "API_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "API_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteDossierProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_DOSSIER";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "P_DOSSIER_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "P_DOSSIER_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteMedicinalProductProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_MEDICINAL_PRODUCT";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "P_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "P_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteModificationProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_MODIFICATION";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "MOD_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "MOD_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteModSubmissionProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_MOD_SUBMISSION";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "SUB_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "SUB_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteModApplicationProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_MOD_APPLICATION";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "APP_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "APP_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteApiManufactVersionProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_API_MANUFACT_VERSION";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "V_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "V_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteMpManufacturerProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_MP_MANUFACTURER";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "MAN_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "MAN_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteMpFormulationProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_MP_FORMULATION";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "FORM_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "FORM_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteApiManufacturerProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_API_MANUFACTURER";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "APIMAN_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "APIMAN_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteDossierMpProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_DOSSIER_MP";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "P_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "P_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteDossierCountryProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_DOSSIER_COUNTRY";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "DC_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "DC_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteModificationCountryProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_MODIFICATION_COUNTRY";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "MC_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "MC_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteMpStabilityProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_MP_STABILITY";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "P_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "P_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateGenerateDossierTasksProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "GENERATE_DOSSIER_TASKS";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "P_DOSSIER_COUNTRY_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "P_DOSSIER_COUNTRY_ID";
			cmd.Parameters.Add(p);

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "P_MARKETING_AGREEMENT_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "P_MARKETING_AGREEMENT_ID";
			cmd.Parameters.Add(p);

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "P_TASK_ACTION_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "P_TASK_ACTION_ID";
			cmd.Parameters.Add(p);

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "P_GROUP_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "P_GROUP_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

		public static DbCommand CreateDeleteEmaFormulationProcedure(DbConnection connection, string parameterPrefix)
		{
			var cmd = connection.CreateCommand();
			cmd.CommandText = "DELETE_EMA_FORMULATION";
			cmd.CommandType = CommandType.StoredProcedure;
			IDbDataParameter p = null;

			p = cmd.CreateParameter();
			p.ParameterName = parameterPrefix + "FORM_ID";
			p.DbType = DbType.Decimal;
            p.Direction = ParameterDirection.Input;
			p.SourceColumn = "FORM_ID";
			cmd.Parameters.Add(p);

			return cmd;
		}

	}
}
namespace Sid.Entities
{
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum, AllowMultiple = false)]
    public partial class TypeScriptAttribute : Attribute
    {
        public static IEnumerable<Type> GetClasses()
        {
            var asm = System.Reflection.Assembly.GetExecutingAssembly();
            foreach (var t in asm.GetTypes().Where(x => x.IsClass))
            {
                var attrs = t.GetCustomAttributes(typeof(TypeScriptAttribute), false);
                if (attrs != null && attrs.Length > 0) yield return t;
            }
        }

        public static IEnumerable<Type> GetEnums()
        {
            var asm = System.Reflection.Assembly.GetExecutingAssembly();
            foreach (var t in asm.GetTypes().Where(x => x.IsEnum))
            {
                var attrs = t.GetCustomAttributes(typeof(TypeScriptAttribute), false);
                if (attrs != null && attrs.Length > 0) yield return t;
            }
        }
    }
}
